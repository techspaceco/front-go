// Package front provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package front

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	HttpScopes = "http.Scopes"
)

// Defines values for AnalyticsExportRequest2Type.
const (
	AnalyticsExportRequest2TypeActivities AnalyticsExportRequest2Type = "activities"

	AnalyticsExportRequest2TypeMessages AnalyticsExportRequest2Type = "messages"
)

// Defines values for AnalyticsExportResponse2Status.
const (
	AnalyticsExportResponse2StatusDone AnalyticsExportResponse2Status = "done"

	AnalyticsExportResponse2StatusFailed AnalyticsExportResponse2Status = "failed"

	AnalyticsExportResponse2StatusRunning AnalyticsExportResponse2Status = "running"
)

// Defines values for AnalyticsMetricId.
const (
	AnalyticsMetricIdAvgFirstResponseTime AnalyticsMetricId = "avg_first_response_time"

	AnalyticsMetricIdAvgHandleTime AnalyticsMetricId = "avg_handle_time"

	AnalyticsMetricIdAvgResponseTime AnalyticsMetricId = "avg_response_time"

	AnalyticsMetricIdAvgSlaBreachTime AnalyticsMetricId = "avg_sla_breach_time"

	AnalyticsMetricIdAvgTotalReplyTime AnalyticsMetricId = "avg_total_reply_time"

	AnalyticsMetricIdNewSegmentsCount AnalyticsMetricId = "new_segments_count"

	AnalyticsMetricIdNumActiveSegmentsFull AnalyticsMetricId = "num_active_segments_full"

	AnalyticsMetricIdNumArchivedSegments AnalyticsMetricId = "num_archived_segments"

	AnalyticsMetricIdNumArchivedSegmentsWithReply AnalyticsMetricId = "num_archived_segments_with_reply"

	AnalyticsMetricIdNumClosedSegments AnalyticsMetricId = "num_closed_segments"

	AnalyticsMetricIdNumCsatSurveyResponse AnalyticsMetricId = "num_csat_survey_response"

	AnalyticsMetricIdNumMessagesReceived AnalyticsMetricId = "num_messages_received"

	AnalyticsMetricIdNumMessagesSent AnalyticsMetricId = "num_messages_sent"

	AnalyticsMetricIdNumOpenSegmentsEnd AnalyticsMetricId = "num_open_segments_end"

	AnalyticsMetricIdNumOpenSegmentsStart AnalyticsMetricId = "num_open_segments_start"

	AnalyticsMetricIdNumSlaBreach AnalyticsMetricId = "num_sla_breach"

	AnalyticsMetricIdNumWorkloadSegments AnalyticsMetricId = "num_workload_segments"

	AnalyticsMetricIdPctCsatSurveySatisfaction AnalyticsMetricId = "pct_csat_survey_satisfaction"

	AnalyticsMetricIdPctTaggedConversations AnalyticsMetricId = "pct_tagged_conversations"
)

// Defines values for AnalyticsMetricType.
const (
	AnalyticsMetricTypeDur AnalyticsMetricType = "dur"

	AnalyticsMetricTypeNum AnalyticsMetricType = "num"

	AnalyticsMetricTypePct AnalyticsMetricType = "pct"

	AnalyticsMetricTypeStr AnalyticsMetricType = "str"
)

// Defines values for AnalyticsReportResponse2Status.
const (
	AnalyticsReportResponse2StatusDone AnalyticsReportResponse2Status = "done"

	AnalyticsReportResponse2StatusFailed AnalyticsReportResponse2Status = "failed"

	AnalyticsReportResponse2StatusRunning AnalyticsReportResponse2Status = "running"
)

// Defines values for AnalyticsResponseStatus.
const (
	AnalyticsResponseStatusDone AnalyticsResponseStatus = "done"

	AnalyticsResponseStatusFailed AnalyticsResponseStatus = "failed"

	AnalyticsResponseStatusPending AnalyticsResponseStatus = "pending"
)

// Defines values for AnalyticsScalarType.
const (
	AnalyticsScalarTypeDuration AnalyticsScalarType = "duration"

	AnalyticsScalarTypeNumber AnalyticsScalarType = "number"

	AnalyticsScalarTypePercentage AnalyticsScalarType = "percentage"

	AnalyticsScalarTypeString AnalyticsScalarType = "string"
)

// Defines values for ChannelResponseSettingsUndoSendTime.
const (
	ChannelResponseSettingsUndoSendTimeN0 ChannelResponseSettingsUndoSendTime = 0

	ChannelResponseSettingsUndoSendTimeN10 ChannelResponseSettingsUndoSendTime = 10

	ChannelResponseSettingsUndoSendTimeN15 ChannelResponseSettingsUndoSendTime = 15

	ChannelResponseSettingsUndoSendTimeN30 ChannelResponseSettingsUndoSendTime = 30

	ChannelResponseSettingsUndoSendTimeN5 ChannelResponseSettingsUndoSendTime = 5

	ChannelResponseSettingsUndoSendTimeN60 ChannelResponseSettingsUndoSendTime = 60
)

// Defines values for ChannelResponseTypes.
const (
	ChannelResponseTypesCustom ChannelResponseTypes = "custom"

	ChannelResponseTypesFacebook ChannelResponseTypes = "facebook"

	ChannelResponseTypesImap ChannelResponseTypes = "imap"

	ChannelResponseTypesIntercom ChannelResponseTypes = "intercom"

	ChannelResponseTypesSmooch ChannelResponseTypes = "smooch"

	ChannelResponseTypesSmtp ChannelResponseTypes = "smtp"

	ChannelResponseTypesTruly ChannelResponseTypes = "truly"

	ChannelResponseTypesTwilio ChannelResponseTypes = "twilio"

	ChannelResponseTypesTwitter ChannelResponseTypes = "twitter"
)

// Defines values for ContactHandleSource.
const (
	ContactHandleSourceCustom ContactHandleSource = "custom"

	ContactHandleSourceEmail ContactHandleSource = "email"

	ContactHandleSourceFacebook ContactHandleSource = "facebook"

	ContactHandleSourceFrontChat ContactHandleSource = "front_chat"

	ContactHandleSourceIntercom ContactHandleSource = "intercom"

	ContactHandleSourcePhone ContactHandleSource = "phone"

	ContactHandleSourceTwitter ContactHandleSource = "twitter"
)

// Defines values for ConversationResponseStatus.
const (
	ConversationResponseStatusArchived ConversationResponseStatus = "archived"

	ConversationResponseStatusAssigned ConversationResponseStatus = "assigned"

	ConversationResponseStatusDeleted ConversationResponseStatus = "deleted"

	ConversationResponseStatusUnassigned ConversationResponseStatus = "unassigned"
)

// Defines values for CreateChannelSettingsUndoSendTime.
const (
	CreateChannelSettingsUndoSendTimeN0 CreateChannelSettingsUndoSendTime = 0

	CreateChannelSettingsUndoSendTimeN10 CreateChannelSettingsUndoSendTime = 10

	CreateChannelSettingsUndoSendTimeN15 CreateChannelSettingsUndoSendTime = 15

	CreateChannelSettingsUndoSendTimeN30 CreateChannelSettingsUndoSendTime = 30

	CreateChannelSettingsUndoSendTimeN5 CreateChannelSettingsUndoSendTime = 5

	CreateChannelSettingsUndoSendTimeN60 CreateChannelSettingsUndoSendTime = 60
)

// Defines values for CreateChannelType.
const (
	CreateChannelTypeCustom CreateChannelType = "custom"

	CreateChannelTypeSmtp CreateChannelType = "smtp"

	CreateChannelTypeTwilio CreateChannelType = "twilio"
)

// Defines values for CreateDraftMode.
const (
	CreateDraftModePrivate CreateDraftMode = "private"

	CreateDraftModeShared CreateDraftMode = "shared"
)

// Defines values for CreateShiftColor.
const (
	CreateShiftColorBlack CreateShiftColor = "black"

	CreateShiftColorBlue CreateShiftColor = "blue"

	CreateShiftColorGreen CreateShiftColor = "green"

	CreateShiftColorGrey CreateShiftColor = "grey"

	CreateShiftColorOrange CreateShiftColor = "orange"

	CreateShiftColorPink CreateShiftColor = "pink"

	CreateShiftColorPurple CreateShiftColor = "purple"

	CreateShiftColorRed CreateShiftColor = "red"

	CreateShiftColorTeal CreateShiftColor = "teal"

	CreateShiftColorYellow CreateShiftColor = "yellow"
)

// Defines values for CreateTagHighlight.
const (
	CreateTagHighlightBlue CreateTagHighlight = "blue"

	CreateTagHighlightGreen CreateTagHighlight = "green"

	CreateTagHighlightGrey CreateTagHighlight = "grey"

	CreateTagHighlightLightBlue CreateTagHighlight = "light-blue"

	CreateTagHighlightOrange CreateTagHighlight = "orange"

	CreateTagHighlightPink CreateTagHighlight = "pink"

	CreateTagHighlightPurple CreateTagHighlight = "purple"

	CreateTagHighlightRed CreateTagHighlight = "red"

	CreateTagHighlightYellow CreateTagHighlight = "yellow"
)

// Defines values for CustomFieldResponseType.
const (
	CustomFieldResponseTypeBoolean CustomFieldResponseType = "boolean"

	CustomFieldResponseTypeDatetime CustomFieldResponseType = "datetime"

	CustomFieldResponseTypeNumber CustomFieldResponseType = "number"

	CustomFieldResponseTypeString CustomFieldResponseType = "string"
)

// Defines values for CustomMessageBodyFormat.
const (
	CustomMessageBodyFormatHtml CustomMessageBodyFormat = "html"

	CustomMessageBodyFormatMarkdown CustomMessageBodyFormat = "markdown"
)

// Defines values for EditDraftMode.
const (
	EditDraftModeShared EditDraftMode = "shared"
)

// Defines values for EventResponseType.
const (
	EventResponseTypeArchive EventResponseType = "archive"

	EventResponseTypeAssign EventResponseType = "assign"

	EventResponseTypeComment EventResponseType = "comment"

	EventResponseTypeForward EventResponseType = "forward"

	EventResponseTypeInbound EventResponseType = "inbound"

	EventResponseTypeMove EventResponseType = "move"

	EventResponseTypeOutbound EventResponseType = "outbound"

	EventResponseTypeReopen EventResponseType = "reopen"

	EventResponseTypeRestore EventResponseType = "restore"

	EventResponseTypeSendingError EventResponseType = "sending_error"

	EventResponseTypeTag EventResponseType = "tag"

	EventResponseTypeTrash EventResponseType = "trash"

	EventResponseTypeUnassign EventResponseType = "unassign"

	EventResponseTypeUntag EventResponseType = "untag"
)

// Defines values for ExportResponseStatus.
const (
	ExportResponseStatusDone ExportResponseStatus = "done"

	ExportResponseStatusFailed ExportResponseStatus = "failed"

	ExportResponseStatusPending ExportResponseStatus = "pending"

	ExportResponseStatusRunning ExportResponseStatus = "running"
)

// Defines values for ImportMessageBodyFormat.
const (
	ImportMessageBodyFormatHtml ImportMessageBodyFormat = "html"

	ImportMessageBodyFormatMarkdown ImportMessageBodyFormat = "markdown"
)

// Defines values for ImportMessageType.
const (
	ImportMessageTypeCustom ImportMessageType = "custom"

	ImportMessageTypeEmail ImportMessageType = "email"

	ImportMessageTypeIntercom ImportMessageType = "intercom"

	ImportMessageTypeSms ImportMessageType = "sms"
)

// Defines values for MessageResponseDraftMode.
const (
	MessageResponseDraftModePrivate MessageResponseDraftMode = "private"

	MessageResponseDraftModeShared MessageResponseDraftMode = "shared"
)

// Defines values for MessageResponseType.
const (
	MessageResponseTypeCustom MessageResponseType = "custom"

	MessageResponseTypeEmail MessageResponseType = "email"

	MessageResponseTypeFacebook MessageResponseType = "facebook"

	MessageResponseTypeIntercom MessageResponseType = "intercom"

	MessageResponseTypeSmooch MessageResponseType = "smooch"

	MessageResponseTypeSms MessageResponseType = "sms"

	MessageResponseTypeTrulyCall MessageResponseType = "truly-call"

	MessageResponseTypeTweet MessageResponseType = "tweet"
)

// Defines values for RecipientResponseRole.
const (
	RecipientResponseRoleBcc RecipientResponseRole = "bcc"

	RecipientResponseRoleCc RecipientResponseRole = "cc"

	RecipientResponseRoleFrom RecipientResponseRole = "from"

	RecipientResponseRoleTo RecipientResponseRole = "to"
)

// Defines values for ShiftResponseColor.
const (
	ShiftResponseColorBlack ShiftResponseColor = "black"
)

// Defines values for TagResponseHighlight.
const (
	TagResponseHighlightBlue TagResponseHighlight = "blue"

	TagResponseHighlightGreen TagResponseHighlight = "green"

	TagResponseHighlightGrey TagResponseHighlight = "grey"

	TagResponseHighlightLightBlue TagResponseHighlight = "light-blue"

	TagResponseHighlightOrange TagResponseHighlight = "orange"

	TagResponseHighlightPink TagResponseHighlight = "pink"

	TagResponseHighlightPurple TagResponseHighlight = "purple"

	TagResponseHighlightRed TagResponseHighlight = "red"

	TagResponseHighlightYellow TagResponseHighlight = "yellow"
)

// Defines values for UpdateChannelSettingsUndoSendTime.
const (
	UpdateChannelSettingsUndoSendTimeN0 UpdateChannelSettingsUndoSendTime = 0

	UpdateChannelSettingsUndoSendTimeN10 UpdateChannelSettingsUndoSendTime = 10

	UpdateChannelSettingsUndoSendTimeN15 UpdateChannelSettingsUndoSendTime = 15

	UpdateChannelSettingsUndoSendTimeN30 UpdateChannelSettingsUndoSendTime = 30

	UpdateChannelSettingsUndoSendTimeN5 UpdateChannelSettingsUndoSendTime = 5

	UpdateChannelSettingsUndoSendTimeN60 UpdateChannelSettingsUndoSendTime = 60
)

// Defines values for UpdateConversationStatus.
const (
	UpdateConversationStatusArchived UpdateConversationStatus = "archived"

	UpdateConversationStatusDeleted UpdateConversationStatus = "deleted"

	UpdateConversationStatusOpen UpdateConversationStatus = "open"

	UpdateConversationStatusSpam UpdateConversationStatus = "spam"
)

// Defines values for UpdateShiftColor.
const (
	UpdateShiftColorBlack UpdateShiftColor = "black"

	UpdateShiftColorBlue UpdateShiftColor = "blue"

	UpdateShiftColorGreen UpdateShiftColor = "green"

	UpdateShiftColorGrey UpdateShiftColor = "grey"

	UpdateShiftColorOrange UpdateShiftColor = "orange"

	UpdateShiftColorPink UpdateShiftColor = "pink"

	UpdateShiftColorPurple UpdateShiftColor = "purple"

	UpdateShiftColorRed UpdateShiftColor = "red"

	UpdateShiftColorTeal UpdateShiftColor = "teal"

	UpdateShiftColorYellow UpdateShiftColor = "yellow"
)

// Defines values for UpdateTagHighlight.
const (
	UpdateTagHighlightBlue UpdateTagHighlight = "blue"

	UpdateTagHighlightGreen UpdateTagHighlight = "green"

	UpdateTagHighlightGrey UpdateTagHighlight = "grey"

	UpdateTagHighlightLightBlue UpdateTagHighlight = "light-blue"

	UpdateTagHighlightOrange UpdateTagHighlight = "orange"

	UpdateTagHighlightPink UpdateTagHighlight = "pink"

	UpdateTagHighlightPurple UpdateTagHighlight = "purple"

	UpdateTagHighlightRed UpdateTagHighlight = "red"

	UpdateTagHighlightYellow UpdateTagHighlight = "yellow"
)

// Defines values for SortOrder.
const (
	Asc SortOrder = "asc"

	Desc SortOrder = "desc"
)

// Account defines model for Account.
type Account struct {
	// Custom attributes for this account.
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`

	// Account description
	Description *string   `json:"description,omitempty"`
	Domains     *[]string `json:"domains,omitempty"`

	// ID of the Account in an external system
	ExternalId *string `json:"external_id,omitempty"`

	// Unique identifier of the account
	Id *string `json:"id,omitempty"`

	// Name of the Account
	Name *string `json:"name,omitempty"`
}

// AccountIds defines model for AccountIds.
type AccountIds struct {
	AccountIds []ResourceID `json:"account_ids"`
}

// AccountResponse defines model for AccountResponse.
type AccountResponse struct {
	// Timestamp when the account was created
	CreatedAt *float32 `json:"created_at,omitempty"`

	// Custom Attributes for this account
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`

	// Account Description
	Description *string   `json:"description,omitempty"`
	Domains     *[]string `json:"domains,omitempty"`

	// ID of the Account in an External system, such as your backoffice system or CRM
	ExternalId *string `json:"external_id,omitempty"`

	// Unique identifier of the account
	Id *string `json:"id,omitempty"`

	// URL of the Account's logo
	LogoUrl *string `json:"logo_url,omitempty"`

	// Account name
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to contacts associated to the account
			Contacts *string `json:"contacts,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Timestamp when the account was updated
	UpdatedAt *float32 `json:"updated_at,omitempty"`
}

// AddContactsToGroup defines model for AddContactsToGroup.
type AddContactsToGroup struct {
	// List of IDs of the contacts to add in the requested group
	ContactIds []ResourceID `json:"contact_ids"`
}

// AnalyticsExportRequest2 defines model for AnalyticsExportRequest2.
type AnalyticsExportRequest2 struct {
	// End time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded up to the end of the day.
	End float32 `json:"end"`

	// Resources to compute the analytics for. Defaults to all.
	Filters *AnalyticsFilters `json:"filters,omitempty"`

	// Start time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded down to the start of the day.
	Start float32 `json:"start"`

	// [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use Etc/UTC.
	Timezone *string                     `json:"timezone,omitempty"`
	Type     AnalyticsExportRequest2Type `json:"type"`
}

// AnalyticsExportRequest2Type defines model for AnalyticsExportRequest2.Type.
type AnalyticsExportRequest2Type string

// AnalyticsExportResponse2 defines model for AnalyticsExportResponse2.
type AnalyticsExportResponse2 struct {
	// Timestamp (in seconds) at which the export was requested.
	CreatedAt *float32 `json:"created_at,omitempty"`

	// Resources to compute the analytics for. Defaults to all.
	Filters *AnalyticsFilters `json:"filters,omitempty"`

	// Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.
	Progress      *int `json:"progress,omitempty"`
	ResourceLinks *struct {
		// Link to analytics export
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Size (in bytes) of the export data.
	Size *float32 `json:"size,omitempty"`

	// Status of the analytics
	Status *AnalyticsExportResponse2Status `json:"status,omitempty"`

	// The URL from which the export data can be downloaded.
	Url *string `json:"url,omitempty"`
}

// Status of the analytics
type AnalyticsExportResponse2Status string

// Resources to compute the analytics for. Defaults to all.
type AnalyticsFilters interface{}

// AnalyticsMetricId defines model for AnalyticsMetricId.
type AnalyticsMetricId string

// Type of the analytics value. `num` => Numeric Value, `dur` => Duration value, `str` => String value, `pct` => Percentage value
type AnalyticsMetricType string

// AnalyticsReportRequest2 defines model for AnalyticsReportRequest2.
type AnalyticsReportRequest2 struct {
	// End time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded up to the end of the day.
	End float32 `json:"end"`

	// Resources to compute the analytics for. Defaults to all.
	Filters *AnalyticsFilters `json:"filters,omitempty"`

	// List of the metrics required.
	Metrics []AnalyticsMetricId `json:"metrics"`

	// Start time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded down to the start of the day.
	Start float32 `json:"start"`

	// [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use Etc/UTC.
	Timezone *string `json:"timezone,omitempty"`
}

// AnalyticsReportResponse2 defines model for AnalyticsReportResponse2.
type AnalyticsReportResponse2 struct {
	// The metrics computed for the report.
	Metrics *[]AnalyticsScalar2 `json:"metrics,omitempty"`

	// Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.
	Progress      *int `json:"progress,omitempty"`
	ResourceLinks *struct {
		// Link to analytics job.
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Status of the report.
	Status *AnalyticsReportResponse2Status `json:"status,omitempty"`
}

// Status of the report.
type AnalyticsReportResponse2Status string

// AnalyticsResponse defines model for AnalyticsResponse.
type AnalyticsResponse struct {
	// List of the metrics required
	Metrics *[]interface{} `json:"metrics,omitempty"`

	// Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.
	Progress      *int `json:"progress,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to analytics job
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`
	} `json:"resource_links,omitempty"`

	// Status of the analytics
	Status *AnalyticsResponseStatus `json:"status,omitempty"`
}

// Status of the analytics
type AnalyticsResponseStatus string

// AnalyticsScalar defines model for AnalyticsScalar.
type AnalyticsScalar struct {
	// ID of the metric
	Id *string `json:"id,omitempty"`

	// Type of the metric (scalar)
	MetricType *string `json:"metric_type,omitempty"`

	// Value for the previous time period
	P *int `json:"p,omitempty"`

	// Type of the analytics value. `num` => Numeric Value, `dur` => Duration value, `str` => String value, `pct` => Percentage value
	T *AnalyticsMetricType `json:"t,omitempty"`

	// Value for the requested time period
	V *int `json:"v,omitempty"`
}

// AnalyticsScalar2 defines model for AnalyticsScalar2.
type AnalyticsScalar2 struct {
	Id    *AnalyticsMetricId    `json:"id,omitempty"`
	Type  *AnalyticsScalarType  `json:"type,omitempty"`
	Value *AnalyticsScalarValue `json:"value,omitempty"`
}

// AnalyticsScalarType defines model for AnalyticsScalarType.
type AnalyticsScalarType string

// AnalyticsScalarValue defines model for AnalyticsScalarValue.
type AnalyticsScalarValue struct {
	Id   *AnalyticsMetricId   `json:"id,omitempty"`
	Type *AnalyticsScalarType `json:"type,omitempty"`

	// The value of a scalar metric.
	Value *interface{} `json:"value,omitempty"`
}

// AnalyticsTable defines model for AnalyticsTable.
type AnalyticsTable struct {
	// Columns of the table
	Columns *[]struct {
		// ID of the column
		Id *string `json:"id,omitempty"`

		// Value for the requested time period
		Label *int `json:"label,omitempty"`

		// Type of the analytics value. `num` => Numeric Value, `dur` => Duration value, `str` => String value, `pct` => Percentage value
		Type *AnalyticsMetricType `json:"type,omitempty"`
	} `json:"columns,omitempty"`

	// ID of the metric
	Id *string `json:"id,omitempty"`

	// Type of the metric (table)
	MetricType *string `json:"metric_type,omitempty"`

	// Rows of the table
	Rows *[]struct {
		// Value for the previous time period
		P *int `json:"p,omitempty"`

		// Type of the analytics value. `num` => Numeric Value, `dur` => Duration value, `str` => String value, `pct` => Percentage value
		T *AnalyticsMetricType `json:"t,omitempty"`

		// Value for the requested time period
		V *int `json:"v,omitempty"`
	} `json:"rows,omitempty"`
}

// AnalyticsTimeGraph defines model for AnalyticsTimeGraph.
type AnalyticsTimeGraph struct {
	// ID of the metric
	Id *string `json:"id,omitempty"`

	// Type of the metric (time_graph)
	MetricType *string `json:"metric_type,omitempty"`

	// Values for each time interval
	Vals *[]struct {
		// End of the interval
		End *int `json:"end,omitempty"`

		// Label of the time interval
		Label *string `json:"label,omitempty"`

		// Value for the previous time period
		P *int `json:"p,omitempty"`

		// Start of the interval
		Start *int `json:"start,omitempty"`

		// Type of the analytics value. `num` => Numeric Value, `dur` => Duration value, `str` => String value, `pct` => Percentage value
		T *AnalyticsMetricType `json:"t,omitempty"`

		// Value for the requested time period
		V *int `json:"v,omitempty"`
	} `json:"vals,omitempty"`
}

// Attachment defines model for Attachment.
type Attachment struct {
	// Content type of the attached file
	ContentType *string `json:"content_type,omitempty"`

	// Name of the attached file
	Filename *string `json:"filename,omitempty"`
	Id       *string `json:"id,omitempty"`

	// Attachment metadata
	Metadata *struct {
		// Unique identifier used to link an attachment to where it is used in the message body
		Cid *string `json:"cid,omitempty"`

		// Whether or not the attachment is part of the message body
		IsInline *bool `json:"is_inline,omitempty"`
	} `json:"metadata,omitempty"`

	// Size (in byte) of the attached file
	Size *int `json:"size,omitempty"`

	// URL to download the attached file
	Url *string `json:"url,omitempty"`
}

// ChannelIds defines model for ChannelIds.
type ChannelIds struct {
	ChannelIds []ResourceID `json:"channel_ids"`
}

// ChannelResponse defines model for ChannelResponse.
type ChannelResponse struct {
	// Address receiving the messages
	Address *string `json:"address,omitempty"`

	// Unique identifier for the channel
	Id *string `json:"id,omitempty"`

	// Whether or not the channel is individual
	IsPrivate *bool `json:"is_private,omitempty"`

	// Whether or not the channel configuration is valid
	IsValid       *bool `json:"is_valid,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to channel inbox
			Inbox *string `json:"inbox,omitempty"`

			// Link to channel owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Address which appears as the sender for messages sent from Front
	SendAs *string `json:"send_as,omitempty"`

	// Channel settings
	Settings *struct {
		// Whether teammates without inbox access can reply on this channel. Only present for shared channels; omitted for private channels.
		AllTeammatesCanReply *bool `json:"all_teammates_can_reply,omitempty"`

		// The time (measured in seconds) that users have to undo a send operation in the channel.
		UndoSendTime *ChannelResponseSettingsUndoSendTime `json:"undo_send_time,omitempty"`
	} `json:"settings,omitempty"`

	// Type of the channel
	Types *ChannelResponseTypes `json:"types,omitempty"`
}

// The time (measured in seconds) that users have to undo a send operation in the channel.
type ChannelResponseSettingsUndoSendTime int

// Type of the channel
type ChannelResponseTypes string

// CommentResponse defines model for CommentResponse.
type CommentResponse struct {
	// List of files attached to the comment
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// A teammate is a user in Front.
	Author *TeammateResponse `json:"author,omitempty"`

	// Content of the comment
	Body *string `json:"body,omitempty"`

	// Unique identifier of the comment
	Id *string `json:"id,omitempty"`

	// Date at which the comment was posted
	PostedAt      *int `json:"posted_at,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to comment's conversation
			Conversations *string `json:"conversations,omitempty"`

			// Link to comment mentions
			Mentions *string `json:"mentions,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// Contact defines model for Contact.
type Contact struct {
	// Binary data of avatar. Must use `Content-Type: multipart/form-data` if specified.
	Avatar *string `json:"avatar,omitempty"`

	// Custom field attributes for this contact. Leave empty if you do not wish to update the attributes. Not sending existing attributes will automatically remove them.
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`

	// Contact description
	Description *string `json:"description,omitempty"`

	// List of all the group names the contact belongs to. It will automatically create missing groups
	GroupNames *[]string `json:"group_names,omitempty"`

	// Unique identifier of the contact
	Id *string `json:"id,omitempty"`

	// Whether or not the contact is marked as a spammer
	IsSpammer *bool `json:"is_spammer,omitempty"`

	// List of all the links of the contact
	Links *[]string `json:"links,omitempty"`

	// Contact name
	Name *string `json:"name,omitempty"`
}

// ContactGroup defines model for ContactGroup.
type ContactGroup struct {
	// Unique identifier of the group
	Id *string `json:"id,omitempty"`

	// Whether or not the contact is individual
	IsPrivate *bool `json:"is_private,omitempty"`

	// Name of the group
	Name *string `json:"name,omitempty"`
}

// ContactGroupResponses defines model for ContactGroupResponses.
type ContactGroupResponses struct {
	// Unique identifier of the group
	Id *string `json:"id,omitempty"`

	// Whether or not the contact is individual
	IsPrivate *bool `json:"is_private,omitempty"`

	// Name of the group
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to group contacts
			Contacts *string `json:"contacts,omitempty"`

			// Link to group owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ContactHandle defines model for ContactHandle.
type ContactHandle struct {
	// Handle used to reach the contact.
	Handle string `json:"handle"`

	// Source of the handle. Can be `email`, `phone`, `twitter`, `facebook`, `intercom`, `front_chat`, or `custom`.
	Source ContactHandleSource `json:"source"`
}

// Source of the handle. Can be `email`, `phone`, `twitter`, `facebook`, `intercom`, `front_chat`, or `custom`.
type ContactHandleSource string

// ContactIds defines model for ContactIds.
type ContactIds struct {
	ContactIds []ResourceID `json:"contact_ids"`
}

// ContactNoteResponses defines model for ContactNoteResponses.
type ContactNoteResponses struct {
	// A teammate is a user in Front.
	Author *TeammateResponse `json:"author,omitempty"`

	// Content of the note
	Body *string `json:"body,omitempty"`

	// Date at which the note have been created
	CreatedAt *int `json:"created_at,omitempty"`
}

// ContactResponse defines model for ContactResponse.
type ContactResponse struct {
	// URL of the contact's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Custom field attributes for this contact.
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`

	// Contact description
	Description *string `json:"description,omitempty"`

	// List of the groups the contact belongs to.
	Groups *[]ContactGroupResponses `json:"groups,omitempty"`

	// List of the handles and sources with which the contact is reachable.
	Handles *[]ContactHandle `json:"handles,omitempty"`

	// Unique identifier of the contact
	Id *string `json:"id,omitempty"`

	// Whether or not the contact is individual
	IsPrivate *bool `json:"is_private,omitempty"`

	// Whether or not the contact is marked as a spammer
	IsSpammer *bool `json:"is_spammer,omitempty"`

	// List of all the links of the contact
	Links *[]string `json:"links,omitempty"`

	// Contact name
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to contact conversations
			Conversations *string `json:"conversations,omitempty"`

			// Link to contact notes
			Notes *string `json:"notes,omitempty"`

			// Link to contact owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ConversationResponse defines model for ConversationResponse.
type ConversationResponse struct {
	// A teammate is a user in Front.
	Assignee *TeammateResponse `json:"assignee,omitempty"`

	// Timestamp at which the conversation have been created.
	CreatedAt *int `json:"created_at,omitempty"`

	// Unique identifier of the message
	Id *string `json:"id,omitempty"`

	// Whether or not the conversation is private
	IsPrivate *bool `json:"is_private,omitempty"`

	// List of the links for this conversation
	Links *[]LinkResponse `json:"links,omitempty"`

	// Optional metadata about the conversation
	Metadata *struct {
		// List of external_ids for partner channel associated with the conversation. Only present for partner channel token authenticated requests.
		ExternalConversationIds *[]string `json:"external_conversation_ids,omitempty"`
	} `json:"metadata,omitempty"`
	Recipient     *RecipientResponse `json:"recipient,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to conversation comment
			Comments *string `json:"comments,omitempty"`

			// Link to conversation events
			Events *string `json:"events,omitempty"`

			// Link to conversation followers
			Followers *string `json:"followers,omitempty"`

			// Link to conversation inboxes
			Inboxes *string `json:"inboxes,omitempty"`

			// Link to last message of the conversation
			LastMessage *string `json:"last_message,omitempty"`

			// Link to conversation messages
			Messages *string `json:"messages,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// List of scheduled (non-expired and non-canceled) reminders for this conversation
	ScheduledReminders *[]Reminder `json:"scheduled_reminders,omitempty"`

	// Status of the conversation
	Status *ConversationResponseStatus `json:"status,omitempty"`

	// Subject of the message for email message
	Subject *string `json:"subject,omitempty"`

	// List of the tags for this conversation
	Tags *[]TagResponse `json:"tags,omitempty"`
}

// Status of the conversation
type ConversationResponseStatus string

// CreateChannel defines model for CreateChannel.
type CreateChannel struct {
	// Name of the channel
	Name *string `json:"name,omitempty"`

	// Sending address of your channel
	SendAs *string `json:"send_as,omitempty"`

	// Settings of the channel
	Settings *struct {
		// Whether teammates without inbox access can reply on this channel. Only allowed for shared channels.
		AllTeammatesCanReply *bool `json:"all_teammates_can_reply,omitempty"`

		// The time (measured in seconds) that users have to undo a send operation in the channel.
		UndoSendTime *CreateChannelSettingsUndoSendTime `json:"undo_send_time,omitempty"`
	} `json:"settings,omitempty"`

	// Type of the channel
	Type CreateChannelType `json:"type"`
}

// The time (measured in seconds) that users have to undo a send operation in the channel.
type CreateChannelSettingsUndoSendTime int

// Type of the channel
type CreateChannelType string

// CreateComment defines model for CreateComment.
type CreateComment struct {
	// Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb).
	Attachments *[]string `json:"attachments,omitempty"`

	// ID of the teammate creating the comment
	AuthorId string `json:"author_id"`

	// Content of the comment
	Body string `json:"body"`
}

// CreateContact defines model for CreateContact.
type CreateContact struct {
	// Embedded struct due to allOf(#/components/schemas/Contact)
	Contact `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// List of the handles for this contact. Each handle object should include `handle` and `source` fields.
	Handles *[]ContactHandle `json:"handles,omitempty"`
}

// CreateContactGroup defines model for CreateContactGroup.
type CreateContactGroup struct {
	// Name of the group
	Name string `json:"name"`
}

// CreateContactNote defines model for CreateContactNote.
type CreateContactNote struct {
	// ID of teammate creating the note
	AuthorId string `json:"author_id"`

	// Content of the note
	Body string `json:"body"`
}

// CreateDraft defines model for CreateDraft.
type CreateDraft struct {
	// Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb).
	Attachments *[]string `json:"attachments,omitempty"`

	// ID of the teammate on behalf of whom the draft will be created
	AuthorId string    `json:"author_id"`
	Bcc      *[]string `json:"bcc,omitempty"`

	// Body of the draft
	Body string    `json:"body"`
	Cc   *[]string `json:"cc,omitempty"`

	// Mode of the draft to create. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).
	Mode *CreateDraftMode `json:"mode,omitempty"`

	// Subject of the draft.
	Subject *string   `json:"subject,omitempty"`
	To      *[]string `json:"to,omitempty"`
}

// Mode of the draft to create. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).
type CreateDraftMode string

// CreateInbox defines model for CreateInbox.
type CreateInbox struct {
	Name        string        `json:"name"`
	TeammateIds *[]ResourceID `json:"teammate_ids,omitempty"`
}

// A link is used to connect a Front conversation to an external resource.
type CreateLink struct {
	// Underlying identifying url of the link
	ExternalUrl string `json:"external_url"`

	// Name of the link. If none is specified, the external_url is used as a default
	Name *string `json:"name,omitempty"`
}

// A message template that is used for pre-written responses
type CreateMessageTemplateAsChild struct {
	// Body of the message template
	Body     string    `json:"body"`
	InboxIds *[]string `json:"inbox_ids,omitempty"`

	// Name of the message template
	Name string `json:"name"`

	// Subject of the message template. If not set, the name will be used to populate the subject.
	Subject *string `json:"subject,omitempty"`
}

// A message template folder that is used to store message templates or other folders.
type CreateMessageTemplateFolder struct {
	// Name of the message template folder
	Name string `json:"name"`

	// ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null.
	ParentFolderId *string `json:"parent_folder_id,omitempty"`
}

// A message template folder that is used to store message templates or other folders.
type CreateMessageTemplateFolderAsChild struct {
	// Name of the message template folder
	Name string `json:"name"`
}

// A message template that is used for pre-written responses
type CreatePrivateMessageTemplate struct {
	// Body of the message template
	Body string `json:"body"`

	// ID of the message template folder to place this message template in
	FolderId *string `json:"folder_id,omitempty"`

	// Name of the message template
	Name string `json:"name"`

	// Subject of the message template. If not set, the name will be used to populate the subject.
	Subject *string `json:"subject,omitempty"`
}

// A message template that is used for pre-written responses
type CreateSharedMessageTemplate struct {
	// Body of the message template
	Body string `json:"body"`

	// ID of the message template folder to place this message template in
	FolderId *string   `json:"folder_id,omitempty"`
	InboxIds *[]string `json:"inbox_ids,omitempty"`

	// Name of the message template
	Name string `json:"name"`

	// Subject of the message template. If not set, the name will be used to populate the subject.
	Subject *string `json:"subject,omitempty"`
}

// CreateShift defines model for CreateShift.
type CreateShift struct {
	// Color of the shift
	Color CreateShiftColor `json:"color"`

	// Name of the shift
	Name        string         `json:"name"`
	TeammateIds []ResourceID   `json:"teammate_ids"`
	Times       ShiftIntervals `json:"times"`

	// A timezone name as defined in the IANA tz database
	Timezone string `json:"timezone"`
}

// Color of the shift
type CreateShiftColor string

// A tag is a label that can be used to classify conversations.
type CreateTag struct {
	// Highlight color of the tag.
	Highlight *CreateTagHighlight `json:"highlight,omitempty"`

	// Whether the tag is visible in conversation lists.
	IsVisibleInConversationLists *bool `json:"is_visible_in_conversation_lists,omitempty"`

	// Name of the tag
	Name string `json:"name"`
}

// Highlight color of the tag.
type CreateTagHighlight string

// CustomFieldResponse defines model for CustomFieldResponse.
type CustomFieldResponse struct {
	// Description of the custom field
	Description *string `json:"description,omitempty"`

	// Unique identifier of the custom field
	Id *string `json:"id,omitempty"`

	// Name of the custom field
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Type of the custom field
	Type *CustomFieldResponseType `json:"type,omitempty"`
}

// Type of the custom field
type CustomFieldResponseType string

// CustomMessage defines model for CustomMessage.
type CustomMessage struct {
	// Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb).
	Attachments *[]string `json:"attachments,omitempty"`

	// Body of the message
	Body string `json:"body"`

	// Format of the message body. Can be `markdown` (default) or `html`.
	BodyFormat *CustomMessageBodyFormat `json:"body_format,omitempty"`
	Metadata   *struct {
		// Custom object where any internal information can be stored
		Headers *map[string]interface{} `json:"headers,omitempty"`

		// Reference which will be used to thread messages. If  omitted, Front threads by sender instead
		ThreadRef *string `json:"thread_ref,omitempty"`
	} `json:"metadata,omitempty"`

	// Data of the sender
	Sender struct {
		// ID of the contact in Front corresponding to the sender
		ContactId *string `json:"contact_id,omitempty"`

		// Handle of the sender. It can be any string used to uniquely identify the sender
		Handle string `json:"handle"`

		// Name of the sender
		Name *string `json:"name,omitempty"`
	} `json:"sender"`

	// Subject of the message
	Subject *string `json:"subject,omitempty"`
}

// Format of the message body. Can be `markdown` (default) or `html`.
type CustomMessageBodyFormat string

// DeleteContactHandle defines model for DeleteContactHandle.
type DeleteContactHandle struct {
	// Embedded struct due to allOf(#/components/schemas/ContactHandle)
	ContactHandle `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Force the deletetion of the contact if the handle is the last one
	Force *bool `json:"force,omitempty"`
}

// DeleteDraft defines model for DeleteDraft.
type DeleteDraft struct {
	// Version of the draft
	Version string `json:"version"`
}

// EditDraft defines model for EditDraft.
type EditDraft struct {
	// Embedded struct due to allOf(#/components/schemas/ReplyDraft)
	ReplyDraft `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Mode of the draft to update. Can only be 'shared' (draft is visible to all teammates with access to the conversation).
	Mode *EditDraftMode `json:"mode,omitempty"`

	// Version of the draft
	Version *string `json:"version,omitempty"`
}

// Mode of the draft to update. Can only be 'shared' (draft is visible to all teammates with access to the conversation).
type EditDraftMode string

// An event is created everytime something interesting is happening in Front.
type EventResponse struct {
	Conversation *ConversationResponse `json:"conversation,omitempty"`

	// Date at which the event has been emitted
	EmittedAt *string `json:"emitted_at,omitempty"`

	// Unique identifier of the event
	Id            *int `json:"id,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Event source
	Source *struct {
		// Metadata about the resource
		Meta *struct {
			// Type of resource
			Type *interface{} `json:"type,omitempty"`
		} `json:"_meta,omitempty"`

		// The resource which triggered the event
		Data *interface{} `json:"data,omitempty"`
	} `json:"source,omitempty"`

	// Partial representation (type & id) of the event's target
	Target *struct {
		// Metadata about the resource
		Meta *struct {
			// The resource which received the event
			Data *interface{} `json:"data,omitempty"`

			// Type of resource
			Type *interface{} `json:"type,omitempty"`
		} `json:"_meta,omitempty"`
	} `json:"target,omitempty"`

	// Type of event
	Type *EventResponseType `json:"type,omitempty"`
}

// Type of event
type EventResponseType string

// ExportQuery defines model for ExportQuery.
type ExportQuery struct {
	// List of columns requested for the export.
	// If the string 'all' is provided, all columns will be exported.
	// If no value is provided, the legacy list of column will be used.
	Columns *[]string `json:"columns,omitempty"`

	// End time of the data to include in the export.
	End int `json:"end"`

	// ID of the inbox to export the analytics for. If omitted, the export will contain all the inboxes.
	InboxId *string `json:"inbox_id,omitempty"`

	// Whether to export all the events or  only messages. Default to `false`.
	ShouldExportEvents *bool `json:"should_export_events,omitempty"`

	// Whether to export events from individual inboxes of team members. Default to `false`.
	ShouldIncludePrivateInboxes *bool `json:"should_include_private_inboxes,omitempty"`

	// Start time of the data to include in the export.
	Start int `json:"start"`

	// ID the tag to export the analytics for. If omitted, the export will contain all the tags.
	TagId *string `json:"tag_id,omitempty"`

	// [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use UTC.
	Timezone *string `json:"timezone,omitempty"`
}

// ExportResponse defines model for ExportResponse.
type ExportResponse struct {
	// Date at which the export has been created.
	CreatedAt *int `json:"created_at,omitempty"`

	// Name of the file of the generated export. Will be null until the status is "done".
	Filename *string `json:"filename,omitempty"`

	// Unique identifier for the export
	Id *string `json:"id,omitempty"`

	// Number ranging from 0 to 100 corresponding to the percentage of the export processed.
	Progress      *int         `json:"progress,omitempty"`
	Query         *ExportQuery `json:"query,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to resource's owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Size (in bytes) of the export file.
	Size *int `json:"size,omitempty"`

	// Status of the export
	Status *ExportResponseStatus `json:"status,omitempty"`

	// URL of the generated export. Will be null until the status is "done".
	Url *string `json:"url,omitempty"`
}

// Status of the export
type ExportResponseStatus string

// IdentityResponse defines model for IdentityResponse.
type IdentityResponse struct {
	// Unique ID of company
	Id *int `json:"id,omitempty"`

	// Name of company
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ImportMessage defines model for ImportMessage.
type ImportMessage struct {
	// ID of the teammate who will be assigned to the conversation.
	AssigneeId *string `json:"assignee_id,omitempty"`

	// Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb).
	Attachments *[]string `json:"attachments,omitempty"`
	Bcc         *[]string `json:"bcc,omitempty"`

	// Body of the message
	Body string `json:"body"`

	// Format of the message body. Can be `markdown` (default) or `html`, and can only be specified for `email` type.
	BodyFormat *ImportMessageBodyFormat `json:"body_format,omitempty"`
	Cc         *[]string                `json:"cc,omitempty"`

	// Date at which the message as been sent or received.
	CreatedAt int `json:"created_at"`

	// External identifier of the message. Front won't import two messages with the same external ID.
	ExternalId string `json:"external_id"`
	Metadata   struct {
		// Determines if message is archived after import.
		IsArchived *bool `json:"is_archived,omitempty"`

		// Determines if message is received (inbound) or sent (outbound) by you.
		IsInbound bool `json:"is_inbound"`

		// Determines if rules should be skipped. `true` by default.
		ShouldSkipRules *bool `json:"should_skip_rules,omitempty"`

		// Reference which will be used to thread messages. If  omitted, Front threads by sender instead
		ThreadRef *string `json:"thread_ref,omitempty"`
	} `json:"metadata"`

	// Data of the sender
	Sender struct {
		// ID of the teammate who is the author of the message. Ignored if the message is inbound.
		AuthorId *string `json:"author_id,omitempty"`

		// Handle of the sender. It can be any string used to uniquely identify the sender
		Handle string `json:"handle"`

		// Name of the sender
		Name *string `json:"name,omitempty"`
	} `json:"sender"`

	// Subject of the message
	Subject *string `json:"subject,omitempty"`

	// List of tag names to add to the conversation
	Tags *[]string `json:"tags,omitempty"`
	To   []string  `json:"to"`

	// Type of the message to import. Default is `email`.
	Type *ImportMessageType `json:"type,omitempty"`
}

// Format of the message body. Can be `markdown` (default) or `html`, and can only be specified for `email` type.
type ImportMessageBodyFormat string

// Type of the message to import. Default is `email`.
type ImportMessageType string

// InboxIds defines model for InboxIds.
type InboxIds struct {
	InboxIds []ResourceID `json:"inbox_ids"`
}

// InboxResponse defines model for InboxResponse.
type InboxResponse struct {
	// Unique identifier for the inbox
	Id *string `json:"id,omitempty"`

	// Whether or not the inbox is individual
	IsPrivate *bool `json:"is_private,omitempty"`

	// Name of the inbox
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to inbox channels
			Channels *string `json:"channels,omitempty"`

			// Link to inbox conversations
			Conversations *string `json:"conversations,omitempty"`

			// Link to inbox owner
			Owner *string `json:"owner,omitempty"`

			// Link to inbox teammates
			Teammates *string `json:"teammates,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// A link used to connect a Front conversation to an external resource.
type LinkResponse struct {
	// Underlying identifying external URL of the link
	ExternalUrl *string `json:"external_url,omitempty"`

	// Unique identifier of the link
	Id *string `json:"id,omitempty"`

	// Display name of the link
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Type of the link. Typically associated with the underlying link provider (if known)
	Type *string `json:"type,omitempty"`
}

// MessageResponse defines model for MessageResponse.
type MessageResponse struct {
	// List of files attached to the message
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// A teammate is a user in Front.
	Author *TeammateResponse `json:"author,omitempty"`

	// Preview of the message body
	Blurb *string `json:"blurb,omitempty"`

	// Body of the message
	Body *string `json:"body,omitempty"`

	// Date at which the message as been sent or received
	CreatedAt *int `json:"created_at,omitempty"`

	// If the message is a draft, describes the draft mode. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).
	DraftMode *MessageResponseDraftMode `json:"draft_mode"`

	// Type of the error when the draft failed to be sent
	ErrorType *string `json:"error_type,omitempty"`

	// Unique identifier of the message
	Id *string `json:"id,omitempty"`

	// Whether or not the message has been received or sent
	IsInbound *bool `json:"is_inbound,omitempty"`

	// Optional metadata about the message
	Metadata *struct {
		// For `truly-call` messages only. Length of the call in seconds.
		Duration *int `json:"duration,omitempty"`

		// For `tweet` or 'custom' (partner channel token authenticated) messages only. Unique message identifier in the underlying provider (Twitter or Partner). For custom messages, only present for partner channel token authenticated requests.
		ExternalId *string `json:"external_id,omitempty"`

		// For `truly-call` messages only. Whether or not the call have been answered.
		HaveBeenAnswered *bool `json:"have_been_answered,omitempty"`

		// For `tweet` messages only. Whether or not the tweet have been favorited.
		HaveBeenFavorited *bool `json:"have_been_favorited,omitempty"`

		// For `tweet` messages only. Whether or not the tweet have been retweeted.
		HaveBeenRetweeted *bool `json:"have_been_retweeted,omitempty"`

		// For `custom` messages only. Custom object holding internal information.
		Headers *map[string]interface{} `json:"headers,omitempty"`

		// For `intercom` messages only. URL of the Intercom conversation the message is comming from.
		IntercomUrl *string `json:"intercom_url,omitempty"`

		// For `tweet` messages only. Whether or not the tweet is a retweet.
		IsRetweet *bool `json:"is_retweet,omitempty"`

		// For `custom` messages only. Custom reference which is used to thread messages.
		ThreadRef *string `json:"thread_ref,omitempty"`

		// For `tweet` messages only. URL of the tweet.
		TwitterUrl *string `json:"twitter_url,omitempty"`
	} `json:"metadata,omitempty"`
	Recipients    *[]RecipientResponse `json:"recipients,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to message converation
			Conversation *string `json:"conversation,omitempty"`

			// Link to message this message replied to
			MessageRepliedTo *string `json:"message_replied_to,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Subject of the message
	Subject *string `json:"subject,omitempty"`

	// Text version of the body for email messages
	Text *string `json:"text,omitempty"`

	// Type of the message
	Type *MessageResponseType `json:"type,omitempty"`

	// The current version of the message in Front
	Version *string `json:"version,omitempty"`
}

// If the message is a draft, describes the draft mode. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).
type MessageResponseDraftMode string

// Type of the message
type MessageResponseType string

// MessageTemplateFolderResponse defines model for MessageTemplateFolderResponse.
type MessageTemplateFolderResponse struct {
	// Unique identifier of the message template folder
	Id *string `json:"id,omitempty"`

	// Name of the message template folder
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to resource's owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// MessageTemplateResponse defines model for MessageTemplateResponse.
type MessageTemplateResponse struct {
	// List of files attached to the response
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// Body of the response
	Body *string `json:"body,omitempty"`

	// Unique identifier of the response
	Id       *string   `json:"id,omitempty"`
	InboxIds *[]string `json:"inbox_ids,omitempty"`

	// Whether or not the template is available in all inboxes.
	IsAvailableForAllInboxes *bool `json:"is_available_for_all_inboxes,omitempty"`

	// Name of the response
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to resource's owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Subject of the response
	Subject *string `json:"subject,omitempty"`
}

// OutboundMessage defines model for OutboundMessage.
type OutboundMessage struct {
	// Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb).
	Attachments *[]string `json:"attachments,omitempty"`

	// ID of the teammate on behalf of whom the answer is sent
	AuthorId *string   `json:"author_id,omitempty"`
	Bcc      *[]string `json:"bcc,omitempty"`

	// Body of the message
	Body    string    `json:"body"`
	Cc      *[]string `json:"cc,omitempty"`
	Options *struct {
		// Archive the conversation right when sending the message
		Archive *bool     `json:"archive,omitempty"`
		TagIds  *[]string `json:"tag_ids,omitempty"`
	} `json:"options,omitempty"`

	// Name used for the sender info of the message
	SenderName *string `json:"sender_name,omitempty"`

	// Subject of the message for email message
	Subject *string `json:"subject,omitempty"`

	// Text version of the body for email messages
	Text *string  `json:"text,omitempty"`
	To   []string `json:"to"`
}

// OutboundReplyMessage defines model for OutboundReplyMessage.
type OutboundReplyMessage struct {
	// Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb).
	Attachments *[]string `json:"attachments,omitempty"`

	// ID of the teammate on behalf of whom the answer is sent
	AuthorId *string   `json:"author_id,omitempty"`
	Bcc      *[]string `json:"bcc,omitempty"`

	// Body of the message
	Body string    `json:"body"`
	Cc   *[]string `json:"cc,omitempty"`

	// Channel ID the message is sent from
	ChannelId *string `json:"channel_id,omitempty"`
	Options   *struct {
		// Archive the conversation right when sending the message. `true` by default
		Archive *bool     `json:"archive,omitempty"`
		TagIds  *[]string `json:"tag_ids,omitempty"`
	} `json:"options,omitempty"`

	// Name used for the sender info of the message
	SenderName *string `json:"sender_name,omitempty"`

	// Subject of the message for email message
	Subject *string `json:"subject,omitempty"`

	// Text version of the body for email messages
	Text *string   `json:"text,omitempty"`
	To   *[]string `json:"to,omitempty"`
}

// RecipientResponse defines model for RecipientResponse.
type RecipientResponse struct {
	// Handle of the contact. Can be any string used to uniquely identify the contact
	Handle        *string `json:"handle,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to recipient contact
			Contact *string `json:"contact,omitempty"`
		} `json:"related,omitempty"`
	} `json:"resource_links,omitempty"`

	// Role of the recipient
	Role *RecipientResponseRole `json:"role,omitempty"`
}

// Role of the recipient
type RecipientResponseRole string

// Reminder defines model for Reminder.
type Reminder struct {
	// Timestamp at which the conversation reminder has been created
	CreatedAt     *int `json:"created_at,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to conversation owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`
	} `json:"resource_links,omitempty"`

	// Timestamp that the conversation reminder has been scheduled for
	ScheduledAt *int `json:"scheduled_at,omitempty"`

	// Timestamp at which the conversation reminder has been updated
	UpdatedAt *int `json:"updated_at,omitempty"`
}

// ReplyDraft defines model for ReplyDraft.
type ReplyDraft struct {
	// Embedded struct due to allOf(#/components/schemas/CreateDraft)
	CreateDraft `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID of the channel from which the draft will be sent
	ChannelId *string `json:"channel_id,omitempty"`
}

// ResourceID defines model for ResourceID.
type ResourceID string

// RoleResponse defines model for RoleResponse.
type RoleResponse struct {
	// Unique identifier of the role
	Id *string `json:"id,omitempty"`

	// Name of the role
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to role owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`
	} `json:"resource_links,omitempty"`
}

// RuleResponse defines model for RuleResponse.
type RuleResponse struct {
	// List of the rule's actions description
	Actions *[]string `json:"actions,omitempty"`

	// Unique identifier of the rule
	Id *string `json:"id,omitempty"`

	// Whether or not the rule is individual
	IsPrivate *bool `json:"is_private,omitempty"`

	// Name of the rule
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to rule owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ShiftInterval defines model for ShiftInterval.
type ShiftInterval struct {
	// End of shift
	End string `json:"end"`

	// Start of shift
	Start string `json:"start"`
}

// ShiftIntervals defines model for ShiftIntervals.
type ShiftIntervals struct {
	Fri *ShiftInterval `json:"fri,omitempty"`
	Mon *ShiftInterval `json:"mon,omitempty"`
	Sat *ShiftInterval `json:"sat,omitempty"`
	Sun *ShiftInterval `json:"sun,omitempty"`
	Thu *ShiftInterval `json:"thu,omitempty"`
	Tue *ShiftInterval `json:"tue,omitempty"`
	Wed *ShiftInterval `json:"wed,omitempty"`
}

// ShiftResponse defines model for ShiftResponse.
type ShiftResponse struct {
	// Color of the shift
	Color     *ShiftResponseColor `json:"color,omitempty"`
	CreatedAt *int                `json:"created_at,omitempty"`

	// Unique identifier of the shift
	Id *string `json:"id,omitempty"`

	// Name of the shift
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to shift owner
			Owner *string `json:"owner,omitempty"`

			// Link to shift teammates
			Teammates *string `json:"teammates,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
	Times *ShiftIntervals `json:"times,omitempty"`

	// A timezone name as defined in the IANA tz database
	Timezone  *string `json:"timezone,omitempty"`
	UpdatedAt *int    `json:"updated_at,omitempty"`
}

// Color of the shift
type ShiftResponseColor string

// TagIds defines model for TagIds.
type TagIds struct {
	TagIds []ResourceID `json:"tag_ids"`
}

// A tag is a label that can be used to classify conversations.
type TagResponse struct {
	// Timestamp of tag create creation
	CreatedAt *int `json:"created_at,omitempty"`

	// Highlight color of the tag.
	Highlight *TagResponseHighlight `json:"highlight,omitempty"`

	// Unique identifier of the tag
	Id *string `json:"id,omitempty"`

	// Whether or not the tag is individual
	IsPrivate *bool `json:"is_private,omitempty"`

	// Whether the tag is visible in conversation lists.
	IsVisibleInConversationLists *bool `json:"is_visible_in_conversation_lists,omitempty"`

	// Name of the tag
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to tag children
			Children *string `json:"children,omitempty"`

			// Link to tag conversations
			Conversations *string `json:"conversations,omitempty"`

			// Link to tag owner
			Owner *string `json:"owner,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Timestamp of the last tag update
	UpdatedAt *int `json:"updated_at,omitempty"`
}

// Highlight color of the tag.
type TagResponseHighlight string

// TeamIds defines model for TeamIds.
type TeamIds struct {
	TeamIds []ResourceID `json:"team_ids"`
}

// TeamResponse defines model for TeamResponse.
type TeamResponse struct {
	// Unique identifier of the team
	Id *string `json:"id,omitempty"`

	// List of the inboxes in the team
	Inboxes *[]InboxResponse `json:"inboxes,omitempty"`

	// List of the teammates that have access to the team
	Members *[]TeammateResponse `json:"members,omitempty"`

	// Name of the team
	Name          *string `json:"name,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// TeammateIds defines model for TeammateIds.
type TeammateIds struct {
	TeammateIds []ResourceID `json:"teammate_ids"`
}

// A teammate is a user in Front.
type TeammateResponse struct {
	// Email address of the teammate
	Email *string `json:"email,omitempty"`

	// First name of the teammate
	FirstName *string `json:"first_name,omitempty"`

	// Unique identifier of the teammate
	Id *string `json:"id,omitempty"`

	// Whether or not the teammate is an admin in your company
	IsAdmin *bool `json:"is_admin,omitempty"`

	// Whether or not the teammate is available
	IsAvailable *bool `json:"is_available,omitempty"`

	// Whether or not the teammate account has been blocked
	IsBlocked *bool `json:"is_blocked,omitempty"`

	// Last name of the teammate
	LastName      *string `json:"last_name,omitempty"`
	ResourceLinks *struct {
		Related *struct {
			// Link to teammate's conversations
			Conversations *string `json:"conversations,omitempty"`

			// Link to teammate's inboxes
			Inboxes *string `json:"inboxes,omitempty"`
		} `json:"related,omitempty"`

		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`

	// Username of the teammate (used for "@" mentions)
	Username *string `json:"username,omitempty"`
}

// UpdateChannel defines model for UpdateChannel.
type UpdateChannel struct {
	// Name of the channel
	Name *string `json:"name,omitempty"`

	// Settings to replace.
	// For custom channels, all settings may be replaced.
	// For all other channels, only `undo_send_time` and `all_teammates_can_reply` may be replaced.
	Settings *struct {
		// Whether teammates without inbox access can reply on this channel. Only allowed for shared channels.
		AllTeammatesCanReply *bool `json:"all_teammates_can_reply,omitempty"`

		// The time (measured in seconds) that users have to undo a send operation in the channel.
		UndoSendTime *UpdateChannelSettingsUndoSendTime `json:"undo_send_time,omitempty"`
	} `json:"settings,omitempty"`
}

// The time (measured in seconds) that users have to undo a send operation in the channel.
type UpdateChannelSettingsUndoSendTime int

// UpdateConversation defines model for UpdateConversation.
type UpdateConversation struct {
	// ID of the teammate to assign the conversation to. Set it to null to unassign.
	AssigneeId *string `json:"assignee_id,omitempty"`

	// ID of the inbox to move the conversation to.
	InboxId *string `json:"inbox_id,omitempty"`

	// New status of the conversation
	Status *UpdateConversationStatus `json:"status,omitempty"`

	// List of all the tag IDs replacing the old conversation tags
	TagIds *[]ResourceID `json:"tag_ids,omitempty"`
}

// New status of the conversation
type UpdateConversationStatus string

// UpdateConversationAssignee defines model for UpdateConversationAssignee.
type UpdateConversationAssignee struct {
	// ID of the teammate to assign the conversation to. Set it to null to unassign.
	AssigneeId string `json:"assignee_id"`
}

// UpdateConversationReminders defines model for UpdateConversationReminders.
type UpdateConversationReminders struct {
	// Timestamp to schedule the reminder for. Set to null to cancel.
	ScheduledAt string `json:"scheduled_at"`

	// ID of the teammate to create a reminder for. For a private conversation, specify the id of the teammate that owns the conversation. For a shared conversation, use the id of any teammate that has access to the conversation's shared inbox.
	TeammateId string `json:"teammate_id"`
}

// UpdateCustomField defines model for UpdateCustomField.
type UpdateCustomField struct {
	// Description of the custom field
	Description *string `json:"description,omitempty"`

	// Name of the custom field
	Name *string `json:"name,omitempty"`
}

// UpdateLink defines model for UpdateLink.
type UpdateLink struct {
	// Name of the link
	Name *string `json:"name,omitempty"`
}

// UpdateMessageTemplate defines model for UpdateMessageTemplate.
type UpdateMessageTemplate struct {
	// Body of the message template
	Body *string `json:"body,omitempty"`

	// ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null.
	FolderId *string   `json:"folder_id,omitempty"`
	InboxIds *[]string `json:"inbox_ids,omitempty"`

	// Name of the message template
	Name *string `json:"name,omitempty"`

	// Subject of the message template
	Subject *string `json:"subject,omitempty"`
}

// A message template folder that is used to store message templates or other folders.
type UpdateMessageTemplateFolder struct {
	// Name of the message template folder
	Name *string `json:"name,omitempty"`

	// ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null.
	ParentFolderId *string `json:"parent_folder_id,omitempty"`
}

// UpdateShift defines model for UpdateShift.
type UpdateShift struct {
	// Color of the shift
	Color *UpdateShiftColor `json:"color,omitempty"`

	// Name of the shift
	Name *string `json:"name,omitempty"`

	// List of all the teammate ids who will be part of this shift.
	TeammateIds *[]ResourceID   `json:"teammate_ids,omitempty"`
	Times       *ShiftIntervals `json:"times,omitempty"`

	// A timezone name as defined in the IANA tz database
	Timezone *string `json:"timezone,omitempty"`
}

// Color of the shift
type UpdateShiftColor string

// UpdateTag defines model for UpdateTag.
type UpdateTag struct {
	// Highlight color of the tag.
	Highlight *UpdateTagHighlight `json:"highlight,omitempty"`

	// Whether the tag is visible in conversation lists.
	IsVisibleInConversationLists *bool `json:"is_visible_in_conversation_lists,omitempty"`

	// Name of the tag
	Name *string `json:"name,omitempty"`

	// ID of the parent of this tag. Set to `null` to remove  the parent tag.
	ParentTagId *string `json:"parent_tag_id,omitempty"`
}

// Highlight color of the tag.
type UpdateTagHighlight string

// UpdateTeammate defines model for UpdateTeammate.
type UpdateTeammate struct {
	// New first name
	FirstName *string `json:"first_name,omitempty"`

	// New availability status
	IsAvailable *bool `json:"is_available,omitempty"`

	// New last name
	LastName *string `json:"last_name,omitempty"`

	// New username. It must be unique and can only contains lowercase letters, numbers and underscores.
	Username *string `json:"username,omitempty"`
}

// ActivityQuery defines model for activityQuery.
type ActivityQuery string

// AnalyticsEnd defines model for analyticsEnd.
type AnalyticsEnd int

// AnalyticsMetrics defines model for analyticsMetrics.
type AnalyticsMetrics []string

// AnalyticsStart defines model for analyticsStart.
type AnalyticsStart int

// AnalyticsTimezone defines model for analyticsTimezone.
type AnalyticsTimezone string

// CardQuery defines model for cardQuery.
type CardQuery string

// ConversationQuery defines model for conversationQuery.
type ConversationQuery string

// Limit defines model for limit.
type Limit int

// PageToken defines model for pageToken.
type PageToken string

// SortBy defines model for sortBy.
type SortBy string

// SortOrder defines model for sortOrder.
type SortOrder string

// TopicQuery defines model for topicQuery.
type TopicQuery string

// Accepted defines model for accepted.
type Accepted struct {
	Status *string `json:"status,omitempty"`
}

// AcceptedCannedAnswerFolderDeletion defines model for acceptedCannedAnswerFolderDeletion.
type AcceptedCannedAnswerFolderDeletion struct {
	// id of the message template to be deleted
	MessageTemplateFolderId *string `json:"message_template_folder_id,omitempty"`
	Status                  *string `json:"status,omitempty"`
}

// AcceptedMessage defines model for acceptedMessage.
type AcceptedMessage struct {
	// Message unique identifier
	MessageUid *string `json:"message_uid,omitempty"`
	Status     *string `json:"status,omitempty"`
}

// AnalyticsReport defines model for analyticsReport.
type AnalyticsReport AnalyticsResponse

// CannedAnswer defines model for cannedAnswer.
type CannedAnswer MessageTemplateResponse

// CannedAnswerFolder defines model for cannedAnswerFolder.
type CannedAnswerFolder MessageTemplateFolderResponse

// Channel defines model for channel.
type Channel ChannelResponse

// Comment defines model for comment.
type Comment CommentResponse

// ContactNote defines model for contactNote.
type ContactNote ContactNoteResponses

// Conversation defines model for conversation.
type Conversation ConversationResponse

// An event is created everytime something interesting is happening in Front.
type Event EventResponse

// Export defines model for export.
type Export ExportResponse

// Identity defines model for identity.
type Identity IdentityResponse

// Inbox defines model for inbox.
type Inbox InboxResponse

// A link used to connect a Front conversation to an external resource.
type Link LinkResponse

// ListOfAccounts defines model for listOfAccounts.
type ListOfAccounts struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results       *[]AccountResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfCannedAnswerFolders defines model for listOfCannedAnswerFolders.
type ListOfCannedAnswerFolders struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfCannedAnswers defines model for listOfCannedAnswers.
type ListOfCannedAnswers struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfChannels defines model for listOfChannels.
type ListOfChannels struct {
	Results       *[]ChannelResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfComments defines model for listOfComments.
type ListOfComments struct {
	Results       *[]CommentResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfContactGroups defines model for listOfContactGroups.
type ListOfContactGroups struct {
	Results       *[]ContactGroupResponses `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfContactNotes defines model for listOfContactNotes.
type ListOfContactNotes struct {
	Results       *[]ContactNoteResponses `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfContacts defines model for listOfContacts.
type ListOfContacts struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results       *[]ContactResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfConversationSearchResults defines model for listOfConversationSearchResults.
type ListOfConversationSearchResults struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results *[]ConversationResponse `json:"_results,omitempty"`

	// Total number of matching conversations
	Total *int `json:"_total,omitempty"`
}

// ListOfConversations defines model for listOfConversations.
type ListOfConversations struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results       *[]ConversationResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfCustomFields defines model for listOfCustomFields.
type ListOfCustomFields struct {
	Results       *[]CustomFieldResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfEvents defines model for listOfEvents.
type ListOfEvents struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results       *[]EventResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfExports defines model for listOfExports.
type ListOfExports struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results       *[]ExportResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfInboxes defines model for listOfInboxes.
type ListOfInboxes struct {
	Results       *[]InboxResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfLinks defines model for listOfLinks.
type ListOfLinks struct {
	Results       *[]LinkResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfMessages defines model for listOfMessages.
type ListOfMessages struct {
	Pagination *struct {
		// Link to next page of results
		Next *string `json:"next,omitempty"`
	} `json:"_pagination,omitempty"`
	Results       *[]MessageResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfRoles defines model for listOfRoles.
type ListOfRoles struct {
	Results       *[]RoleResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfRules defines model for listOfRules.
type ListOfRules struct {
	Results       *[]RuleResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfShifts defines model for listOfShifts.
type ListOfShifts struct {
	Results       *[]ShiftResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfTags defines model for listOfTags.
type ListOfTags struct {
	Results       *[]TagResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfTeammates defines model for listOfTeammates.
type ListOfTeammates struct {
	Results       *[]TeammateResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// ListOfTeams defines model for listOfTeams.
type ListOfTeams struct {
	Results       *[]TeamResponse `json:"_results,omitempty"`
	ResourceLinks *struct {
		// Link to resource
		Self *string `json:"self,omitempty"`
	} `json:"resource_links,omitempty"`
}

// Message defines model for message.
type Message MessageResponse

// Role defines model for role.
type Role RoleResponse

// Rule defines model for rule.
type Rule RuleResponse

// Shift defines model for shift.
type Shift ShiftResponse

// A tag is a label that can be used to classify conversations.
type Tag TagResponse

// Team defines model for team.
type Team TeamResponse

// A teammate is a user in Front.
type Teammate TeammateResponse

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`

	// Field used to sort the records
	SortBy *SortBy `json:"sort_by,omitempty"`

	// Order by which results should be sorted
	SortOrder *GetAccountsParamsSortOrder `json:"sort_order,omitempty"`
}

// GetAccountsParamsSortOrder defines parameters for GetAccounts.
type GetAccountsParamsSortOrder string

// PostAccountsJSONBody defines parameters for PostAccounts.
type PostAccountsJSONBody Account

// PatchAccountsAccountIdJSONBody defines parameters for PatchAccountsAccountId.
type PatchAccountsAccountIdJSONBody Account

// DeleteAccountsAccountIdContactsJSONBody defines parameters for DeleteAccountsAccountIdContacts.
type DeleteAccountsAccountIdContactsJSONBody ContactIds

// GetAccountsAccountIdContactsParams defines parameters for GetAccountsAccountIdContacts.
type GetAccountsAccountIdContactsParams struct {
	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`
}

// PostAccountsAccountIdContactsJSONBody defines parameters for PostAccountsAccountIdContacts.
type PostAccountsAccountIdContactsJSONBody ContactIds

// GetAnalyticsParams defines parameters for GetAnalytics.
type GetAnalyticsParams struct {
	// List of inboxes to include
	InboxIds *InboxIds `json:"inbox_ids,omitempty"`

	// List of tags to include
	TagIds *TagIds `json:"tag_ids,omitempty"`

	// List of teammates to include
	TeammateIds *TeammateIds `json:"teammate_ids,omitempty"`

	// Timestamp from which analytics will start
	Start AnalyticsStart `json:"start"`

	// Timestamp from which analytics will end
	End AnalyticsEnd `json:"end"`

	// [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use UTC.
	Timezone *AnalyticsTimezone `json:"timezone,omitempty"`

	// Metrics to include
	Metrics AnalyticsMetrics `json:"metrics"`
}

// CreateAnalyticsExportJSONBody defines parameters for CreateAnalyticsExport.
type CreateAnalyticsExportJSONBody AnalyticsExportRequest2

// CreateAnalyticsReportJSONBody defines parameters for CreateAnalyticsReport.
type CreateAnalyticsReportJSONBody AnalyticsReportRequest2

// PatchChannelsChannelIdJSONBody defines parameters for PatchChannelsChannelId.
type PatchChannelsChannelIdJSONBody UpdateChannel

// PostChannelsChannelIdDraftsJSONBody defines parameters for PostChannelsChannelIdDrafts.
type PostChannelsChannelIdDraftsJSONBody CreateDraft

// PostChannelsChannelIdIncomingMessagesJSONBody defines parameters for PostChannelsChannelIdIncomingMessages.
type PostChannelsChannelIdIncomingMessagesJSONBody CustomMessage

// PostChannelsChannelIdMessagesJSONBody defines parameters for PostChannelsChannelIdMessages.
type PostChannelsChannelIdMessagesJSONBody OutboundMessage

// PostContactGroupsJSONBody defines parameters for PostContactGroups.
type PostContactGroupsJSONBody CreateContactGroup

// GetContactGroupsContactGroupIdContactsParams defines parameters for GetContactGroupsContactGroupIdContacts.
type GetContactGroupsContactGroupIdContactsParams struct {
	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`
}

// PostContactGroupsContactGroupIdContactsJSONBody defines parameters for PostContactGroupsContactGroupIdContacts.
type PostContactGroupsContactGroupIdContactsJSONBody AddContactsToGroup

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Search query object with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places.
	Q *CardQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`

	// Field used to sort the records
	SortBy *SortBy `json:"sort_by,omitempty"`

	// Order by which results should be sorted
	SortOrder *GetContactsParamsSortOrder `json:"sort_order,omitempty"`
}

// GetContactsParamsSortOrder defines parameters for GetContacts.
type GetContactsParamsSortOrder string

// PostContactsJSONBody defines parameters for PostContacts.
type PostContactsJSONBody CreateContact

// PatchContactsContactIdJSONBody defines parameters for PatchContactsContactId.
type PatchContactsContactIdJSONBody Contact

// GetContactsContactIdConversationsParams defines parameters for GetContactsContactIdConversations.
type GetContactsContactIdConversationsParams struct {
	// Search query object with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
	Q *ConversationQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// DeleteContactsContactIdHandlesJSONBody defines parameters for DeleteContactsContactIdHandles.
type DeleteContactsContactIdHandlesJSONBody DeleteContactHandle

// PostContactsContactIdHandlesJSONBody defines parameters for PostContactsContactIdHandles.
type PostContactsContactIdHandlesJSONBody ContactHandle

// PostContactsContactIdNotesJSONBody defines parameters for PostContactsContactIdNotes.
type PostContactsContactIdNotesJSONBody CreateContactNote

// ListConversationsParams defines parameters for ListConversations.
type ListConversationsParams struct {
	// Search query object with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
	Q *ConversationQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// SearchConversationsParams defines parameters for SearchConversations.
type SearchConversationsParams struct {
	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// PatchConversationsConversationIdJSONBody defines parameters for PatchConversationsConversationId.
type PatchConversationsConversationIdJSONBody UpdateConversation

// PutConversationsConversationIdAssigneeJSONBody defines parameters for PutConversationsConversationIdAssignee.
type PutConversationsConversationIdAssigneeJSONBody UpdateConversationAssignee

// PostConversationsConversationIdCommentsJSONBody defines parameters for PostConversationsConversationIdComments.
type PostConversationsConversationIdCommentsJSONBody CreateComment

// PostConversationsConversationIdDraftsJSONBody defines parameters for PostConversationsConversationIdDrafts.
type PostConversationsConversationIdDraftsJSONBody ReplyDraft

// GetConversationsConversationIdEventsParams defines parameters for GetConversationsConversationIdEvents.
type GetConversationsConversationIdEventsParams struct {
	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// DeleteConversationsConversationIdFollowersJSONBody defines parameters for DeleteConversationsConversationIdFollowers.
type DeleteConversationsConversationIdFollowersJSONBody struct {
	// IDs of the teammate to remove from the followers list.
	TeammateIds []string `json:"teammate_ids"`
}

// PostConversationsConversationIdFollowersJSONBody defines parameters for PostConversationsConversationIdFollowers.
type PostConversationsConversationIdFollowersJSONBody struct {
	// IDs of the teammate to add to the followers list.
	TeammateIds []string `json:"teammate_ids"`
}

// DeleteConversationsConversationIdLinksJSONBody defines parameters for DeleteConversationsConversationIdLinks.
type DeleteConversationsConversationIdLinksJSONBody struct {
	// Link IDs to remove.
	LinkIds []string `json:"link_ids"`
}

// PostConversationsConversationIdLinksJSONBody defines parameters for PostConversationsConversationIdLinks.
type PostConversationsConversationIdLinksJSONBody struct {
	// Link external URLs to add. Creates links if necessary. Either link_ids or link_external_urls must be specified but not both
	LinkExternalUrls *[]string `json:"link_external_urls,omitempty"`

	// Link IDs to add. Either link_ids or link_external_urls must be specified but not both
	LinkIds *[]string `json:"link_ids,omitempty"`
}

// GetConversationsConversationIdMessagesParams defines parameters for GetConversationsConversationIdMessages.
type GetConversationsConversationIdMessagesParams struct {
	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// PostConversationsConversationIdMessagesJSONBody defines parameters for PostConversationsConversationIdMessages.
type PostConversationsConversationIdMessagesJSONBody OutboundReplyMessage

// PatchConversationsConversationIdRemindersJSONBody defines parameters for PatchConversationsConversationIdReminders.
type PatchConversationsConversationIdRemindersJSONBody UpdateConversationReminders

// DeleteConversationsConversationIdTagsJSONBody defines parameters for DeleteConversationsConversationIdTags.
type DeleteConversationsConversationIdTagsJSONBody TagIds

// PostConversationsConversationIdTagsJSONBody defines parameters for PostConversationsConversationIdTags.
type PostConversationsConversationIdTagsJSONBody TagIds

// PatchCustomFieldsCustomFieldIdJSONBody defines parameters for PatchCustomFieldsCustomFieldId.
type PatchCustomFieldsCustomFieldIdJSONBody UpdateCustomField

// DeleteDraftsDraftIdJSONBody defines parameters for DeleteDraftsDraftId.
type DeleteDraftsDraftIdJSONBody DeleteDraft

// PatchDraftsMessageIdJSONBody defines parameters for PatchDraftsMessageId.
type PatchDraftsMessageIdJSONBody EditDraft

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// Search query object with optional properties `before`, `after`, or `types`. `before` and `after` should be a timestamp in seconds with up to 3 decimal places. `types` should be a list of event types.
	Q *ActivityQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// GetExportsParams defines parameters for GetExports.
type GetExportsParams struct {
	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// CreateExportJSONBody defines parameters for CreateExport.
type CreateExportJSONBody ExportQuery

// PostInboxesJSONBody defines parameters for PostInboxes.
type PostInboxesJSONBody CreateInbox

// PostInboxesInboxIdChannelsJSONBody defines parameters for PostInboxesInboxIdChannels.
type PostInboxesInboxIdChannelsJSONBody CreateChannel

// GetInboxesInboxIdConversationsParams defines parameters for GetInboxesInboxIdConversations.
type GetInboxesInboxIdConversationsParams struct {
	// Search query object with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
	Q *ConversationQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// ImportInboxMessageJSONBody defines parameters for ImportInboxMessage.
type ImportInboxMessageJSONBody ImportMessage

// DeleteInboxesInboxIdTeammatesJSONBody defines parameters for DeleteInboxesInboxIdTeammates.
type DeleteInboxesInboxIdTeammatesJSONBody TeammateIds

// PostInboxesInboxIdTeammatesJSONBody defines parameters for PostInboxesInboxIdTeammates.
type PostInboxesInboxIdTeammatesJSONBody TeammateIds

// GetLinksParams defines parameters for GetLinks.
type GetLinksParams struct {
	// Search query object with a property `types`, whose value should be a list of link types (examples - `web`, `jira`, `asana` ).
	Q *TopicQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// PostLinksJSONBody defines parameters for PostLinks.
type PostLinksJSONBody CreateLink

// PatchLinksLinkIdJSONBody defines parameters for PatchLinksLinkId.
type PatchLinksLinkIdJSONBody UpdateLink

// ListLinkConversationsParams defines parameters for ListLinkConversations.
type ListLinkConversationsParams struct {
	// Search query object with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
	Q *ConversationQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// PostMessageTemplateFoldersJSONBody defines parameters for PostMessageTemplateFolders.
type PostMessageTemplateFoldersJSONBody CreateMessageTemplateFolder

// PatchMessageTemplateFoldersMessageTemplateFolderIdJSONBody defines parameters for PatchMessageTemplateFoldersMessageTemplateFolderId.
type PatchMessageTemplateFoldersMessageTemplateFolderIdJSONBody UpdateMessageTemplateFolder

// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONBody defines parameters for PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders.
type PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONBody CreateMessageTemplateFolderAsChild

// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONBody defines parameters for PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates.
type PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONBody CreateMessageTemplateAsChild

// PostMessageTemplatesJSONBody defines parameters for PostMessageTemplates.
type PostMessageTemplatesJSONBody CreateSharedMessageTemplate

// PatchMessageTemplatesMessageTemplateIdJSONBody defines parameters for PatchMessageTemplatesMessageTemplateId.
type PatchMessageTemplatesMessageTemplateIdJSONBody UpdateMessageTemplate

// DeleteShiftShiftIdTeammatesJSONBody defines parameters for DeleteShiftShiftIdTeammates.
type DeleteShiftShiftIdTeammatesJSONBody TeammateIds

// PostShiftShiftIdTeammatesJSONBody defines parameters for PostShiftShiftIdTeammates.
type PostShiftShiftIdTeammatesJSONBody TeammateIds

// PostShiftsJSONBody defines parameters for PostShifts.
type PostShiftsJSONBody CreateShift

// PatchShiftsShiftIdJSONBody defines parameters for PatchShiftsShiftId.
type PatchShiftsShiftIdJSONBody UpdateShift

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody CreateTag

// PatchTagsTagIdJSONBody defines parameters for PatchTagsTagId.
type PatchTagsTagIdJSONBody UpdateTag

// PostTagsTagIdChildrenJSONBody defines parameters for PostTagsTagIdChildren.
type PostTagsTagIdChildrenJSONBody CreateTag

// GetTagsTagIdConversationsParams defines parameters for GetTagsTagIdConversations.
type GetTagsTagIdConversationsParams struct {
	// Search query object with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
	Q *ConversationQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// PatchTeammatesTeammateIdJSONBody defines parameters for PatchTeammatesTeammateId.
type PatchTeammatesTeammateIdJSONBody UpdateTeammate

// PostTeammatesTeammateIdContactGroupsJSONBody defines parameters for PostTeammatesTeammateIdContactGroups.
type PostTeammatesTeammateIdContactGroupsJSONBody CreateContactGroup

// GetTeammatesTeammateIdContactsParams defines parameters for GetTeammatesTeammateIdContacts.
type GetTeammatesTeammateIdContactsParams struct {
	// Search query object with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places.
	Q *CardQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`

	// Field used to sort the records
	SortBy *SortBy `json:"sort_by,omitempty"`

	// Order by which results should be sorted
	SortOrder *GetTeammatesTeammateIdContactsParamsSortOrder `json:"sort_order,omitempty"`
}

// GetTeammatesTeammateIdContactsParamsSortOrder defines parameters for GetTeammatesTeammateIdContacts.
type GetTeammatesTeammateIdContactsParamsSortOrder string

// PostTeammatesTeammateIdContactsJSONBody defines parameters for PostTeammatesTeammateIdContacts.
type PostTeammatesTeammateIdContactsJSONBody CreateContact

// GetTeammatesTeammateIdConversationsParams defines parameters for GetTeammatesTeammateIdConversations.
type GetTeammatesTeammateIdConversationsParams struct {
	// Search query object with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
	Q *ConversationQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`
}

// PostTeammatesTeammateIdMessageTemplateFoldersJSONBody defines parameters for PostTeammatesTeammateIdMessageTemplateFolders.
type PostTeammatesTeammateIdMessageTemplateFoldersJSONBody CreateMessageTemplateFolder

// PostTeammatesTeammateIdMessageTemplatesJSONBody defines parameters for PostTeammatesTeammateIdMessageTemplates.
type PostTeammatesTeammateIdMessageTemplatesJSONBody CreatePrivateMessageTemplate

// PostTeammatesTeammateIdTagsJSONBody defines parameters for PostTeammatesTeammateIdTags.
type PostTeammatesTeammateIdTagsJSONBody CreateTag

// GetTeamsTeamIdAnalyticsParams defines parameters for GetTeamsTeamIdAnalytics.
type GetTeamsTeamIdAnalyticsParams struct {
	// List of inboxes to include
	InboxIds *InboxIds `json:"inbox_ids,omitempty"`

	// List of tags to include
	TagIds *TagIds `json:"tag_ids,omitempty"`

	// List of teammates to include
	TeammateIds *TeammateIds `json:"teammate_ids,omitempty"`

	// Timestamp from which analytics will start
	Start AnalyticsStart `json:"start"`

	// Timestamp from which analytics will end
	End AnalyticsEnd `json:"end"`

	// [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use UTC.
	Timezone *AnalyticsTimezone `json:"timezone,omitempty"`

	// Metrics to include
	Metrics AnalyticsMetrics `json:"metrics"`
}

// PostTeamsTeamIdContactGroupsJSONBody defines parameters for PostTeamsTeamIdContactGroups.
type PostTeamsTeamIdContactGroupsJSONBody CreateContactGroup

// GetTeamsTeamIdContactsParams defines parameters for GetTeamsTeamIdContacts.
type GetTeamsTeamIdContactsParams struct {
	// Search query object with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places.
	Q *CardQuery `json:"q,omitempty"`

	// Max number of results per page
	Limit *Limit `json:"limit,omitempty"`

	// Token to use to request the next page
	PageToken *PageToken `json:"page_token,omitempty"`

	// Field used to sort the records
	SortBy *SortBy `json:"sort_by,omitempty"`

	// Order by which results should be sorted
	SortOrder *GetTeamsTeamIdContactsParamsSortOrder `json:"sort_order,omitempty"`
}

// GetTeamsTeamIdContactsParamsSortOrder defines parameters for GetTeamsTeamIdContacts.
type GetTeamsTeamIdContactsParamsSortOrder string

// PostTeamsTeamIdContactsJSONBody defines parameters for PostTeamsTeamIdContacts.
type PostTeamsTeamIdContactsJSONBody CreateContact

// PostTeamsTeamIdExportsJSONBody defines parameters for PostTeamsTeamIdExports.
type PostTeamsTeamIdExportsJSONBody ExportQuery

// PostTeamsTeamIdInboxesJSONBody defines parameters for PostTeamsTeamIdInboxes.
type PostTeamsTeamIdInboxesJSONBody CreateInbox

// PostTeamsTeamIdMessageTemplateFoldersJSONBody defines parameters for PostTeamsTeamIdMessageTemplateFolders.
type PostTeamsTeamIdMessageTemplateFoldersJSONBody CreateMessageTemplateFolder

// PostTeamsTeamIdMessageTemplatesJSONBody defines parameters for PostTeamsTeamIdMessageTemplates.
type PostTeamsTeamIdMessageTemplatesJSONBody CreateSharedMessageTemplate

// PostTeamsTeamIdShiftsJSONBody defines parameters for PostTeamsTeamIdShifts.
type PostTeamsTeamIdShiftsJSONBody CreateShift

// PostTeamsTeamIdTagsJSONBody defines parameters for PostTeamsTeamIdTags.
type PostTeamsTeamIdTagsJSONBody CreateTag

// DeleteTeamsTeamIdTeammatesJSONBody defines parameters for DeleteTeamsTeamIdTeammates.
type DeleteTeamsTeamIdTeammatesJSONBody TeammateIds

// PostTeamsTeamIdTeammatesJSONBody defines parameters for PostTeamsTeamIdTeammates.
type PostTeamsTeamIdTeammatesJSONBody TeammateIds

// PostAccountsJSONRequestBody defines body for PostAccounts for application/json ContentType.
type PostAccountsJSONRequestBody PostAccountsJSONBody

// PatchAccountsAccountIdJSONRequestBody defines body for PatchAccountsAccountId for application/json ContentType.
type PatchAccountsAccountIdJSONRequestBody PatchAccountsAccountIdJSONBody

// DeleteAccountsAccountIdContactsJSONRequestBody defines body for DeleteAccountsAccountIdContacts for application/json ContentType.
type DeleteAccountsAccountIdContactsJSONRequestBody DeleteAccountsAccountIdContactsJSONBody

// PostAccountsAccountIdContactsJSONRequestBody defines body for PostAccountsAccountIdContacts for application/json ContentType.
type PostAccountsAccountIdContactsJSONRequestBody PostAccountsAccountIdContactsJSONBody

// CreateAnalyticsExportJSONRequestBody defines body for CreateAnalyticsExport for application/json ContentType.
type CreateAnalyticsExportJSONRequestBody CreateAnalyticsExportJSONBody

// CreateAnalyticsReportJSONRequestBody defines body for CreateAnalyticsReport for application/json ContentType.
type CreateAnalyticsReportJSONRequestBody CreateAnalyticsReportJSONBody

// PatchChannelsChannelIdJSONRequestBody defines body for PatchChannelsChannelId for application/json ContentType.
type PatchChannelsChannelIdJSONRequestBody PatchChannelsChannelIdJSONBody

// PostChannelsChannelIdDraftsJSONRequestBody defines body for PostChannelsChannelIdDrafts for application/json ContentType.
type PostChannelsChannelIdDraftsJSONRequestBody PostChannelsChannelIdDraftsJSONBody

// PostChannelsChannelIdIncomingMessagesJSONRequestBody defines body for PostChannelsChannelIdIncomingMessages for application/json ContentType.
type PostChannelsChannelIdIncomingMessagesJSONRequestBody PostChannelsChannelIdIncomingMessagesJSONBody

// PostChannelsChannelIdMessagesJSONRequestBody defines body for PostChannelsChannelIdMessages for application/json ContentType.
type PostChannelsChannelIdMessagesJSONRequestBody PostChannelsChannelIdMessagesJSONBody

// PostContactGroupsJSONRequestBody defines body for PostContactGroups for application/json ContentType.
type PostContactGroupsJSONRequestBody PostContactGroupsJSONBody

// PostContactGroupsContactGroupIdContactsJSONRequestBody defines body for PostContactGroupsContactGroupIdContacts for application/json ContentType.
type PostContactGroupsContactGroupIdContactsJSONRequestBody PostContactGroupsContactGroupIdContactsJSONBody

// PostContactsJSONRequestBody defines body for PostContacts for application/json ContentType.
type PostContactsJSONRequestBody PostContactsJSONBody

// PatchContactsContactIdJSONRequestBody defines body for PatchContactsContactId for application/json ContentType.
type PatchContactsContactIdJSONRequestBody PatchContactsContactIdJSONBody

// DeleteContactsContactIdHandlesJSONRequestBody defines body for DeleteContactsContactIdHandles for application/json ContentType.
type DeleteContactsContactIdHandlesJSONRequestBody DeleteContactsContactIdHandlesJSONBody

// PostContactsContactIdHandlesJSONRequestBody defines body for PostContactsContactIdHandles for application/json ContentType.
type PostContactsContactIdHandlesJSONRequestBody PostContactsContactIdHandlesJSONBody

// PostContactsContactIdNotesJSONRequestBody defines body for PostContactsContactIdNotes for application/json ContentType.
type PostContactsContactIdNotesJSONRequestBody PostContactsContactIdNotesJSONBody

// PatchConversationsConversationIdJSONRequestBody defines body for PatchConversationsConversationId for application/json ContentType.
type PatchConversationsConversationIdJSONRequestBody PatchConversationsConversationIdJSONBody

// PutConversationsConversationIdAssigneeJSONRequestBody defines body for PutConversationsConversationIdAssignee for application/json ContentType.
type PutConversationsConversationIdAssigneeJSONRequestBody PutConversationsConversationIdAssigneeJSONBody

// PostConversationsConversationIdCommentsJSONRequestBody defines body for PostConversationsConversationIdComments for application/json ContentType.
type PostConversationsConversationIdCommentsJSONRequestBody PostConversationsConversationIdCommentsJSONBody

// PostConversationsConversationIdDraftsJSONRequestBody defines body for PostConversationsConversationIdDrafts for application/json ContentType.
type PostConversationsConversationIdDraftsJSONRequestBody PostConversationsConversationIdDraftsJSONBody

// DeleteConversationsConversationIdFollowersJSONRequestBody defines body for DeleteConversationsConversationIdFollowers for application/json ContentType.
type DeleteConversationsConversationIdFollowersJSONRequestBody DeleteConversationsConversationIdFollowersJSONBody

// PostConversationsConversationIdFollowersJSONRequestBody defines body for PostConversationsConversationIdFollowers for application/json ContentType.
type PostConversationsConversationIdFollowersJSONRequestBody PostConversationsConversationIdFollowersJSONBody

// DeleteConversationsConversationIdLinksJSONRequestBody defines body for DeleteConversationsConversationIdLinks for application/json ContentType.
type DeleteConversationsConversationIdLinksJSONRequestBody DeleteConversationsConversationIdLinksJSONBody

// PostConversationsConversationIdLinksJSONRequestBody defines body for PostConversationsConversationIdLinks for application/json ContentType.
type PostConversationsConversationIdLinksJSONRequestBody PostConversationsConversationIdLinksJSONBody

// PostConversationsConversationIdMessagesJSONRequestBody defines body for PostConversationsConversationIdMessages for application/json ContentType.
type PostConversationsConversationIdMessagesJSONRequestBody PostConversationsConversationIdMessagesJSONBody

// PatchConversationsConversationIdRemindersJSONRequestBody defines body for PatchConversationsConversationIdReminders for application/json ContentType.
type PatchConversationsConversationIdRemindersJSONRequestBody PatchConversationsConversationIdRemindersJSONBody

// DeleteConversationsConversationIdTagsJSONRequestBody defines body for DeleteConversationsConversationIdTags for application/json ContentType.
type DeleteConversationsConversationIdTagsJSONRequestBody DeleteConversationsConversationIdTagsJSONBody

// PostConversationsConversationIdTagsJSONRequestBody defines body for PostConversationsConversationIdTags for application/json ContentType.
type PostConversationsConversationIdTagsJSONRequestBody PostConversationsConversationIdTagsJSONBody

// PatchCustomFieldsCustomFieldIdJSONRequestBody defines body for PatchCustomFieldsCustomFieldId for application/json ContentType.
type PatchCustomFieldsCustomFieldIdJSONRequestBody PatchCustomFieldsCustomFieldIdJSONBody

// DeleteDraftsDraftIdJSONRequestBody defines body for DeleteDraftsDraftId for application/json ContentType.
type DeleteDraftsDraftIdJSONRequestBody DeleteDraftsDraftIdJSONBody

// PatchDraftsMessageIdJSONRequestBody defines body for PatchDraftsMessageId for application/json ContentType.
type PatchDraftsMessageIdJSONRequestBody PatchDraftsMessageIdJSONBody

// CreateExportJSONRequestBody defines body for CreateExport for application/json ContentType.
type CreateExportJSONRequestBody CreateExportJSONBody

// PostInboxesJSONRequestBody defines body for PostInboxes for application/json ContentType.
type PostInboxesJSONRequestBody PostInboxesJSONBody

// PostInboxesInboxIdChannelsJSONRequestBody defines body for PostInboxesInboxIdChannels for application/json ContentType.
type PostInboxesInboxIdChannelsJSONRequestBody PostInboxesInboxIdChannelsJSONBody

// ImportInboxMessageJSONRequestBody defines body for ImportInboxMessage for application/json ContentType.
type ImportInboxMessageJSONRequestBody ImportInboxMessageJSONBody

// DeleteInboxesInboxIdTeammatesJSONRequestBody defines body for DeleteInboxesInboxIdTeammates for application/json ContentType.
type DeleteInboxesInboxIdTeammatesJSONRequestBody DeleteInboxesInboxIdTeammatesJSONBody

// PostInboxesInboxIdTeammatesJSONRequestBody defines body for PostInboxesInboxIdTeammates for application/json ContentType.
type PostInboxesInboxIdTeammatesJSONRequestBody PostInboxesInboxIdTeammatesJSONBody

// PostLinksJSONRequestBody defines body for PostLinks for application/json ContentType.
type PostLinksJSONRequestBody PostLinksJSONBody

// PatchLinksLinkIdJSONRequestBody defines body for PatchLinksLinkId for application/json ContentType.
type PatchLinksLinkIdJSONRequestBody PatchLinksLinkIdJSONBody

// PostMessageTemplateFoldersJSONRequestBody defines body for PostMessageTemplateFolders for application/json ContentType.
type PostMessageTemplateFoldersJSONRequestBody PostMessageTemplateFoldersJSONBody

// PatchMessageTemplateFoldersMessageTemplateFolderIdJSONRequestBody defines body for PatchMessageTemplateFoldersMessageTemplateFolderId for application/json ContentType.
type PatchMessageTemplateFoldersMessageTemplateFolderIdJSONRequestBody PatchMessageTemplateFoldersMessageTemplateFolderIdJSONBody

// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONRequestBody defines body for PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders for application/json ContentType.
type PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONRequestBody PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONBody

// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONRequestBody defines body for PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates for application/json ContentType.
type PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONRequestBody PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONBody

// PostMessageTemplatesJSONRequestBody defines body for PostMessageTemplates for application/json ContentType.
type PostMessageTemplatesJSONRequestBody PostMessageTemplatesJSONBody

// PatchMessageTemplatesMessageTemplateIdJSONRequestBody defines body for PatchMessageTemplatesMessageTemplateId for application/json ContentType.
type PatchMessageTemplatesMessageTemplateIdJSONRequestBody PatchMessageTemplatesMessageTemplateIdJSONBody

// DeleteShiftShiftIdTeammatesJSONRequestBody defines body for DeleteShiftShiftIdTeammates for application/json ContentType.
type DeleteShiftShiftIdTeammatesJSONRequestBody DeleteShiftShiftIdTeammatesJSONBody

// PostShiftShiftIdTeammatesJSONRequestBody defines body for PostShiftShiftIdTeammates for application/json ContentType.
type PostShiftShiftIdTeammatesJSONRequestBody PostShiftShiftIdTeammatesJSONBody

// PostShiftsJSONRequestBody defines body for PostShifts for application/json ContentType.
type PostShiftsJSONRequestBody PostShiftsJSONBody

// PatchShiftsShiftIdJSONRequestBody defines body for PatchShiftsShiftId for application/json ContentType.
type PatchShiftsShiftIdJSONRequestBody PatchShiftsShiftIdJSONBody

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody PostTagsJSONBody

// PatchTagsTagIdJSONRequestBody defines body for PatchTagsTagId for application/json ContentType.
type PatchTagsTagIdJSONRequestBody PatchTagsTagIdJSONBody

// PostTagsTagIdChildrenJSONRequestBody defines body for PostTagsTagIdChildren for application/json ContentType.
type PostTagsTagIdChildrenJSONRequestBody PostTagsTagIdChildrenJSONBody

// PatchTeammatesTeammateIdJSONRequestBody defines body for PatchTeammatesTeammateId for application/json ContentType.
type PatchTeammatesTeammateIdJSONRequestBody PatchTeammatesTeammateIdJSONBody

// PostTeammatesTeammateIdContactGroupsJSONRequestBody defines body for PostTeammatesTeammateIdContactGroups for application/json ContentType.
type PostTeammatesTeammateIdContactGroupsJSONRequestBody PostTeammatesTeammateIdContactGroupsJSONBody

// PostTeammatesTeammateIdContactsJSONRequestBody defines body for PostTeammatesTeammateIdContacts for application/json ContentType.
type PostTeammatesTeammateIdContactsJSONRequestBody PostTeammatesTeammateIdContactsJSONBody

// PostTeammatesTeammateIdMessageTemplateFoldersJSONRequestBody defines body for PostTeammatesTeammateIdMessageTemplateFolders for application/json ContentType.
type PostTeammatesTeammateIdMessageTemplateFoldersJSONRequestBody PostTeammatesTeammateIdMessageTemplateFoldersJSONBody

// PostTeammatesTeammateIdMessageTemplatesJSONRequestBody defines body for PostTeammatesTeammateIdMessageTemplates for application/json ContentType.
type PostTeammatesTeammateIdMessageTemplatesJSONRequestBody PostTeammatesTeammateIdMessageTemplatesJSONBody

// PostTeammatesTeammateIdTagsJSONRequestBody defines body for PostTeammatesTeammateIdTags for application/json ContentType.
type PostTeammatesTeammateIdTagsJSONRequestBody PostTeammatesTeammateIdTagsJSONBody

// PostTeamsTeamIdContactGroupsJSONRequestBody defines body for PostTeamsTeamIdContactGroups for application/json ContentType.
type PostTeamsTeamIdContactGroupsJSONRequestBody PostTeamsTeamIdContactGroupsJSONBody

// PostTeamsTeamIdContactsJSONRequestBody defines body for PostTeamsTeamIdContacts for application/json ContentType.
type PostTeamsTeamIdContactsJSONRequestBody PostTeamsTeamIdContactsJSONBody

// PostTeamsTeamIdExportsJSONRequestBody defines body for PostTeamsTeamIdExports for application/json ContentType.
type PostTeamsTeamIdExportsJSONRequestBody PostTeamsTeamIdExportsJSONBody

// PostTeamsTeamIdInboxesJSONRequestBody defines body for PostTeamsTeamIdInboxes for application/json ContentType.
type PostTeamsTeamIdInboxesJSONRequestBody PostTeamsTeamIdInboxesJSONBody

// PostTeamsTeamIdMessageTemplateFoldersJSONRequestBody defines body for PostTeamsTeamIdMessageTemplateFolders for application/json ContentType.
type PostTeamsTeamIdMessageTemplateFoldersJSONRequestBody PostTeamsTeamIdMessageTemplateFoldersJSONBody

// PostTeamsTeamIdMessageTemplatesJSONRequestBody defines body for PostTeamsTeamIdMessageTemplates for application/json ContentType.
type PostTeamsTeamIdMessageTemplatesJSONRequestBody PostTeamsTeamIdMessageTemplatesJSONBody

// PostTeamsTeamIdShiftsJSONRequestBody defines body for PostTeamsTeamIdShifts for application/json ContentType.
type PostTeamsTeamIdShiftsJSONRequestBody PostTeamsTeamIdShiftsJSONBody

// PostTeamsTeamIdTagsJSONRequestBody defines body for PostTeamsTeamIdTags for application/json ContentType.
type PostTeamsTeamIdTagsJSONRequestBody PostTeamsTeamIdTagsJSONBody

// DeleteTeamsTeamIdTeammatesJSONRequestBody defines body for DeleteTeamsTeamIdTeammates for application/json ContentType.
type DeleteTeamsTeamIdTeammatesJSONRequestBody DeleteTeamsTeamIdTeammatesJSONBody

// PostTeamsTeamIdTeammatesJSONRequestBody defines body for PostTeamsTeamIdTeammates for application/json ContentType.
type PostTeamsTeamIdTeammatesJSONRequestBody PostTeamsTeamIdTeammatesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccounts request
	GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccounts request with any body
	PostAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccounts(ctx context.Context, body PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountsAccountId request
	DeleteAccountsAccountId(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsAccountId request
	GetAccountsAccountId(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAccountsAccountId request with any body
	PatchAccountsAccountIdWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAccountsAccountId(ctx context.Context, accountId string, body PatchAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountsAccountIdContacts request with any body
	DeleteAccountsAccountIdContactsWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAccountsAccountIdContacts(ctx context.Context, accountId string, body DeleteAccountsAccountIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsAccountIdContacts request
	GetAccountsAccountIdContacts(ctx context.Context, accountId string, params *GetAccountsAccountIdContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsAccountIdContacts request with any body
	PostAccountsAccountIdContactsWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsAccountIdContacts(ctx context.Context, accountId string, body PostAccountsAccountIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnalytics request
	GetAnalytics(ctx context.Context, params *GetAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAnalyticsExport request with any body
	CreateAnalyticsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAnalyticsExport(ctx context.Context, body CreateAnalyticsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnalyticsExport request
	GetAnalyticsExport(ctx context.Context, exportId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAnalyticsReport request with any body
	CreateAnalyticsReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAnalyticsReport(ctx context.Context, body CreateAnalyticsReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnalyticsReport request
	GetAnalyticsReport(ctx context.Context, reportUid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannels request
	GetChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannelsChannelId request
	GetChannelsChannelId(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchChannelsChannelId request with any body
	PatchChannelsChannelIdWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchChannelsChannelId(ctx context.Context, channelId string, body PatchChannelsChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChannelsChannelIdDrafts request with any body
	PostChannelsChannelIdDraftsWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChannelsChannelIdDrafts(ctx context.Context, channelId string, body PostChannelsChannelIdDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChannelsChannelIdIncomingMessages request with any body
	PostChannelsChannelIdIncomingMessagesWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChannelsChannelIdIncomingMessages(ctx context.Context, channelId string, body PostChannelsChannelIdIncomingMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChannelsChannelIdMessages request with any body
	PostChannelsChannelIdMessagesWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChannelsChannelIdMessages(ctx context.Context, channelId string, body PostChannelsChannelIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChannelsChannelIdValidate request
	PostChannelsChannelIdValidate(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommentsCommentId request
	GetCommentsCommentId(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommentsCommentIdMentions request
	GetCommentsCommentIdMentions(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactGroups request
	GetContactGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContactGroups request with any body
	PostContactGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactGroups(ctx context.Context, body PostContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactGroupsContactGroupId request
	DeleteContactGroupsContactGroupId(ctx context.Context, contactGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactGroupsContactGroupIdContacts request
	GetContactGroupsContactGroupIdContacts(ctx context.Context, contactGroupId string, params *GetContactGroupsContactGroupIdContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContactGroupsContactGroupIdContacts request with any body
	PostContactGroupsContactGroupIdContactsWithBody(ctx context.Context, contactGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactGroupsContactGroupIdContacts(ctx context.Context, contactGroupId string, body PostContactGroupsContactGroupIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContacts request
	GetContacts(ctx context.Context, params *GetContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContacts request with any body
	PostContactsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContacts(ctx context.Context, body PostContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListContactCustomFields request
	ListContactCustomFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactsContactId request
	DeleteContactsContactId(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactsContactId request
	GetContactsContactId(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchContactsContactId request with any body
	PatchContactsContactIdWithBody(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchContactsContactId(ctx context.Context, contactId string, body PatchContactsContactIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactsContactIdConversations request
	GetContactsContactIdConversations(ctx context.Context, contactId string, params *GetContactsContactIdConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactsContactIdHandles request with any body
	DeleteContactsContactIdHandlesWithBody(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteContactsContactIdHandles(ctx context.Context, contactId string, body DeleteContactsContactIdHandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContactsContactIdHandles request with any body
	PostContactsContactIdHandlesWithBody(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactsContactIdHandles(ctx context.Context, contactId string, body PostContactsContactIdHandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactsContactIdNotes request
	GetContactsContactIdNotes(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContactsContactIdNotes request with any body
	PostContactsContactIdNotesWithBody(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactsContactIdNotes(ctx context.Context, contactId string, body PostContactsContactIdNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConversations request
	ListConversations(ctx context.Context, params *ListConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchConversations request
	SearchConversations(ctx context.Context, query string, params *SearchConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationById request
	GetConversationById(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConversationsConversationId request with any body
	PatchConversationsConversationIdWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConversationsConversationId(ctx context.Context, conversationId string, body PatchConversationsConversationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConversationsConversationIdAssignee request with any body
	PutConversationsConversationIdAssigneeWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConversationsConversationIdAssignee(ctx context.Context, conversationId string, body PutConversationsConversationIdAssigneeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationsConversationIdComments request
	GetConversationsConversationIdComments(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConversationsConversationIdComments request with any body
	PostConversationsConversationIdCommentsWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConversationsConversationIdComments(ctx context.Context, conversationId string, body PostConversationsConversationIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationsConversationIdDrafts request
	GetConversationsConversationIdDrafts(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConversationsConversationIdDrafts request with any body
	PostConversationsConversationIdDraftsWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConversationsConversationIdDrafts(ctx context.Context, conversationId string, body PostConversationsConversationIdDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationsConversationIdEvents request
	GetConversationsConversationIdEvents(ctx context.Context, conversationId string, params *GetConversationsConversationIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConversationsConversationIdFollowers request with any body
	DeleteConversationsConversationIdFollowersWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteConversationsConversationIdFollowers(ctx context.Context, conversationId string, body DeleteConversationsConversationIdFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationsConversationIdFollowers request
	GetConversationsConversationIdFollowers(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConversationsConversationIdFollowers request with any body
	PostConversationsConversationIdFollowersWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConversationsConversationIdFollowers(ctx context.Context, conversationId string, body PostConversationsConversationIdFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationsConversationIdInboxes request
	GetConversationsConversationIdInboxes(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConversationsConversationIdLinks request with any body
	DeleteConversationsConversationIdLinksWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteConversationsConversationIdLinks(ctx context.Context, conversationId string, body DeleteConversationsConversationIdLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConversationsConversationIdLinks request with any body
	PostConversationsConversationIdLinksWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConversationsConversationIdLinks(ctx context.Context, conversationId string, body PostConversationsConversationIdLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationsConversationIdMessages request
	GetConversationsConversationIdMessages(ctx context.Context, conversationId string, params *GetConversationsConversationIdMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConversationsConversationIdMessages request with any body
	PostConversationsConversationIdMessagesWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConversationsConversationIdMessages(ctx context.Context, conversationId string, body PostConversationsConversationIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConversationsConversationIdReminders request with any body
	PatchConversationsConversationIdRemindersWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConversationsConversationIdReminders(ctx context.Context, conversationId string, body PatchConversationsConversationIdRemindersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConversationsConversationIdTags request with any body
	DeleteConversationsConversationIdTagsWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteConversationsConversationIdTags(ctx context.Context, conversationId string, body DeleteConversationsConversationIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConversationsConversationIdTags request with any body
	PostConversationsConversationIdTagsWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConversationsConversationIdTags(ctx context.Context, conversationId string, body PostConversationsConversationIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFields request
	ListCustomFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCustomFieldsCustomFieldId request with any body
	PatchCustomFieldsCustomFieldIdWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCustomFieldsCustomFieldId(ctx context.Context, customFieldId string, body PatchCustomFieldsCustomFieldIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDownloadAttachmentLinkId request
	GetDownloadAttachmentLinkId(ctx context.Context, attachmentLinkId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDraftsDraftId request with any body
	DeleteDraftsDraftIdWithBody(ctx context.Context, draftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteDraftsDraftId(ctx context.Context, draftId string, body DeleteDraftsDraftIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDraftsMessageId request with any body
	PatchDraftsMessageIdWithBody(ctx context.Context, messageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDraftsMessageId(ctx context.Context, messageId string, body PatchDraftsMessageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventsEventId request
	GetEventsEventId(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExports request
	GetExports(ctx context.Context, params *GetExportsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateExport request with any body
	CreateExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateExport(ctx context.Context, body CreateExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExportsExportId request
	GetExportsExportId(ctx context.Context, exportId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboxes request
	GetInboxes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInboxes request with any body
	PostInboxesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInboxes(ctx context.Context, body PostInboxesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboxesInboxId request
	GetInboxesInboxId(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboxesInboxIdChannels request
	GetInboxesInboxIdChannels(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInboxesInboxIdChannels request with any body
	PostInboxesInboxIdChannelsWithBody(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInboxesInboxIdChannels(ctx context.Context, inboxId string, body PostInboxesInboxIdChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboxesInboxIdConversations request
	GetInboxesInboxIdConversations(ctx context.Context, inboxId string, params *GetInboxesInboxIdConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportInboxMessage request with any body
	ImportInboxMessageWithBody(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportInboxMessage(ctx context.Context, inboxId string, body ImportInboxMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInboxesInboxIdTeammates request with any body
	DeleteInboxesInboxIdTeammatesWithBody(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteInboxesInboxIdTeammates(ctx context.Context, inboxId string, body DeleteInboxesInboxIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboxesInboxIdTeammates request
	GetInboxesInboxIdTeammates(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInboxesInboxIdTeammates request with any body
	PostInboxesInboxIdTeammatesWithBody(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInboxesInboxIdTeammates(ctx context.Context, inboxId string, body PostInboxesInboxIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLinks request
	GetLinks(ctx context.Context, params *GetLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLinks request with any body
	PostLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLinks(ctx context.Context, body PostLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLinksLinkId request
	GetLinksLinkId(ctx context.Context, linkId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLinksLinkId request with any body
	PatchLinksLinkIdWithBody(ctx context.Context, linkId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLinksLinkId(ctx context.Context, linkId string, body PatchLinksLinkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLinkConversations request
	ListLinkConversations(ctx context.Context, linkId string, params *ListLinkConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageTemplateFolders request
	GetMessageTemplateFolders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessageTemplateFolders request with any body
	PostMessageTemplateFoldersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessageTemplateFolders(ctx context.Context, body PostMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessageTemplateFoldersMessageTemplateFolderId request
	DeleteMessageTemplateFoldersMessageTemplateFolderId(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageTemplateFoldersMessageTemplateFolderId request
	GetMessageTemplateFoldersMessageTemplateFolderId(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMessageTemplateFoldersMessageTemplateFolderId request with any body
	PatchMessageTemplateFoldersMessageTemplateFolderIdWithBody(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMessageTemplateFoldersMessageTemplateFolderId(ctx context.Context, messageTemplateFolderId string, body PatchMessageTemplateFoldersMessageTemplateFolderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders request
	GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders request with any body
	PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithBody(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders(ctx context.Context, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates request
	GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates request with any body
	PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithBody(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates(ctx context.Context, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageTemplates request
	GetMessageTemplates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessageTemplates request with any body
	PostMessageTemplatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessageTemplates(ctx context.Context, body PostMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessageTemplatesMessageTemplateId request
	DeleteMessageTemplatesMessageTemplateId(ctx context.Context, messageTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageTemplatesMessageTemplateId request
	GetMessageTemplatesMessageTemplateId(ctx context.Context, messageTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMessageTemplatesMessageTemplateId request with any body
	PatchMessageTemplatesMessageTemplateIdWithBody(ctx context.Context, messageTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMessageTemplatesMessageTemplateId(ctx context.Context, messageTemplateId string, body PatchMessageTemplatesMessageTemplateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessagesMessageId request
	GetMessagesMessageId(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRules request
	GetRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRulesRuleId request
	GetRulesRuleId(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShiftShiftId request
	GetShiftShiftId(ctx context.Context, shiftId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShiftShiftIdTeammates request with any body
	DeleteShiftShiftIdTeammatesWithBody(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteShiftShiftIdTeammates(ctx context.Context, shiftId string, body DeleteShiftShiftIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShiftShiftIdTeammates request
	GetShiftShiftIdTeammates(ctx context.Context, shiftId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShiftShiftIdTeammates request with any body
	PostShiftShiftIdTeammatesWithBody(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShiftShiftIdTeammates(ctx context.Context, shiftId string, body PostShiftShiftIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListShifts request
	ListShifts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShifts request with any body
	PostShiftsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShifts(ctx context.Context, body PostShiftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchShiftsShiftId request with any body
	PatchShiftsShiftIdWithBody(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchShiftsShiftId(ctx context.Context, shiftId string, body PatchShiftsShiftIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTags request with any body
	PostTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTags(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagsTagId request
	DeleteTagsTagId(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagId request
	GetTagsTagId(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTagsTagId request with any body
	PatchTagsTagIdWithBody(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTagsTagId(ctx context.Context, tagId string, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagIdChildren request
	GetTagsTagIdChildren(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTagsTagIdChildren request with any body
	PostTagsTagIdChildrenWithBody(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTagsTagIdChildren(ctx context.Context, tagId string, body PostTagsTagIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagIdConversations request
	GetTagsTagIdConversations(ctx context.Context, tagId string, params *GetTagsTagIdConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamTeamIdRules request
	GetTeamTeamIdRules(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammates request
	GetTeammates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateId request
	GetTeammatesTeammateId(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTeammatesTeammateId request with any body
	PatchTeammatesTeammateIdWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTeammatesTeammateId(ctx context.Context, teammateId string, body PatchTeammatesTeammateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdChannels request
	GetTeammatesTeammateIdChannels(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdContactGroups request
	GetTeammatesTeammateIdContactGroups(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeammatesTeammateIdContactGroups request with any body
	PostTeammatesTeammateIdContactGroupsWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeammatesTeammateIdContactGroups(ctx context.Context, teammateId string, body PostTeammatesTeammateIdContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdContacts request
	GetTeammatesTeammateIdContacts(ctx context.Context, teammateId string, params *GetTeammatesTeammateIdContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeammatesTeammateIdContacts request with any body
	PostTeammatesTeammateIdContactsWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeammatesTeammateIdContacts(ctx context.Context, teammateId string, body PostTeammatesTeammateIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdConversations request
	GetTeammatesTeammateIdConversations(ctx context.Context, teammateId string, params *GetTeammatesTeammateIdConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdInboxes request
	GetTeammatesTeammateIdInboxes(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdMessageTemplateFolders request
	GetTeammatesTeammateIdMessageTemplateFolders(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeammatesTeammateIdMessageTemplateFolders request with any body
	PostTeammatesTeammateIdMessageTemplateFoldersWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeammatesTeammateIdMessageTemplateFolders(ctx context.Context, teammateId string, body PostTeammatesTeammateIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdMessageTemplates request
	GetTeammatesTeammateIdMessageTemplates(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeammatesTeammateIdMessageTemplates request with any body
	PostTeammatesTeammateIdMessageTemplatesWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeammatesTeammateIdMessageTemplates(ctx context.Context, teammateId string, body PostTeammatesTeammateIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdRules request
	GetTeammatesTeammateIdRules(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdShifts request
	GetTeammatesTeammateIdShifts(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeammatesTeammateIdTags request
	GetTeammatesTeammateIdTags(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeammatesTeammateIdTags request with any body
	PostTeammatesTeammateIdTagsWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeammatesTeammateIdTags(ctx context.Context, teammateId string, body PostTeammatesTeammateIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeams request
	GetTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamId request
	GetTeamsTeamId(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdAnalytics request
	GetTeamsTeamIdAnalytics(ctx context.Context, teamId string, params *GetTeamsTeamIdAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdChannels request
	GetTeamsTeamIdChannels(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdContactGroups request
	GetTeamsTeamIdContactGroups(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdContactGroups request with any body
	PostTeamsTeamIdContactGroupsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdContactGroups(ctx context.Context, teamId string, body PostTeamsTeamIdContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdContacts request
	GetTeamsTeamIdContacts(ctx context.Context, teamId string, params *GetTeamsTeamIdContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdContacts request with any body
	PostTeamsTeamIdContactsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdContacts(ctx context.Context, teamId string, body PostTeamsTeamIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdExports request with any body
	PostTeamsTeamIdExportsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdExports(ctx context.Context, teamId string, body PostTeamsTeamIdExportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdInboxes request
	GetTeamsTeamIdInboxes(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdInboxes request with any body
	PostTeamsTeamIdInboxesWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdInboxes(ctx context.Context, teamId string, body PostTeamsTeamIdInboxesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdMessageTemplateFolders request
	GetTeamsTeamIdMessageTemplateFolders(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdMessageTemplateFolders request with any body
	PostTeamsTeamIdMessageTemplateFoldersWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdMessageTemplateFolders(ctx context.Context, teamId string, body PostTeamsTeamIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdMessageTemplates request
	GetTeamsTeamIdMessageTemplates(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdMessageTemplates request with any body
	PostTeamsTeamIdMessageTemplatesWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdMessageTemplates(ctx context.Context, teamId string, body PostTeamsTeamIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdShifts request
	GetTeamsTeamIdShifts(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdShifts request with any body
	PostTeamsTeamIdShiftsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdShifts(ctx context.Context, teamId string, body PostTeamsTeamIdShiftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsTeamIdTags request
	GetTeamsTeamIdTags(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdTags request with any body
	PostTeamsTeamIdTagsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdTags(ctx context.Context, teamId string, body PostTeamsTeamIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamsTeamIdTeammates request with any body
	DeleteTeamsTeamIdTeammatesWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTeamsTeamIdTeammates(ctx context.Context, teamId string, body DeleteTeamsTeamIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsTeamIdTeammates request with any body
	PostTeamsTeamIdTeammatesWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsTeamIdTeammates(ctx context.Context, teamId string, body PostTeamsTeamIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccounts(ctx context.Context, body PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountsAccountId(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountsAccountIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsAccountId(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsAccountIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAccountsAccountIdWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAccountsAccountIdRequestWithBody(c.Server, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAccountsAccountId(ctx context.Context, accountId string, body PatchAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAccountsAccountIdRequest(c.Server, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountsAccountIdContactsWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountsAccountIdContactsRequestWithBody(c.Server, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountsAccountIdContacts(ctx context.Context, accountId string, body DeleteAccountsAccountIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountsAccountIdContactsRequest(c.Server, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsAccountIdContacts(ctx context.Context, accountId string, params *GetAccountsAccountIdContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsAccountIdContactsRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsAccountIdContactsWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsAccountIdContactsRequestWithBody(c.Server, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsAccountIdContacts(ctx context.Context, accountId string, body PostAccountsAccountIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsAccountIdContactsRequest(c.Server, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnalytics(ctx context.Context, params *GetAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnalyticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAnalyticsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAnalyticsExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAnalyticsExport(ctx context.Context, body CreateAnalyticsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAnalyticsExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnalyticsExport(ctx context.Context, exportId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnalyticsExportRequest(c.Server, exportId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAnalyticsReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAnalyticsReportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAnalyticsReport(ctx context.Context, body CreateAnalyticsReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAnalyticsReportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnalyticsReport(ctx context.Context, reportUid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnalyticsReportRequest(c.Server, reportUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelsChannelId(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelsChannelIdRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchChannelsChannelIdWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchChannelsChannelIdRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchChannelsChannelId(ctx context.Context, channelId string, body PatchChannelsChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchChannelsChannelIdRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelsChannelIdDraftsWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelsChannelIdDraftsRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelsChannelIdDrafts(ctx context.Context, channelId string, body PostChannelsChannelIdDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelsChannelIdDraftsRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelsChannelIdIncomingMessagesWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelsChannelIdIncomingMessagesRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelsChannelIdIncomingMessages(ctx context.Context, channelId string, body PostChannelsChannelIdIncomingMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelsChannelIdIncomingMessagesRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelsChannelIdMessagesWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelsChannelIdMessagesRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelsChannelIdMessages(ctx context.Context, channelId string, body PostChannelsChannelIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelsChannelIdMessagesRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelsChannelIdValidate(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelsChannelIdValidateRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentsCommentId(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommentsCommentIdRequest(c.Server, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentsCommentIdMentions(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommentsCommentIdMentionsRequest(c.Server, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactGroups(ctx context.Context, body PostContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactGroupsContactGroupId(ctx context.Context, contactGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactGroupsContactGroupIdRequest(c.Server, contactGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactGroupsContactGroupIdContacts(ctx context.Context, contactGroupId string, params *GetContactGroupsContactGroupIdContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactGroupsContactGroupIdContactsRequest(c.Server, contactGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactGroupsContactGroupIdContactsWithBody(ctx context.Context, contactGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactGroupsContactGroupIdContactsRequestWithBody(c.Server, contactGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactGroupsContactGroupIdContacts(ctx context.Context, contactGroupId string, body PostContactGroupsContactGroupIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactGroupsContactGroupIdContactsRequest(c.Server, contactGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContacts(ctx context.Context, params *GetContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContacts(ctx context.Context, body PostContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListContactCustomFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListContactCustomFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactsContactId(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactsContactIdRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactsContactId(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactsContactIdRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactsContactIdWithBody(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactsContactIdRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactsContactId(ctx context.Context, contactId string, body PatchContactsContactIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactsContactIdRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactsContactIdConversations(ctx context.Context, contactId string, params *GetContactsContactIdConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactsContactIdConversationsRequest(c.Server, contactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactsContactIdHandlesWithBody(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactsContactIdHandlesRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactsContactIdHandles(ctx context.Context, contactId string, body DeleteContactsContactIdHandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactsContactIdHandlesRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsContactIdHandlesWithBody(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsContactIdHandlesRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsContactIdHandles(ctx context.Context, contactId string, body PostContactsContactIdHandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsContactIdHandlesRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactsContactIdNotes(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactsContactIdNotesRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsContactIdNotesWithBody(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsContactIdNotesRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsContactIdNotes(ctx context.Context, contactId string, body PostContactsContactIdNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsContactIdNotesRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConversations(ctx context.Context, params *ListConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConversationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchConversations(ctx context.Context, query string, params *SearchConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchConversationsRequest(c.Server, query, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationById(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationByIdRequest(c.Server, conversationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConversationsConversationIdWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConversationsConversationIdRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConversationsConversationId(ctx context.Context, conversationId string, body PatchConversationsConversationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConversationsConversationIdRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConversationsConversationIdAssigneeWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConversationsConversationIdAssigneeRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConversationsConversationIdAssignee(ctx context.Context, conversationId string, body PutConversationsConversationIdAssigneeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConversationsConversationIdAssigneeRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationsConversationIdComments(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsConversationIdCommentsRequest(c.Server, conversationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdCommentsWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdCommentsRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdComments(ctx context.Context, conversationId string, body PostConversationsConversationIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdCommentsRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationsConversationIdDrafts(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsConversationIdDraftsRequest(c.Server, conversationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdDraftsWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdDraftsRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdDrafts(ctx context.Context, conversationId string, body PostConversationsConversationIdDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdDraftsRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationsConversationIdEvents(ctx context.Context, conversationId string, params *GetConversationsConversationIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsConversationIdEventsRequest(c.Server, conversationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConversationsConversationIdFollowersWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConversationsConversationIdFollowersRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConversationsConversationIdFollowers(ctx context.Context, conversationId string, body DeleteConversationsConversationIdFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConversationsConversationIdFollowersRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationsConversationIdFollowers(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsConversationIdFollowersRequest(c.Server, conversationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdFollowersWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdFollowersRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdFollowers(ctx context.Context, conversationId string, body PostConversationsConversationIdFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdFollowersRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationsConversationIdInboxes(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsConversationIdInboxesRequest(c.Server, conversationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConversationsConversationIdLinksWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConversationsConversationIdLinksRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConversationsConversationIdLinks(ctx context.Context, conversationId string, body DeleteConversationsConversationIdLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConversationsConversationIdLinksRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdLinksWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdLinksRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdLinks(ctx context.Context, conversationId string, body PostConversationsConversationIdLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdLinksRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationsConversationIdMessages(ctx context.Context, conversationId string, params *GetConversationsConversationIdMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsConversationIdMessagesRequest(c.Server, conversationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdMessagesWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdMessagesRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdMessages(ctx context.Context, conversationId string, body PostConversationsConversationIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdMessagesRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConversationsConversationIdRemindersWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConversationsConversationIdRemindersRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConversationsConversationIdReminders(ctx context.Context, conversationId string, body PatchConversationsConversationIdRemindersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConversationsConversationIdRemindersRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConversationsConversationIdTagsWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConversationsConversationIdTagsRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConversationsConversationIdTags(ctx context.Context, conversationId string, body DeleteConversationsConversationIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConversationsConversationIdTagsRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdTagsWithBody(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdTagsRequestWithBody(c.Server, conversationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsConversationIdTags(ctx context.Context, conversationId string, body PostConversationsConversationIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsConversationIdTagsRequest(c.Server, conversationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCustomFieldsCustomFieldIdWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCustomFieldsCustomFieldIdRequestWithBody(c.Server, customFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCustomFieldsCustomFieldId(ctx context.Context, customFieldId string, body PatchCustomFieldsCustomFieldIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCustomFieldsCustomFieldIdRequest(c.Server, customFieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDownloadAttachmentLinkId(ctx context.Context, attachmentLinkId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDownloadAttachmentLinkIdRequest(c.Server, attachmentLinkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDraftsDraftIdWithBody(ctx context.Context, draftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDraftsDraftIdRequestWithBody(c.Server, draftId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDraftsDraftId(ctx context.Context, draftId string, body DeleteDraftsDraftIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDraftsDraftIdRequest(c.Server, draftId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDraftsMessageIdWithBody(ctx context.Context, messageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDraftsMessageIdRequestWithBody(c.Server, messageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDraftsMessageId(ctx context.Context, messageId string, body PatchDraftsMessageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDraftsMessageIdRequest(c.Server, messageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventsEventId(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsEventIdRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExports(ctx context.Context, params *GetExportsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExportsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExport(ctx context.Context, body CreateExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExportsExportId(ctx context.Context, exportId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExportsExportIdRequest(c.Server, exportId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboxes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboxesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInboxesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInboxesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInboxes(ctx context.Context, body PostInboxesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInboxesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboxesInboxId(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboxesInboxIdRequest(c.Server, inboxId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboxesInboxIdChannels(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboxesInboxIdChannelsRequest(c.Server, inboxId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInboxesInboxIdChannelsWithBody(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInboxesInboxIdChannelsRequestWithBody(c.Server, inboxId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInboxesInboxIdChannels(ctx context.Context, inboxId string, body PostInboxesInboxIdChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInboxesInboxIdChannelsRequest(c.Server, inboxId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboxesInboxIdConversations(ctx context.Context, inboxId string, params *GetInboxesInboxIdConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboxesInboxIdConversationsRequest(c.Server, inboxId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportInboxMessageWithBody(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportInboxMessageRequestWithBody(c.Server, inboxId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportInboxMessage(ctx context.Context, inboxId string, body ImportInboxMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportInboxMessageRequest(c.Server, inboxId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInboxesInboxIdTeammatesWithBody(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInboxesInboxIdTeammatesRequestWithBody(c.Server, inboxId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInboxesInboxIdTeammates(ctx context.Context, inboxId string, body DeleteInboxesInboxIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInboxesInboxIdTeammatesRequest(c.Server, inboxId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboxesInboxIdTeammates(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboxesInboxIdTeammatesRequest(c.Server, inboxId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInboxesInboxIdTeammatesWithBody(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInboxesInboxIdTeammatesRequestWithBody(c.Server, inboxId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInboxesInboxIdTeammates(ctx context.Context, inboxId string, body PostInboxesInboxIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInboxesInboxIdTeammatesRequest(c.Server, inboxId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLinks(ctx context.Context, params *GetLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLinksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLinksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLinks(ctx context.Context, body PostLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLinksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLinksLinkId(ctx context.Context, linkId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLinksLinkIdRequest(c.Server, linkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLinksLinkIdWithBody(ctx context.Context, linkId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLinksLinkIdRequestWithBody(c.Server, linkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLinksLinkId(ctx context.Context, linkId string, body PatchLinksLinkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLinksLinkIdRequest(c.Server, linkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLinkConversations(ctx context.Context, linkId string, params *ListLinkConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLinkConversationsRequest(c.Server, linkId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageTemplateFolders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageTemplateFoldersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageTemplateFoldersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageTemplateFoldersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageTemplateFolders(ctx context.Context, body PostMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageTemplateFoldersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessageTemplateFoldersMessageTemplateFolderId(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageTemplateFoldersMessageTemplateFolderIdRequest(c.Server, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageTemplateFoldersMessageTemplateFolderId(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageTemplateFoldersMessageTemplateFolderIdRequest(c.Server, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMessageTemplateFoldersMessageTemplateFolderIdWithBody(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMessageTemplateFoldersMessageTemplateFolderIdRequestWithBody(c.Server, messageTemplateFolderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMessageTemplateFoldersMessageTemplateFolderId(ctx context.Context, messageTemplateFolderId string, body PatchMessageTemplateFoldersMessageTemplateFolderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMessageTemplateFoldersMessageTemplateFolderIdRequest(c.Server, messageTemplateFolderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequest(c.Server, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithBody(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequestWithBody(c.Server, messageTemplateFolderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders(ctx context.Context, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequest(c.Server, messageTemplateFolderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequest(c.Server, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithBody(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequestWithBody(c.Server, messageTemplateFolderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates(ctx context.Context, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequest(c.Server, messageTemplateFolderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageTemplates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageTemplatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageTemplatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageTemplatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageTemplates(ctx context.Context, body PostMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageTemplatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessageTemplatesMessageTemplateId(ctx context.Context, messageTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageTemplatesMessageTemplateIdRequest(c.Server, messageTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageTemplatesMessageTemplateId(ctx context.Context, messageTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageTemplatesMessageTemplateIdRequest(c.Server, messageTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMessageTemplatesMessageTemplateIdWithBody(ctx context.Context, messageTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMessageTemplatesMessageTemplateIdRequestWithBody(c.Server, messageTemplateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMessageTemplatesMessageTemplateId(ctx context.Context, messageTemplateId string, body PatchMessageTemplatesMessageTemplateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMessageTemplatesMessageTemplateIdRequest(c.Server, messageTemplateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessagesMessageId(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesMessageIdRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRulesRuleId(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRulesRuleIdRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShiftShiftId(ctx context.Context, shiftId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShiftShiftIdRequest(c.Server, shiftId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShiftShiftIdTeammatesWithBody(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShiftShiftIdTeammatesRequestWithBody(c.Server, shiftId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShiftShiftIdTeammates(ctx context.Context, shiftId string, body DeleteShiftShiftIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShiftShiftIdTeammatesRequest(c.Server, shiftId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShiftShiftIdTeammates(ctx context.Context, shiftId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShiftShiftIdTeammatesRequest(c.Server, shiftId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShiftShiftIdTeammatesWithBody(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShiftShiftIdTeammatesRequestWithBody(c.Server, shiftId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShiftShiftIdTeammates(ctx context.Context, shiftId string, body PostShiftShiftIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShiftShiftIdTeammatesRequest(c.Server, shiftId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListShifts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListShiftsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShiftsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShiftsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShifts(ctx context.Context, body PostShiftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShiftsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShiftsShiftIdWithBody(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShiftsShiftIdRequestWithBody(c.Server, shiftId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShiftsShiftId(ctx context.Context, shiftId string, body PatchShiftsShiftIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShiftsShiftIdRequest(c.Server, shiftId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTags(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagsTagId(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagsTagIdRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagId(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagIdRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTagsTagIdWithBody(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTagsTagIdRequestWithBody(c.Server, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTagsTagId(ctx context.Context, tagId string, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTagsTagIdRequest(c.Server, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagIdChildren(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagIdChildrenRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTagsTagIdChildrenWithBody(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsTagIdChildrenRequestWithBody(c.Server, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTagsTagIdChildren(ctx context.Context, tagId string, body PostTagsTagIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsTagIdChildrenRequest(c.Server, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagIdConversations(ctx context.Context, tagId string, params *GetTagsTagIdConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagIdConversationsRequest(c.Server, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamTeamIdRules(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamTeamIdRulesRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateId(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTeammatesTeammateIdWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTeammatesTeammateIdRequestWithBody(c.Server, teammateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTeammatesTeammateId(ctx context.Context, teammateId string, body PatchTeammatesTeammateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTeammatesTeammateIdRequest(c.Server, teammateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdChannels(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdChannelsRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdContactGroups(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdContactGroupsRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdContactGroupsWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdContactGroupsRequestWithBody(c.Server, teammateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdContactGroups(ctx context.Context, teammateId string, body PostTeammatesTeammateIdContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdContactGroupsRequest(c.Server, teammateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdContacts(ctx context.Context, teammateId string, params *GetTeammatesTeammateIdContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdContactsRequest(c.Server, teammateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdContactsWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdContactsRequestWithBody(c.Server, teammateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdContacts(ctx context.Context, teammateId string, body PostTeammatesTeammateIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdContactsRequest(c.Server, teammateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdConversations(ctx context.Context, teammateId string, params *GetTeammatesTeammateIdConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdConversationsRequest(c.Server, teammateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdInboxes(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdInboxesRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdMessageTemplateFolders(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdMessageTemplateFoldersRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdMessageTemplateFoldersWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdMessageTemplateFoldersRequestWithBody(c.Server, teammateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdMessageTemplateFolders(ctx context.Context, teammateId string, body PostTeammatesTeammateIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdMessageTemplateFoldersRequest(c.Server, teammateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdMessageTemplates(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdMessageTemplatesRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdMessageTemplatesWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdMessageTemplatesRequestWithBody(c.Server, teammateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdMessageTemplates(ctx context.Context, teammateId string, body PostTeammatesTeammateIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdMessageTemplatesRequest(c.Server, teammateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdRules(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdRulesRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdShifts(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdShiftsRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeammatesTeammateIdTags(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeammatesTeammateIdTagsRequest(c.Server, teammateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdTagsWithBody(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdTagsRequestWithBody(c.Server, teammateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeammatesTeammateIdTags(ctx context.Context, teammateId string, body PostTeammatesTeammateIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeammatesTeammateIdTagsRequest(c.Server, teammateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamId(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdAnalytics(ctx context.Context, teamId string, params *GetTeamsTeamIdAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdAnalyticsRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdChannels(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdChannelsRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdContactGroups(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdContactGroupsRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdContactGroupsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdContactGroupsRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdContactGroups(ctx context.Context, teamId string, body PostTeamsTeamIdContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdContactGroupsRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdContacts(ctx context.Context, teamId string, params *GetTeamsTeamIdContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdContactsRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdContactsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdContactsRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdContacts(ctx context.Context, teamId string, body PostTeamsTeamIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdContactsRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdExportsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdExportsRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdExports(ctx context.Context, teamId string, body PostTeamsTeamIdExportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdExportsRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdInboxes(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdInboxesRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdInboxesWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdInboxesRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdInboxes(ctx context.Context, teamId string, body PostTeamsTeamIdInboxesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdInboxesRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdMessageTemplateFolders(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdMessageTemplateFoldersRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdMessageTemplateFoldersWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdMessageTemplateFoldersRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdMessageTemplateFolders(ctx context.Context, teamId string, body PostTeamsTeamIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdMessageTemplateFoldersRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdMessageTemplates(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdMessageTemplatesRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdMessageTemplatesWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdMessageTemplatesRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdMessageTemplates(ctx context.Context, teamId string, body PostTeamsTeamIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdMessageTemplatesRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdShifts(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdShiftsRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdShiftsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdShiftsRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdShifts(ctx context.Context, teamId string, body PostTeamsTeamIdShiftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdShiftsRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsTeamIdTags(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsTeamIdTagsRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdTagsWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdTagsRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdTags(ctx context.Context, teamId string, body PostTeamsTeamIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdTagsRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamsTeamIdTeammatesWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamsTeamIdTeammatesRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamsTeamIdTeammates(ctx context.Context, teamId string, body DeleteTeamsTeamIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamsTeamIdTeammatesRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdTeammatesWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdTeammatesRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsTeamIdTeammates(ctx context.Context, teamId string, body PostTeamsTeamIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsTeamIdTeammatesRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountsRequest generates requests for GetAccounts
func NewGetAccountsRequest(server string, params *GetAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsRequest calls the generic PostAccounts builder with application/json body
func NewPostAccountsRequest(server string, body PostAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsRequestWithBody generates requests for PostAccounts with any type of body
func NewPostAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountsAccountIdRequest generates requests for DeleteAccountsAccountId
func NewDeleteAccountsAccountIdRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountsAccountIdRequest generates requests for GetAccountsAccountId
func NewGetAccountsAccountIdRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAccountsAccountIdRequest calls the generic PatchAccountsAccountId builder with application/json body
func NewPatchAccountsAccountIdRequest(server string, accountId string, body PatchAccountsAccountIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAccountsAccountIdRequestWithBody(server, accountId, "application/json", bodyReader)
}

// NewPatchAccountsAccountIdRequestWithBody generates requests for PatchAccountsAccountId with any type of body
func NewPatchAccountsAccountIdRequestWithBody(server string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountsAccountIdContactsRequest calls the generic DeleteAccountsAccountIdContacts builder with application/json body
func NewDeleteAccountsAccountIdContactsRequest(server string, accountId string, body DeleteAccountsAccountIdContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAccountsAccountIdContactsRequestWithBody(server, accountId, "application/json", bodyReader)
}

// NewDeleteAccountsAccountIdContactsRequestWithBody generates requests for DeleteAccountsAccountIdContacts with any type of body
func NewDeleteAccountsAccountIdContactsRequestWithBody(server string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsAccountIdContactsRequest generates requests for GetAccountsAccountIdContacts
func NewGetAccountsAccountIdContactsRequest(server string, accountId string, params *GetAccountsAccountIdContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsAccountIdContactsRequest calls the generic PostAccountsAccountIdContacts builder with application/json body
func NewPostAccountsAccountIdContactsRequest(server string, accountId string, body PostAccountsAccountIdContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsAccountIdContactsRequestWithBody(server, accountId, "application/json", bodyReader)
}

// NewPostAccountsAccountIdContactsRequestWithBody generates requests for PostAccountsAccountIdContacts with any type of body
func NewPostAccountsAccountIdContactsRequestWithBody(server string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAnalyticsRequest generates requests for GetAnalytics
func NewGetAnalyticsRequest(server string, params *GetAnalyticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analytics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.InboxIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inbox_ids", runtime.ParamLocationQuery, *params.InboxIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TagIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag_ids", runtime.ParamLocationQuery, *params.TagIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TeammateIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teammate_ids", runtime.ParamLocationQuery, *params.TeammateIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, params.End); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Timezone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timezone", runtime.ParamLocationQuery, *params.Timezone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metrics", runtime.ParamLocationQuery, params.Metrics); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAnalyticsExportRequest calls the generic CreateAnalyticsExport builder with application/json body
func NewCreateAnalyticsExportRequest(server string, body CreateAnalyticsExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAnalyticsExportRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAnalyticsExportRequestWithBody generates requests for CreateAnalyticsExport with any type of body
func NewCreateAnalyticsExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analytics/exports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAnalyticsExportRequest generates requests for GetAnalyticsExport
func NewGetAnalyticsExportRequest(server string, exportId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "export_id", runtime.ParamLocationPath, exportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analytics/exports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAnalyticsReportRequest calls the generic CreateAnalyticsReport builder with application/json body
func NewCreateAnalyticsReportRequest(server string, body CreateAnalyticsReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAnalyticsReportRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAnalyticsReportRequestWithBody generates requests for CreateAnalyticsReport with any type of body
func NewCreateAnalyticsReportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analytics/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAnalyticsReportRequest generates requests for GetAnalyticsReport
func NewGetAnalyticsReportRequest(server string, reportUid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "report_uid", runtime.ParamLocationPath, reportUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analytics/reports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelsRequest generates requests for GetChannels
func NewGetChannelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelsChannelIdRequest generates requests for GetChannelsChannelId
func NewGetChannelsChannelIdRequest(server string, channelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchChannelsChannelIdRequest calls the generic PatchChannelsChannelId builder with application/json body
func NewPatchChannelsChannelIdRequest(server string, channelId string, body PatchChannelsChannelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchChannelsChannelIdRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPatchChannelsChannelIdRequestWithBody generates requests for PatchChannelsChannelId with any type of body
func NewPatchChannelsChannelIdRequestWithBody(server string, channelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChannelsChannelIdDraftsRequest calls the generic PostChannelsChannelIdDrafts builder with application/json body
func NewPostChannelsChannelIdDraftsRequest(server string, channelId string, body PostChannelsChannelIdDraftsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChannelsChannelIdDraftsRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPostChannelsChannelIdDraftsRequestWithBody generates requests for PostChannelsChannelIdDrafts with any type of body
func NewPostChannelsChannelIdDraftsRequestWithBody(server string, channelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s/drafts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChannelsChannelIdIncomingMessagesRequest calls the generic PostChannelsChannelIdIncomingMessages builder with application/json body
func NewPostChannelsChannelIdIncomingMessagesRequest(server string, channelId string, body PostChannelsChannelIdIncomingMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChannelsChannelIdIncomingMessagesRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPostChannelsChannelIdIncomingMessagesRequestWithBody generates requests for PostChannelsChannelIdIncomingMessages with any type of body
func NewPostChannelsChannelIdIncomingMessagesRequestWithBody(server string, channelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s/incoming_messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChannelsChannelIdMessagesRequest calls the generic PostChannelsChannelIdMessages builder with application/json body
func NewPostChannelsChannelIdMessagesRequest(server string, channelId string, body PostChannelsChannelIdMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChannelsChannelIdMessagesRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPostChannelsChannelIdMessagesRequestWithBody generates requests for PostChannelsChannelIdMessages with any type of body
func NewPostChannelsChannelIdMessagesRequestWithBody(server string, channelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChannelsChannelIdValidateRequest generates requests for PostChannelsChannelIdValidate
func NewPostChannelsChannelIdValidateRequest(server string, channelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommentsCommentIdRequest generates requests for GetCommentsCommentId
func NewGetCommentsCommentIdRequest(server string, commentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommentsCommentIdMentionsRequest generates requests for GetCommentsCommentIdMentions
func NewGetCommentsCommentIdMentionsRequest(server string, commentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments/%s/mentions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactGroupsRequest generates requests for GetContactGroups
func NewGetContactGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contact_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContactGroupsRequest calls the generic PostContactGroups builder with application/json body
func NewPostContactGroupsRequest(server string, body PostContactGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContactGroupsRequestWithBody generates requests for PostContactGroups with any type of body
func NewPostContactGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contact_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactGroupsContactGroupIdRequest generates requests for DeleteContactGroupsContactGroupId
func NewDeleteContactGroupsContactGroupIdRequest(server string, contactGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_group_id", runtime.ParamLocationPath, contactGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contact_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactGroupsContactGroupIdContactsRequest generates requests for GetContactGroupsContactGroupIdContacts
func NewGetContactGroupsContactGroupIdContactsRequest(server string, contactGroupId string, params *GetContactGroupsContactGroupIdContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_group_id", runtime.ParamLocationPath, contactGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contact_groups/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContactGroupsContactGroupIdContactsRequest calls the generic PostContactGroupsContactGroupIdContacts builder with application/json body
func NewPostContactGroupsContactGroupIdContactsRequest(server string, contactGroupId string, body PostContactGroupsContactGroupIdContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactGroupsContactGroupIdContactsRequestWithBody(server, contactGroupId, "application/json", bodyReader)
}

// NewPostContactGroupsContactGroupIdContactsRequestWithBody generates requests for PostContactGroupsContactGroupIdContacts with any type of body
func NewPostContactGroupsContactGroupIdContactsRequestWithBody(server string, contactGroupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_group_id", runtime.ParamLocationPath, contactGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contact_groups/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactsRequest generates requests for GetContacts
func NewGetContactsRequest(server string, params *GetContactsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContactsRequest calls the generic PostContacts builder with application/json body
func NewPostContactsRequest(server string, body PostContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContactsRequestWithBody generates requests for PostContacts with any type of body
func NewPostContactsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListContactCustomFieldsRequest generates requests for ListContactCustomFields
func NewListContactCustomFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteContactsContactIdRequest generates requests for DeleteContactsContactId
func NewDeleteContactsContactIdRequest(server string, contactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactsContactIdRequest generates requests for GetContactsContactId
func NewGetContactsContactIdRequest(server string, contactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchContactsContactIdRequest calls the generic PatchContactsContactId builder with application/json body
func NewPatchContactsContactIdRequest(server string, contactId string, body PatchContactsContactIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchContactsContactIdRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewPatchContactsContactIdRequestWithBody generates requests for PatchContactsContactId with any type of body
func NewPatchContactsContactIdRequestWithBody(server string, contactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactsContactIdConversationsRequest generates requests for GetContactsContactIdConversations
func NewGetContactsContactIdConversationsRequest(server string, contactId string, params *GetContactsContactIdConversationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/conversations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteContactsContactIdHandlesRequest calls the generic DeleteContactsContactIdHandles builder with application/json body
func NewDeleteContactsContactIdHandlesRequest(server string, contactId string, body DeleteContactsContactIdHandlesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteContactsContactIdHandlesRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewDeleteContactsContactIdHandlesRequestWithBody generates requests for DeleteContactsContactIdHandles with any type of body
func NewDeleteContactsContactIdHandlesRequestWithBody(server string, contactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/handles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostContactsContactIdHandlesRequest calls the generic PostContactsContactIdHandles builder with application/json body
func NewPostContactsContactIdHandlesRequest(server string, contactId string, body PostContactsContactIdHandlesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactsContactIdHandlesRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewPostContactsContactIdHandlesRequestWithBody generates requests for PostContactsContactIdHandles with any type of body
func NewPostContactsContactIdHandlesRequestWithBody(server string, contactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/handles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactsContactIdNotesRequest generates requests for GetContactsContactIdNotes
func NewGetContactsContactIdNotesRequest(server string, contactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContactsContactIdNotesRequest calls the generic PostContactsContactIdNotes builder with application/json body
func NewPostContactsContactIdNotesRequest(server string, contactId string, body PostContactsContactIdNotesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactsContactIdNotesRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewPostContactsContactIdNotesRequestWithBody generates requests for PostContactsContactIdNotes with any type of body
func NewPostContactsContactIdNotesRequestWithBody(server string, contactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConversationsRequest generates requests for ListConversations
func NewListConversationsRequest(server string, params *ListConversationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchConversationsRequest generates requests for SearchConversations
func NewSearchConversationsRequest(server string, query string, params *SearchConversationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "query", runtime.ParamLocationPath, query)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConversationByIdRequest generates requests for GetConversationById
func NewGetConversationByIdRequest(server string, conversationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchConversationsConversationIdRequest calls the generic PatchConversationsConversationId builder with application/json body
func NewPatchConversationsConversationIdRequest(server string, conversationId string, body PatchConversationsConversationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConversationsConversationIdRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPatchConversationsConversationIdRequestWithBody generates requests for PatchConversationsConversationId with any type of body
func NewPatchConversationsConversationIdRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutConversationsConversationIdAssigneeRequest calls the generic PutConversationsConversationIdAssignee builder with application/json body
func NewPutConversationsConversationIdAssigneeRequest(server string, conversationId string, body PutConversationsConversationIdAssigneeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConversationsConversationIdAssigneeRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPutConversationsConversationIdAssigneeRequestWithBody generates requests for PutConversationsConversationIdAssignee with any type of body
func NewPutConversationsConversationIdAssigneeRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/assignee", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConversationsConversationIdCommentsRequest generates requests for GetConversationsConversationIdComments
func NewGetConversationsConversationIdCommentsRequest(server string, conversationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/comments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConversationsConversationIdCommentsRequest calls the generic PostConversationsConversationIdComments builder with application/json body
func NewPostConversationsConversationIdCommentsRequest(server string, conversationId string, body PostConversationsConversationIdCommentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConversationsConversationIdCommentsRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPostConversationsConversationIdCommentsRequestWithBody generates requests for PostConversationsConversationIdComments with any type of body
func NewPostConversationsConversationIdCommentsRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/comments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConversationsConversationIdDraftsRequest generates requests for GetConversationsConversationIdDrafts
func NewGetConversationsConversationIdDraftsRequest(server string, conversationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/drafts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConversationsConversationIdDraftsRequest calls the generic PostConversationsConversationIdDrafts builder with application/json body
func NewPostConversationsConversationIdDraftsRequest(server string, conversationId string, body PostConversationsConversationIdDraftsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConversationsConversationIdDraftsRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPostConversationsConversationIdDraftsRequestWithBody generates requests for PostConversationsConversationIdDrafts with any type of body
func NewPostConversationsConversationIdDraftsRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/drafts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConversationsConversationIdEventsRequest generates requests for GetConversationsConversationIdEvents
func NewGetConversationsConversationIdEventsRequest(server string, conversationId string, params *GetConversationsConversationIdEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConversationsConversationIdFollowersRequest calls the generic DeleteConversationsConversationIdFollowers builder with application/json body
func NewDeleteConversationsConversationIdFollowersRequest(server string, conversationId string, body DeleteConversationsConversationIdFollowersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteConversationsConversationIdFollowersRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewDeleteConversationsConversationIdFollowersRequestWithBody generates requests for DeleteConversationsConversationIdFollowers with any type of body
func NewDeleteConversationsConversationIdFollowersRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConversationsConversationIdFollowersRequest generates requests for GetConversationsConversationIdFollowers
func NewGetConversationsConversationIdFollowersRequest(server string, conversationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConversationsConversationIdFollowersRequest calls the generic PostConversationsConversationIdFollowers builder with application/json body
func NewPostConversationsConversationIdFollowersRequest(server string, conversationId string, body PostConversationsConversationIdFollowersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConversationsConversationIdFollowersRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPostConversationsConversationIdFollowersRequestWithBody generates requests for PostConversationsConversationIdFollowers with any type of body
func NewPostConversationsConversationIdFollowersRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConversationsConversationIdInboxesRequest generates requests for GetConversationsConversationIdInboxes
func NewGetConversationsConversationIdInboxesRequest(server string, conversationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/inboxes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConversationsConversationIdLinksRequest calls the generic DeleteConversationsConversationIdLinks builder with application/json body
func NewDeleteConversationsConversationIdLinksRequest(server string, conversationId string, body DeleteConversationsConversationIdLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteConversationsConversationIdLinksRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewDeleteConversationsConversationIdLinksRequestWithBody generates requests for DeleteConversationsConversationIdLinks with any type of body
func NewDeleteConversationsConversationIdLinksRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostConversationsConversationIdLinksRequest calls the generic PostConversationsConversationIdLinks builder with application/json body
func NewPostConversationsConversationIdLinksRequest(server string, conversationId string, body PostConversationsConversationIdLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConversationsConversationIdLinksRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPostConversationsConversationIdLinksRequestWithBody generates requests for PostConversationsConversationIdLinks with any type of body
func NewPostConversationsConversationIdLinksRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConversationsConversationIdMessagesRequest generates requests for GetConversationsConversationIdMessages
func NewGetConversationsConversationIdMessagesRequest(server string, conversationId string, params *GetConversationsConversationIdMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConversationsConversationIdMessagesRequest calls the generic PostConversationsConversationIdMessages builder with application/json body
func NewPostConversationsConversationIdMessagesRequest(server string, conversationId string, body PostConversationsConversationIdMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConversationsConversationIdMessagesRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPostConversationsConversationIdMessagesRequestWithBody generates requests for PostConversationsConversationIdMessages with any type of body
func NewPostConversationsConversationIdMessagesRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchConversationsConversationIdRemindersRequest calls the generic PatchConversationsConversationIdReminders builder with application/json body
func NewPatchConversationsConversationIdRemindersRequest(server string, conversationId string, body PatchConversationsConversationIdRemindersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConversationsConversationIdRemindersRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPatchConversationsConversationIdRemindersRequestWithBody generates requests for PatchConversationsConversationIdReminders with any type of body
func NewPatchConversationsConversationIdRemindersRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/reminders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConversationsConversationIdTagsRequest calls the generic DeleteConversationsConversationIdTags builder with application/json body
func NewDeleteConversationsConversationIdTagsRequest(server string, conversationId string, body DeleteConversationsConversationIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteConversationsConversationIdTagsRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewDeleteConversationsConversationIdTagsRequestWithBody generates requests for DeleteConversationsConversationIdTags with any type of body
func NewDeleteConversationsConversationIdTagsRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostConversationsConversationIdTagsRequest calls the generic PostConversationsConversationIdTags builder with application/json body
func NewPostConversationsConversationIdTagsRequest(server string, conversationId string, body PostConversationsConversationIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConversationsConversationIdTagsRequestWithBody(server, conversationId, "application/json", bodyReader)
}

// NewPostConversationsConversationIdTagsRequestWithBody generates requests for PostConversationsConversationIdTags with any type of body
func NewPostConversationsConversationIdTagsRequestWithBody(server string, conversationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldsRequest generates requests for ListCustomFields
func NewListCustomFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCustomFieldsCustomFieldIdRequest calls the generic PatchCustomFieldsCustomFieldId builder with application/json body
func NewPatchCustomFieldsCustomFieldIdRequest(server string, customFieldId string, body PatchCustomFieldsCustomFieldIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCustomFieldsCustomFieldIdRequestWithBody(server, customFieldId, "application/json", bodyReader)
}

// NewPatchCustomFieldsCustomFieldIdRequestWithBody generates requests for PatchCustomFieldsCustomFieldId with any type of body
func NewPatchCustomFieldsCustomFieldIdRequestWithBody(server string, customFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDownloadAttachmentLinkIdRequest generates requests for GetDownloadAttachmentLinkId
func NewGetDownloadAttachmentLinkIdRequest(server string, attachmentLinkId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attachment_link_id", runtime.ParamLocationPath, attachmentLinkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/download/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDraftsDraftIdRequest calls the generic DeleteDraftsDraftId builder with application/json body
func NewDeleteDraftsDraftIdRequest(server string, draftId string, body DeleteDraftsDraftIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteDraftsDraftIdRequestWithBody(server, draftId, "application/json", bodyReader)
}

// NewDeleteDraftsDraftIdRequestWithBody generates requests for DeleteDraftsDraftId with any type of body
func NewDeleteDraftsDraftIdRequestWithBody(server string, draftId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "draft_id", runtime.ParamLocationPath, draftId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/drafts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchDraftsMessageIdRequest calls the generic PatchDraftsMessageId builder with application/json body
func NewPatchDraftsMessageIdRequest(server string, messageId string, body PatchDraftsMessageIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDraftsMessageIdRequestWithBody(server, messageId, "application/json", bodyReader)
}

// NewPatchDraftsMessageIdRequestWithBody generates requests for PatchDraftsMessageId with any type of body
func NewPatchDraftsMessageIdRequestWithBody(server string, messageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_id", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/drafts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string, params *GetEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsEventIdRequest generates requests for GetEventsEventId
func NewGetEventsEventIdRequest(server string, eventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExportsRequest generates requests for GetExports
func NewGetExportsRequest(server string, params *GetExportsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateExportRequest calls the generic CreateExport builder with application/json body
func NewCreateExportRequest(server string, body CreateExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateExportRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateExportRequestWithBody generates requests for CreateExport with any type of body
func NewCreateExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExportsExportIdRequest generates requests for GetExportsExportId
func NewGetExportsExportIdRequest(server string, exportId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "export_id", runtime.ParamLocationPath, exportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInboxesRequest generates requests for GetInboxes
func NewGetInboxesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInboxesRequest calls the generic PostInboxes builder with application/json body
func NewPostInboxesRequest(server string, body PostInboxesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInboxesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInboxesRequestWithBody generates requests for PostInboxes with any type of body
func NewPostInboxesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInboxesInboxIdRequest generates requests for GetInboxesInboxId
func NewGetInboxesInboxIdRequest(server string, inboxId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inbox_id", runtime.ParamLocationPath, inboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInboxesInboxIdChannelsRequest generates requests for GetInboxesInboxIdChannels
func NewGetInboxesInboxIdChannelsRequest(server string, inboxId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inbox_id", runtime.ParamLocationPath, inboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes/%s/channels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInboxesInboxIdChannelsRequest calls the generic PostInboxesInboxIdChannels builder with application/json body
func NewPostInboxesInboxIdChannelsRequest(server string, inboxId string, body PostInboxesInboxIdChannelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInboxesInboxIdChannelsRequestWithBody(server, inboxId, "application/json", bodyReader)
}

// NewPostInboxesInboxIdChannelsRequestWithBody generates requests for PostInboxesInboxIdChannels with any type of body
func NewPostInboxesInboxIdChannelsRequestWithBody(server string, inboxId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inbox_id", runtime.ParamLocationPath, inboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes/%s/channels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInboxesInboxIdConversationsRequest generates requests for GetInboxesInboxIdConversations
func NewGetInboxesInboxIdConversationsRequest(server string, inboxId string, params *GetInboxesInboxIdConversationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inbox_id", runtime.ParamLocationPath, inboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes/%s/conversations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportInboxMessageRequest calls the generic ImportInboxMessage builder with application/json body
func NewImportInboxMessageRequest(server string, inboxId string, body ImportInboxMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportInboxMessageRequestWithBody(server, inboxId, "application/json", bodyReader)
}

// NewImportInboxMessageRequestWithBody generates requests for ImportInboxMessage with any type of body
func NewImportInboxMessageRequestWithBody(server string, inboxId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inbox_id", runtime.ParamLocationPath, inboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes/%s/imported_messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInboxesInboxIdTeammatesRequest calls the generic DeleteInboxesInboxIdTeammates builder with application/json body
func NewDeleteInboxesInboxIdTeammatesRequest(server string, inboxId string, body DeleteInboxesInboxIdTeammatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteInboxesInboxIdTeammatesRequestWithBody(server, inboxId, "application/json", bodyReader)
}

// NewDeleteInboxesInboxIdTeammatesRequestWithBody generates requests for DeleteInboxesInboxIdTeammates with any type of body
func NewDeleteInboxesInboxIdTeammatesRequestWithBody(server string, inboxId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inbox_id", runtime.ParamLocationPath, inboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes/%s/teammates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInboxesInboxIdTeammatesRequest generates requests for GetInboxesInboxIdTeammates
func NewGetInboxesInboxIdTeammatesRequest(server string, inboxId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inbox_id", runtime.ParamLocationPath, inboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes/%s/teammates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInboxesInboxIdTeammatesRequest calls the generic PostInboxesInboxIdTeammates builder with application/json body
func NewPostInboxesInboxIdTeammatesRequest(server string, inboxId string, body PostInboxesInboxIdTeammatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInboxesInboxIdTeammatesRequestWithBody(server, inboxId, "application/json", bodyReader)
}

// NewPostInboxesInboxIdTeammatesRequestWithBody generates requests for PostInboxesInboxIdTeammates with any type of body
func NewPostInboxesInboxIdTeammatesRequestWithBody(server string, inboxId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inbox_id", runtime.ParamLocationPath, inboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inboxes/%s/teammates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLinksRequest generates requests for GetLinks
func NewGetLinksRequest(server string, params *GetLinksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLinksRequest calls the generic PostLinks builder with application/json body
func NewPostLinksRequest(server string, body PostLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLinksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLinksRequestWithBody generates requests for PostLinks with any type of body
func NewPostLinksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLinksLinkIdRequest generates requests for GetLinksLinkId
func NewGetLinksLinkIdRequest(server string, linkId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "link_id", runtime.ParamLocationPath, linkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchLinksLinkIdRequest calls the generic PatchLinksLinkId builder with application/json body
func NewPatchLinksLinkIdRequest(server string, linkId string, body PatchLinksLinkIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLinksLinkIdRequestWithBody(server, linkId, "application/json", bodyReader)
}

// NewPatchLinksLinkIdRequestWithBody generates requests for PatchLinksLinkId with any type of body
func NewPatchLinksLinkIdRequestWithBody(server string, linkId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "link_id", runtime.ParamLocationPath, linkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListLinkConversationsRequest generates requests for ListLinkConversations
func NewListLinkConversationsRequest(server string, linkId string, params *ListLinkConversationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "link_id", runtime.ParamLocationPath, linkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links/%s/conversations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessageTemplateFoldersRequest generates requests for GetMessageTemplateFolders
func NewGetMessageTemplateFoldersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMessageTemplateFoldersRequest calls the generic PostMessageTemplateFolders builder with application/json body
func NewPostMessageTemplateFoldersRequest(server string, body PostMessageTemplateFoldersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessageTemplateFoldersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMessageTemplateFoldersRequestWithBody generates requests for PostMessageTemplateFolders with any type of body
func NewPostMessageTemplateFoldersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMessageTemplateFoldersMessageTemplateFolderIdRequest generates requests for DeleteMessageTemplateFoldersMessageTemplateFolderId
func NewDeleteMessageTemplateFoldersMessageTemplateFolderIdRequest(server string, messageTemplateFolderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_folder_id", runtime.ParamLocationPath, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessageTemplateFoldersMessageTemplateFolderIdRequest generates requests for GetMessageTemplateFoldersMessageTemplateFolderId
func NewGetMessageTemplateFoldersMessageTemplateFolderIdRequest(server string, messageTemplateFolderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_folder_id", runtime.ParamLocationPath, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchMessageTemplateFoldersMessageTemplateFolderIdRequest calls the generic PatchMessageTemplateFoldersMessageTemplateFolderId builder with application/json body
func NewPatchMessageTemplateFoldersMessageTemplateFolderIdRequest(server string, messageTemplateFolderId string, body PatchMessageTemplateFoldersMessageTemplateFolderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMessageTemplateFoldersMessageTemplateFolderIdRequestWithBody(server, messageTemplateFolderId, "application/json", bodyReader)
}

// NewPatchMessageTemplateFoldersMessageTemplateFolderIdRequestWithBody generates requests for PatchMessageTemplateFoldersMessageTemplateFolderId with any type of body
func NewPatchMessageTemplateFoldersMessageTemplateFolderIdRequestWithBody(server string, messageTemplateFolderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_folder_id", runtime.ParamLocationPath, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequest generates requests for GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders
func NewGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequest(server string, messageTemplateFolderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_folder_id", runtime.ParamLocationPath, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders/%s/message_template_folders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequest calls the generic PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders builder with application/json body
func NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequest(server string, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequestWithBody(server, messageTemplateFolderId, "application/json", bodyReader)
}

// NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequestWithBody generates requests for PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders with any type of body
func NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersRequestWithBody(server string, messageTemplateFolderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_folder_id", runtime.ParamLocationPath, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders/%s/message_template_folders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequest generates requests for GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates
func NewGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequest(server string, messageTemplateFolderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_folder_id", runtime.ParamLocationPath, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders/%s/message_templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequest calls the generic PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates builder with application/json body
func NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequest(server string, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequestWithBody(server, messageTemplateFolderId, "application/json", bodyReader)
}

// NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequestWithBody generates requests for PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates with any type of body
func NewPostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesRequestWithBody(server string, messageTemplateFolderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_folder_id", runtime.ParamLocationPath, messageTemplateFolderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_template_folders/%s/message_templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessageTemplatesRequest generates requests for GetMessageTemplates
func NewGetMessageTemplatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMessageTemplatesRequest calls the generic PostMessageTemplates builder with application/json body
func NewPostMessageTemplatesRequest(server string, body PostMessageTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessageTemplatesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMessageTemplatesRequestWithBody generates requests for PostMessageTemplates with any type of body
func NewPostMessageTemplatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMessageTemplatesMessageTemplateIdRequest generates requests for DeleteMessageTemplatesMessageTemplateId
func NewDeleteMessageTemplatesMessageTemplateIdRequest(server string, messageTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_id", runtime.ParamLocationPath, messageTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessageTemplatesMessageTemplateIdRequest generates requests for GetMessageTemplatesMessageTemplateId
func NewGetMessageTemplatesMessageTemplateIdRequest(server string, messageTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_id", runtime.ParamLocationPath, messageTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchMessageTemplatesMessageTemplateIdRequest calls the generic PatchMessageTemplatesMessageTemplateId builder with application/json body
func NewPatchMessageTemplatesMessageTemplateIdRequest(server string, messageTemplateId string, body PatchMessageTemplatesMessageTemplateIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMessageTemplatesMessageTemplateIdRequestWithBody(server, messageTemplateId, "application/json", bodyReader)
}

// NewPatchMessageTemplatesMessageTemplateIdRequestWithBody generates requests for PatchMessageTemplatesMessageTemplateId with any type of body
func NewPatchMessageTemplatesMessageTemplateIdRequestWithBody(server string, messageTemplateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_template_id", runtime.ParamLocationPath, messageTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/message_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessagesMessageIdRequest generates requests for GetMessagesMessageId
func NewGetMessagesMessageIdRequest(server string, messageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "message_id", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRulesRequest generates requests for GetRules
func NewGetRulesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRulesRuleIdRequest generates requests for GetRulesRuleId
func NewGetRulesRuleIdRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShiftShiftIdRequest generates requests for GetShiftShiftId
func NewGetShiftShiftIdRequest(server string, shiftId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shift_id", runtime.ParamLocationPath, shiftId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shift/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteShiftShiftIdTeammatesRequest calls the generic DeleteShiftShiftIdTeammates builder with application/json body
func NewDeleteShiftShiftIdTeammatesRequest(server string, shiftId string, body DeleteShiftShiftIdTeammatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteShiftShiftIdTeammatesRequestWithBody(server, shiftId, "application/json", bodyReader)
}

// NewDeleteShiftShiftIdTeammatesRequestWithBody generates requests for DeleteShiftShiftIdTeammates with any type of body
func NewDeleteShiftShiftIdTeammatesRequestWithBody(server string, shiftId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shift_id", runtime.ParamLocationPath, shiftId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shift/%s/teammates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShiftShiftIdTeammatesRequest generates requests for GetShiftShiftIdTeammates
func NewGetShiftShiftIdTeammatesRequest(server string, shiftId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shift_id", runtime.ParamLocationPath, shiftId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shift/%s/teammates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostShiftShiftIdTeammatesRequest calls the generic PostShiftShiftIdTeammates builder with application/json body
func NewPostShiftShiftIdTeammatesRequest(server string, shiftId string, body PostShiftShiftIdTeammatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShiftShiftIdTeammatesRequestWithBody(server, shiftId, "application/json", bodyReader)
}

// NewPostShiftShiftIdTeammatesRequestWithBody generates requests for PostShiftShiftIdTeammates with any type of body
func NewPostShiftShiftIdTeammatesRequestWithBody(server string, shiftId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shift_id", runtime.ParamLocationPath, shiftId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shift/%s/teammates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListShiftsRequest generates requests for ListShifts
func NewListShiftsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shifts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostShiftsRequest calls the generic PostShifts builder with application/json body
func NewPostShiftsRequest(server string, body PostShiftsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShiftsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostShiftsRequestWithBody generates requests for PostShifts with any type of body
func NewPostShiftsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shifts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchShiftsShiftIdRequest calls the generic PatchShiftsShiftId builder with application/json body
func NewPatchShiftsShiftIdRequest(server string, shiftId string, body PatchShiftsShiftIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchShiftsShiftIdRequestWithBody(server, shiftId, "application/json", bodyReader)
}

// NewPatchShiftsShiftIdRequestWithBody generates requests for PatchShiftsShiftId with any type of body
func NewPatchShiftsShiftIdRequestWithBody(server string, shiftId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shift_id", runtime.ParamLocationPath, shiftId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shifts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTagsRequest calls the generic PostTags builder with application/json body
func NewPostTagsRequest(server string, body PostTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTagsRequestWithBody generates requests for PostTags with any type of body
func NewPostTagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagsTagIdRequest generates requests for DeleteTagsTagId
func NewDeleteTagsTagIdRequest(server string, tagId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsTagIdRequest generates requests for GetTagsTagId
func NewGetTagsTagIdRequest(server string, tagId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTagsTagIdRequest calls the generic PatchTagsTagId builder with application/json body
func NewPatchTagsTagIdRequest(server string, tagId string, body PatchTagsTagIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTagsTagIdRequestWithBody(server, tagId, "application/json", bodyReader)
}

// NewPatchTagsTagIdRequestWithBody generates requests for PatchTagsTagId with any type of body
func NewPatchTagsTagIdRequestWithBody(server string, tagId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsTagIdChildrenRequest generates requests for GetTagsTagIdChildren
func NewGetTagsTagIdChildrenRequest(server string, tagId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/children", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTagsTagIdChildrenRequest calls the generic PostTagsTagIdChildren builder with application/json body
func NewPostTagsTagIdChildrenRequest(server string, tagId string, body PostTagsTagIdChildrenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTagsTagIdChildrenRequestWithBody(server, tagId, "application/json", bodyReader)
}

// NewPostTagsTagIdChildrenRequestWithBody generates requests for PostTagsTagIdChildren with any type of body
func NewPostTagsTagIdChildrenRequestWithBody(server string, tagId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/children", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsTagIdConversationsRequest generates requests for GetTagsTagIdConversations
func NewGetTagsTagIdConversationsRequest(server string, tagId string, params *GetTagsTagIdConversationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/conversations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamTeamIdRulesRequest generates requests for GetTeamTeamIdRules
func NewGetTeamTeamIdRulesRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeammatesRequest generates requests for GetTeammates
func NewGetTeammatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeammatesTeammateIdRequest generates requests for GetTeammatesTeammateId
func NewGetTeammatesTeammateIdRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTeammatesTeammateIdRequest calls the generic PatchTeammatesTeammateId builder with application/json body
func NewPatchTeammatesTeammateIdRequest(server string, teammateId string, body PatchTeammatesTeammateIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTeammatesTeammateIdRequestWithBody(server, teammateId, "application/json", bodyReader)
}

// NewPatchTeammatesTeammateIdRequestWithBody generates requests for PatchTeammatesTeammateId with any type of body
func NewPatchTeammatesTeammateIdRequestWithBody(server string, teammateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeammatesTeammateIdChannelsRequest generates requests for GetTeammatesTeammateIdChannels
func NewGetTeammatesTeammateIdChannelsRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/channels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeammatesTeammateIdContactGroupsRequest generates requests for GetTeammatesTeammateIdContactGroups
func NewGetTeammatesTeammateIdContactGroupsRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/contact_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeammatesTeammateIdContactGroupsRequest calls the generic PostTeammatesTeammateIdContactGroups builder with application/json body
func NewPostTeammatesTeammateIdContactGroupsRequest(server string, teammateId string, body PostTeammatesTeammateIdContactGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeammatesTeammateIdContactGroupsRequestWithBody(server, teammateId, "application/json", bodyReader)
}

// NewPostTeammatesTeammateIdContactGroupsRequestWithBody generates requests for PostTeammatesTeammateIdContactGroups with any type of body
func NewPostTeammatesTeammateIdContactGroupsRequestWithBody(server string, teammateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/contact_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeammatesTeammateIdContactsRequest generates requests for GetTeammatesTeammateIdContacts
func NewGetTeammatesTeammateIdContactsRequest(server string, teammateId string, params *GetTeammatesTeammateIdContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeammatesTeammateIdContactsRequest calls the generic PostTeammatesTeammateIdContacts builder with application/json body
func NewPostTeammatesTeammateIdContactsRequest(server string, teammateId string, body PostTeammatesTeammateIdContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeammatesTeammateIdContactsRequestWithBody(server, teammateId, "application/json", bodyReader)
}

// NewPostTeammatesTeammateIdContactsRequestWithBody generates requests for PostTeammatesTeammateIdContacts with any type of body
func NewPostTeammatesTeammateIdContactsRequestWithBody(server string, teammateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeammatesTeammateIdConversationsRequest generates requests for GetTeammatesTeammateIdConversations
func NewGetTeammatesTeammateIdConversationsRequest(server string, teammateId string, params *GetTeammatesTeammateIdConversationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/conversations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeammatesTeammateIdInboxesRequest generates requests for GetTeammatesTeammateIdInboxes
func NewGetTeammatesTeammateIdInboxesRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/inboxes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeammatesTeammateIdMessageTemplateFoldersRequest generates requests for GetTeammatesTeammateIdMessageTemplateFolders
func NewGetTeammatesTeammateIdMessageTemplateFoldersRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/message_template_folders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeammatesTeammateIdMessageTemplateFoldersRequest calls the generic PostTeammatesTeammateIdMessageTemplateFolders builder with application/json body
func NewPostTeammatesTeammateIdMessageTemplateFoldersRequest(server string, teammateId string, body PostTeammatesTeammateIdMessageTemplateFoldersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeammatesTeammateIdMessageTemplateFoldersRequestWithBody(server, teammateId, "application/json", bodyReader)
}

// NewPostTeammatesTeammateIdMessageTemplateFoldersRequestWithBody generates requests for PostTeammatesTeammateIdMessageTemplateFolders with any type of body
func NewPostTeammatesTeammateIdMessageTemplateFoldersRequestWithBody(server string, teammateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/message_template_folders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeammatesTeammateIdMessageTemplatesRequest generates requests for GetTeammatesTeammateIdMessageTemplates
func NewGetTeammatesTeammateIdMessageTemplatesRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/message_templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeammatesTeammateIdMessageTemplatesRequest calls the generic PostTeammatesTeammateIdMessageTemplates builder with application/json body
func NewPostTeammatesTeammateIdMessageTemplatesRequest(server string, teammateId string, body PostTeammatesTeammateIdMessageTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeammatesTeammateIdMessageTemplatesRequestWithBody(server, teammateId, "application/json", bodyReader)
}

// NewPostTeammatesTeammateIdMessageTemplatesRequestWithBody generates requests for PostTeammatesTeammateIdMessageTemplates with any type of body
func NewPostTeammatesTeammateIdMessageTemplatesRequestWithBody(server string, teammateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/message_templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeammatesTeammateIdRulesRequest generates requests for GetTeammatesTeammateIdRules
func NewGetTeammatesTeammateIdRulesRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeammatesTeammateIdShiftsRequest generates requests for GetTeammatesTeammateIdShifts
func NewGetTeammatesTeammateIdShiftsRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/shifts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeammatesTeammateIdTagsRequest generates requests for GetTeammatesTeammateIdTags
func NewGetTeammatesTeammateIdTagsRequest(server string, teammateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeammatesTeammateIdTagsRequest calls the generic PostTeammatesTeammateIdTags builder with application/json body
func NewPostTeammatesTeammateIdTagsRequest(server string, teammateId string, body PostTeammatesTeammateIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeammatesTeammateIdTagsRequestWithBody(server, teammateId, "application/json", bodyReader)
}

// NewPostTeammatesTeammateIdTagsRequestWithBody generates requests for PostTeammatesTeammateIdTags with any type of body
func NewPostTeammatesTeammateIdTagsRequestWithBody(server string, teammateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teammate_id", runtime.ParamLocationPath, teammateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teammates/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamsRequest generates requests for GetTeams
func NewGetTeamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsTeamIdRequest generates requests for GetTeamsTeamId
func NewGetTeamsTeamIdRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsTeamIdAnalyticsRequest generates requests for GetTeamsTeamIdAnalytics
func NewGetTeamsTeamIdAnalyticsRequest(server string, teamId string, params *GetTeamsTeamIdAnalyticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/analytics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.InboxIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inbox_ids", runtime.ParamLocationQuery, *params.InboxIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TagIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag_ids", runtime.ParamLocationQuery, *params.TagIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TeammateIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teammate_ids", runtime.ParamLocationQuery, *params.TeammateIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, params.End); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Timezone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timezone", runtime.ParamLocationQuery, *params.Timezone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metrics", runtime.ParamLocationQuery, params.Metrics); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsTeamIdChannelsRequest generates requests for GetTeamsTeamIdChannels
func NewGetTeamsTeamIdChannelsRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/channels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsTeamIdContactGroupsRequest generates requests for GetTeamsTeamIdContactGroups
func NewGetTeamsTeamIdContactGroupsRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/contact_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsTeamIdContactGroupsRequest calls the generic PostTeamsTeamIdContactGroups builder with application/json body
func NewPostTeamsTeamIdContactGroupsRequest(server string, teamId string, body PostTeamsTeamIdContactGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdContactGroupsRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdContactGroupsRequestWithBody generates requests for PostTeamsTeamIdContactGroups with any type of body
func NewPostTeamsTeamIdContactGroupsRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/contact_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamsTeamIdContactsRequest generates requests for GetTeamsTeamIdContacts
func NewGetTeamsTeamIdContactsRequest(server string, teamId string, params *GetTeamsTeamIdContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsTeamIdContactsRequest calls the generic PostTeamsTeamIdContacts builder with application/json body
func NewPostTeamsTeamIdContactsRequest(server string, teamId string, body PostTeamsTeamIdContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdContactsRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdContactsRequestWithBody generates requests for PostTeamsTeamIdContacts with any type of body
func NewPostTeamsTeamIdContactsRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTeamsTeamIdExportsRequest calls the generic PostTeamsTeamIdExports builder with application/json body
func NewPostTeamsTeamIdExportsRequest(server string, teamId string, body PostTeamsTeamIdExportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdExportsRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdExportsRequestWithBody generates requests for PostTeamsTeamIdExports with any type of body
func NewPostTeamsTeamIdExportsRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/exports", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamsTeamIdInboxesRequest generates requests for GetTeamsTeamIdInboxes
func NewGetTeamsTeamIdInboxesRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/inboxes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsTeamIdInboxesRequest calls the generic PostTeamsTeamIdInboxes builder with application/json body
func NewPostTeamsTeamIdInboxesRequest(server string, teamId string, body PostTeamsTeamIdInboxesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdInboxesRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdInboxesRequestWithBody generates requests for PostTeamsTeamIdInboxes with any type of body
func NewPostTeamsTeamIdInboxesRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/inboxes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamsTeamIdMessageTemplateFoldersRequest generates requests for GetTeamsTeamIdMessageTemplateFolders
func NewGetTeamsTeamIdMessageTemplateFoldersRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/message_template_folders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsTeamIdMessageTemplateFoldersRequest calls the generic PostTeamsTeamIdMessageTemplateFolders builder with application/json body
func NewPostTeamsTeamIdMessageTemplateFoldersRequest(server string, teamId string, body PostTeamsTeamIdMessageTemplateFoldersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdMessageTemplateFoldersRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdMessageTemplateFoldersRequestWithBody generates requests for PostTeamsTeamIdMessageTemplateFolders with any type of body
func NewPostTeamsTeamIdMessageTemplateFoldersRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/message_template_folders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamsTeamIdMessageTemplatesRequest generates requests for GetTeamsTeamIdMessageTemplates
func NewGetTeamsTeamIdMessageTemplatesRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/message_templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsTeamIdMessageTemplatesRequest calls the generic PostTeamsTeamIdMessageTemplates builder with application/json body
func NewPostTeamsTeamIdMessageTemplatesRequest(server string, teamId string, body PostTeamsTeamIdMessageTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdMessageTemplatesRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdMessageTemplatesRequestWithBody generates requests for PostTeamsTeamIdMessageTemplates with any type of body
func NewPostTeamsTeamIdMessageTemplatesRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/message_templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamsTeamIdShiftsRequest generates requests for GetTeamsTeamIdShifts
func NewGetTeamsTeamIdShiftsRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/shifts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsTeamIdShiftsRequest calls the generic PostTeamsTeamIdShifts builder with application/json body
func NewPostTeamsTeamIdShiftsRequest(server string, teamId string, body PostTeamsTeamIdShiftsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdShiftsRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdShiftsRequestWithBody generates requests for PostTeamsTeamIdShifts with any type of body
func NewPostTeamsTeamIdShiftsRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/shifts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamsTeamIdTagsRequest generates requests for GetTeamsTeamIdTags
func NewGetTeamsTeamIdTagsRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsTeamIdTagsRequest calls the generic PostTeamsTeamIdTags builder with application/json body
func NewPostTeamsTeamIdTagsRequest(server string, teamId string, body PostTeamsTeamIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdTagsRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdTagsRequestWithBody generates requests for PostTeamsTeamIdTags with any type of body
func NewPostTeamsTeamIdTagsRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamsTeamIdTeammatesRequest calls the generic DeleteTeamsTeamIdTeammates builder with application/json body
func NewDeleteTeamsTeamIdTeammatesRequest(server string, teamId string, body DeleteTeamsTeamIdTeammatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTeamsTeamIdTeammatesRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewDeleteTeamsTeamIdTeammatesRequestWithBody generates requests for DeleteTeamsTeamIdTeammates with any type of body
func NewDeleteTeamsTeamIdTeammatesRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/teammates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTeamsTeamIdTeammatesRequest calls the generic PostTeamsTeamIdTeammates builder with application/json body
func NewPostTeamsTeamIdTeammatesRequest(server string, teamId string, body PostTeamsTeamIdTeammatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsTeamIdTeammatesRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewPostTeamsTeamIdTeammatesRequestWithBody generates requests for PostTeamsTeamIdTeammates with any type of body
func NewPostTeamsTeamIdTeammatesRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/teammates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccounts request
	GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error)

	// PostAccounts request with any body
	PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsResponse, error)

	PostAccountsWithResponse(ctx context.Context, body PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsResponse, error)

	// DeleteAccountsAccountId request
	DeleteAccountsAccountIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*DeleteAccountsAccountIdResponse, error)

	// GetAccountsAccountId request
	GetAccountsAccountIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*GetAccountsAccountIdResponse, error)

	// PatchAccountsAccountId request with any body
	PatchAccountsAccountIdWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAccountsAccountIdResponse, error)

	PatchAccountsAccountIdWithResponse(ctx context.Context, accountId string, body PatchAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAccountsAccountIdResponse, error)

	// DeleteAccountsAccountIdContacts request with any body
	DeleteAccountsAccountIdContactsWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountsAccountIdContactsResponse, error)

	DeleteAccountsAccountIdContactsWithResponse(ctx context.Context, accountId string, body DeleteAccountsAccountIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountsAccountIdContactsResponse, error)

	// GetAccountsAccountIdContacts request
	GetAccountsAccountIdContactsWithResponse(ctx context.Context, accountId string, params *GetAccountsAccountIdContactsParams, reqEditors ...RequestEditorFn) (*GetAccountsAccountIdContactsResponse, error)

	// PostAccountsAccountIdContacts request with any body
	PostAccountsAccountIdContactsWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsAccountIdContactsResponse, error)

	PostAccountsAccountIdContactsWithResponse(ctx context.Context, accountId string, body PostAccountsAccountIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsAccountIdContactsResponse, error)

	// GetAnalytics request
	GetAnalyticsWithResponse(ctx context.Context, params *GetAnalyticsParams, reqEditors ...RequestEditorFn) (*GetAnalyticsResponse, error)

	// CreateAnalyticsExport request with any body
	CreateAnalyticsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAnalyticsExportResponse, error)

	CreateAnalyticsExportWithResponse(ctx context.Context, body CreateAnalyticsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAnalyticsExportResponse, error)

	// GetAnalyticsExport request
	GetAnalyticsExportWithResponse(ctx context.Context, exportId string, reqEditors ...RequestEditorFn) (*GetAnalyticsExportResponse, error)

	// CreateAnalyticsReport request with any body
	CreateAnalyticsReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAnalyticsReportResponse, error)

	CreateAnalyticsReportWithResponse(ctx context.Context, body CreateAnalyticsReportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAnalyticsReportResponse, error)

	// GetAnalyticsReport request
	GetAnalyticsReportWithResponse(ctx context.Context, reportUid string, reqEditors ...RequestEditorFn) (*GetAnalyticsReportResponse, error)

	// GetChannels request
	GetChannelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChannelsResponse, error)

	// GetChannelsChannelId request
	GetChannelsChannelIdWithResponse(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*GetChannelsChannelIdResponse, error)

	// PatchChannelsChannelId request with any body
	PatchChannelsChannelIdWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchChannelsChannelIdResponse, error)

	PatchChannelsChannelIdWithResponse(ctx context.Context, channelId string, body PatchChannelsChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchChannelsChannelIdResponse, error)

	// PostChannelsChannelIdDrafts request with any body
	PostChannelsChannelIdDraftsWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdDraftsResponse, error)

	PostChannelsChannelIdDraftsWithResponse(ctx context.Context, channelId string, body PostChannelsChannelIdDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdDraftsResponse, error)

	// PostChannelsChannelIdIncomingMessages request with any body
	PostChannelsChannelIdIncomingMessagesWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdIncomingMessagesResponse, error)

	PostChannelsChannelIdIncomingMessagesWithResponse(ctx context.Context, channelId string, body PostChannelsChannelIdIncomingMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdIncomingMessagesResponse, error)

	// PostChannelsChannelIdMessages request with any body
	PostChannelsChannelIdMessagesWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdMessagesResponse, error)

	PostChannelsChannelIdMessagesWithResponse(ctx context.Context, channelId string, body PostChannelsChannelIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdMessagesResponse, error)

	// PostChannelsChannelIdValidate request
	PostChannelsChannelIdValidateWithResponse(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdValidateResponse, error)

	// GetCommentsCommentId request
	GetCommentsCommentIdWithResponse(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*GetCommentsCommentIdResponse, error)

	// GetCommentsCommentIdMentions request
	GetCommentsCommentIdMentionsWithResponse(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*GetCommentsCommentIdMentionsResponse, error)

	// GetContactGroups request
	GetContactGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactGroupsResponse, error)

	// PostContactGroups request with any body
	PostContactGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactGroupsResponse, error)

	PostContactGroupsWithResponse(ctx context.Context, body PostContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactGroupsResponse, error)

	// DeleteContactGroupsContactGroupId request
	DeleteContactGroupsContactGroupIdWithResponse(ctx context.Context, contactGroupId string, reqEditors ...RequestEditorFn) (*DeleteContactGroupsContactGroupIdResponse, error)

	// GetContactGroupsContactGroupIdContacts request
	GetContactGroupsContactGroupIdContactsWithResponse(ctx context.Context, contactGroupId string, params *GetContactGroupsContactGroupIdContactsParams, reqEditors ...RequestEditorFn) (*GetContactGroupsContactGroupIdContactsResponse, error)

	// PostContactGroupsContactGroupIdContacts request with any body
	PostContactGroupsContactGroupIdContactsWithBodyWithResponse(ctx context.Context, contactGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactGroupsContactGroupIdContactsResponse, error)

	PostContactGroupsContactGroupIdContactsWithResponse(ctx context.Context, contactGroupId string, body PostContactGroupsContactGroupIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactGroupsContactGroupIdContactsResponse, error)

	// GetContacts request
	GetContactsWithResponse(ctx context.Context, params *GetContactsParams, reqEditors ...RequestEditorFn) (*GetContactsResponse, error)

	// PostContacts request with any body
	PostContactsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsResponse, error)

	PostContactsWithResponse(ctx context.Context, body PostContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsResponse, error)

	// ListContactCustomFields request
	ListContactCustomFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListContactCustomFieldsResponse, error)

	// DeleteContactsContactId request
	DeleteContactsContactIdWithResponse(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*DeleteContactsContactIdResponse, error)

	// GetContactsContactId request
	GetContactsContactIdWithResponse(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*GetContactsContactIdResponse, error)

	// PatchContactsContactId request with any body
	PatchContactsContactIdWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactsContactIdResponse, error)

	PatchContactsContactIdWithResponse(ctx context.Context, contactId string, body PatchContactsContactIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactsContactIdResponse, error)

	// GetContactsContactIdConversations request
	GetContactsContactIdConversationsWithResponse(ctx context.Context, contactId string, params *GetContactsContactIdConversationsParams, reqEditors ...RequestEditorFn) (*GetContactsContactIdConversationsResponse, error)

	// DeleteContactsContactIdHandles request with any body
	DeleteContactsContactIdHandlesWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteContactsContactIdHandlesResponse, error)

	DeleteContactsContactIdHandlesWithResponse(ctx context.Context, contactId string, body DeleteContactsContactIdHandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteContactsContactIdHandlesResponse, error)

	// PostContactsContactIdHandles request with any body
	PostContactsContactIdHandlesWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsContactIdHandlesResponse, error)

	PostContactsContactIdHandlesWithResponse(ctx context.Context, contactId string, body PostContactsContactIdHandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsContactIdHandlesResponse, error)

	// GetContactsContactIdNotes request
	GetContactsContactIdNotesWithResponse(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*GetContactsContactIdNotesResponse, error)

	// PostContactsContactIdNotes request with any body
	PostContactsContactIdNotesWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsContactIdNotesResponse, error)

	PostContactsContactIdNotesWithResponse(ctx context.Context, contactId string, body PostContactsContactIdNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsContactIdNotesResponse, error)

	// ListConversations request
	ListConversationsWithResponse(ctx context.Context, params *ListConversationsParams, reqEditors ...RequestEditorFn) (*ListConversationsResponse, error)

	// SearchConversations request
	SearchConversationsWithResponse(ctx context.Context, query string, params *SearchConversationsParams, reqEditors ...RequestEditorFn) (*SearchConversationsResponse, error)

	// GetConversationById request
	GetConversationByIdWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationByIdResponse, error)

	// PatchConversationsConversationId request with any body
	PatchConversationsConversationIdWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConversationsConversationIdResponse, error)

	PatchConversationsConversationIdWithResponse(ctx context.Context, conversationId string, body PatchConversationsConversationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConversationsConversationIdResponse, error)

	// PutConversationsConversationIdAssignee request with any body
	PutConversationsConversationIdAssigneeWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConversationsConversationIdAssigneeResponse, error)

	PutConversationsConversationIdAssigneeWithResponse(ctx context.Context, conversationId string, body PutConversationsConversationIdAssigneeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConversationsConversationIdAssigneeResponse, error)

	// GetConversationsConversationIdComments request
	GetConversationsConversationIdCommentsWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdCommentsResponse, error)

	// PostConversationsConversationIdComments request with any body
	PostConversationsConversationIdCommentsWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdCommentsResponse, error)

	PostConversationsConversationIdCommentsWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdCommentsResponse, error)

	// GetConversationsConversationIdDrafts request
	GetConversationsConversationIdDraftsWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdDraftsResponse, error)

	// PostConversationsConversationIdDrafts request with any body
	PostConversationsConversationIdDraftsWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdDraftsResponse, error)

	PostConversationsConversationIdDraftsWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdDraftsResponse, error)

	// GetConversationsConversationIdEvents request
	GetConversationsConversationIdEventsWithResponse(ctx context.Context, conversationId string, params *GetConversationsConversationIdEventsParams, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdEventsResponse, error)

	// DeleteConversationsConversationIdFollowers request with any body
	DeleteConversationsConversationIdFollowersWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdFollowersResponse, error)

	DeleteConversationsConversationIdFollowersWithResponse(ctx context.Context, conversationId string, body DeleteConversationsConversationIdFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdFollowersResponse, error)

	// GetConversationsConversationIdFollowers request
	GetConversationsConversationIdFollowersWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdFollowersResponse, error)

	// PostConversationsConversationIdFollowers request with any body
	PostConversationsConversationIdFollowersWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdFollowersResponse, error)

	PostConversationsConversationIdFollowersWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdFollowersResponse, error)

	// GetConversationsConversationIdInboxes request
	GetConversationsConversationIdInboxesWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdInboxesResponse, error)

	// DeleteConversationsConversationIdLinks request with any body
	DeleteConversationsConversationIdLinksWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdLinksResponse, error)

	DeleteConversationsConversationIdLinksWithResponse(ctx context.Context, conversationId string, body DeleteConversationsConversationIdLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdLinksResponse, error)

	// PostConversationsConversationIdLinks request with any body
	PostConversationsConversationIdLinksWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdLinksResponse, error)

	PostConversationsConversationIdLinksWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdLinksResponse, error)

	// GetConversationsConversationIdMessages request
	GetConversationsConversationIdMessagesWithResponse(ctx context.Context, conversationId string, params *GetConversationsConversationIdMessagesParams, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdMessagesResponse, error)

	// PostConversationsConversationIdMessages request with any body
	PostConversationsConversationIdMessagesWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdMessagesResponse, error)

	PostConversationsConversationIdMessagesWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdMessagesResponse, error)

	// PatchConversationsConversationIdReminders request with any body
	PatchConversationsConversationIdRemindersWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConversationsConversationIdRemindersResponse, error)

	PatchConversationsConversationIdRemindersWithResponse(ctx context.Context, conversationId string, body PatchConversationsConversationIdRemindersJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConversationsConversationIdRemindersResponse, error)

	// DeleteConversationsConversationIdTags request with any body
	DeleteConversationsConversationIdTagsWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdTagsResponse, error)

	DeleteConversationsConversationIdTagsWithResponse(ctx context.Context, conversationId string, body DeleteConversationsConversationIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdTagsResponse, error)

	// PostConversationsConversationIdTags request with any body
	PostConversationsConversationIdTagsWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdTagsResponse, error)

	PostConversationsConversationIdTagsWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdTagsResponse, error)

	// ListCustomFields request
	ListCustomFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error)

	// PatchCustomFieldsCustomFieldId request with any body
	PatchCustomFieldsCustomFieldIdWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCustomFieldsCustomFieldIdResponse, error)

	PatchCustomFieldsCustomFieldIdWithResponse(ctx context.Context, customFieldId string, body PatchCustomFieldsCustomFieldIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCustomFieldsCustomFieldIdResponse, error)

	// GetDownloadAttachmentLinkId request
	GetDownloadAttachmentLinkIdWithResponse(ctx context.Context, attachmentLinkId string, reqEditors ...RequestEditorFn) (*GetDownloadAttachmentLinkIdResponse, error)

	// DeleteDraftsDraftId request with any body
	DeleteDraftsDraftIdWithBodyWithResponse(ctx context.Context, draftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDraftsDraftIdResponse, error)

	DeleteDraftsDraftIdWithResponse(ctx context.Context, draftId string, body DeleteDraftsDraftIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDraftsDraftIdResponse, error)

	// PatchDraftsMessageId request with any body
	PatchDraftsMessageIdWithBodyWithResponse(ctx context.Context, messageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDraftsMessageIdResponse, error)

	PatchDraftsMessageIdWithResponse(ctx context.Context, messageId string, body PatchDraftsMessageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDraftsMessageIdResponse, error)

	// GetEvents request
	GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// GetEventsEventId request
	GetEventsEventIdWithResponse(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*GetEventsEventIdResponse, error)

	// GetExports request
	GetExportsWithResponse(ctx context.Context, params *GetExportsParams, reqEditors ...RequestEditorFn) (*GetExportsResponse, error)

	// CreateExport request with any body
	CreateExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExportResponse, error)

	CreateExportWithResponse(ctx context.Context, body CreateExportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExportResponse, error)

	// GetExportsExportId request
	GetExportsExportIdWithResponse(ctx context.Context, exportId string, reqEditors ...RequestEditorFn) (*GetExportsExportIdResponse, error)

	// GetInboxes request
	GetInboxesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInboxesResponse, error)

	// PostInboxes request with any body
	PostInboxesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInboxesResponse, error)

	PostInboxesWithResponse(ctx context.Context, body PostInboxesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInboxesResponse, error)

	// GetInboxesInboxId request
	GetInboxesInboxIdWithResponse(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*GetInboxesInboxIdResponse, error)

	// GetInboxesInboxIdChannels request
	GetInboxesInboxIdChannelsWithResponse(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*GetInboxesInboxIdChannelsResponse, error)

	// PostInboxesInboxIdChannels request with any body
	PostInboxesInboxIdChannelsWithBodyWithResponse(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInboxesInboxIdChannelsResponse, error)

	PostInboxesInboxIdChannelsWithResponse(ctx context.Context, inboxId string, body PostInboxesInboxIdChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInboxesInboxIdChannelsResponse, error)

	// GetInboxesInboxIdConversations request
	GetInboxesInboxIdConversationsWithResponse(ctx context.Context, inboxId string, params *GetInboxesInboxIdConversationsParams, reqEditors ...RequestEditorFn) (*GetInboxesInboxIdConversationsResponse, error)

	// ImportInboxMessage request with any body
	ImportInboxMessageWithBodyWithResponse(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportInboxMessageResponse, error)

	ImportInboxMessageWithResponse(ctx context.Context, inboxId string, body ImportInboxMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportInboxMessageResponse, error)

	// DeleteInboxesInboxIdTeammates request with any body
	DeleteInboxesInboxIdTeammatesWithBodyWithResponse(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteInboxesInboxIdTeammatesResponse, error)

	DeleteInboxesInboxIdTeammatesWithResponse(ctx context.Context, inboxId string, body DeleteInboxesInboxIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteInboxesInboxIdTeammatesResponse, error)

	// GetInboxesInboxIdTeammates request
	GetInboxesInboxIdTeammatesWithResponse(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*GetInboxesInboxIdTeammatesResponse, error)

	// PostInboxesInboxIdTeammates request with any body
	PostInboxesInboxIdTeammatesWithBodyWithResponse(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInboxesInboxIdTeammatesResponse, error)

	PostInboxesInboxIdTeammatesWithResponse(ctx context.Context, inboxId string, body PostInboxesInboxIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInboxesInboxIdTeammatesResponse, error)

	// GetLinks request
	GetLinksWithResponse(ctx context.Context, params *GetLinksParams, reqEditors ...RequestEditorFn) (*GetLinksResponse, error)

	// PostLinks request with any body
	PostLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLinksResponse, error)

	PostLinksWithResponse(ctx context.Context, body PostLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLinksResponse, error)

	// GetLinksLinkId request
	GetLinksLinkIdWithResponse(ctx context.Context, linkId string, reqEditors ...RequestEditorFn) (*GetLinksLinkIdResponse, error)

	// PatchLinksLinkId request with any body
	PatchLinksLinkIdWithBodyWithResponse(ctx context.Context, linkId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLinksLinkIdResponse, error)

	PatchLinksLinkIdWithResponse(ctx context.Context, linkId string, body PatchLinksLinkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLinksLinkIdResponse, error)

	// ListLinkConversations request
	ListLinkConversationsWithResponse(ctx context.Context, linkId string, params *ListLinkConversationsParams, reqEditors ...RequestEditorFn) (*ListLinkConversationsResponse, error)

	// GetMe request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// GetMessageTemplateFolders request
	GetMessageTemplateFoldersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMessageTemplateFoldersResponse, error)

	// PostMessageTemplateFolders request with any body
	PostMessageTemplateFoldersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersResponse, error)

	PostMessageTemplateFoldersWithResponse(ctx context.Context, body PostMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersResponse, error)

	// DeleteMessageTemplateFoldersMessageTemplateFolderId request
	DeleteMessageTemplateFoldersMessageTemplateFolderIdWithResponse(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*DeleteMessageTemplateFoldersMessageTemplateFolderIdResponse, error)

	// GetMessageTemplateFoldersMessageTemplateFolderId request
	GetMessageTemplateFoldersMessageTemplateFolderIdWithResponse(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*GetMessageTemplateFoldersMessageTemplateFolderIdResponse, error)

	// PatchMessageTemplateFoldersMessageTemplateFolderId request with any body
	PatchMessageTemplateFoldersMessageTemplateFolderIdWithBodyWithResponse(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMessageTemplateFoldersMessageTemplateFolderIdResponse, error)

	PatchMessageTemplateFoldersMessageTemplateFolderIdWithResponse(ctx context.Context, messageTemplateFolderId string, body PatchMessageTemplateFoldersMessageTemplateFolderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMessageTemplateFoldersMessageTemplateFolderIdResponse, error)

	// GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders request
	GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithResponse(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse, error)

	// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders request with any body
	PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithBodyWithResponse(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse, error)

	PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithResponse(ctx context.Context, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse, error)

	// GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates request
	GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithResponse(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse, error)

	// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates request with any body
	PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithBodyWithResponse(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse, error)

	PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithResponse(ctx context.Context, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse, error)

	// GetMessageTemplates request
	GetMessageTemplatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMessageTemplatesResponse, error)

	// PostMessageTemplates request with any body
	PostMessageTemplatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageTemplatesResponse, error)

	PostMessageTemplatesWithResponse(ctx context.Context, body PostMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageTemplatesResponse, error)

	// DeleteMessageTemplatesMessageTemplateId request
	DeleteMessageTemplatesMessageTemplateIdWithResponse(ctx context.Context, messageTemplateId string, reqEditors ...RequestEditorFn) (*DeleteMessageTemplatesMessageTemplateIdResponse, error)

	// GetMessageTemplatesMessageTemplateId request
	GetMessageTemplatesMessageTemplateIdWithResponse(ctx context.Context, messageTemplateId string, reqEditors ...RequestEditorFn) (*GetMessageTemplatesMessageTemplateIdResponse, error)

	// PatchMessageTemplatesMessageTemplateId request with any body
	PatchMessageTemplatesMessageTemplateIdWithBodyWithResponse(ctx context.Context, messageTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMessageTemplatesMessageTemplateIdResponse, error)

	PatchMessageTemplatesMessageTemplateIdWithResponse(ctx context.Context, messageTemplateId string, body PatchMessageTemplatesMessageTemplateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMessageTemplatesMessageTemplateIdResponse, error)

	// GetMessagesMessageId request
	GetMessagesMessageIdWithResponse(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*GetMessagesMessageIdResponse, error)

	// GetRules request
	GetRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRulesResponse, error)

	// GetRulesRuleId request
	GetRulesRuleIdWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*GetRulesRuleIdResponse, error)

	// GetShiftShiftId request
	GetShiftShiftIdWithResponse(ctx context.Context, shiftId string, reqEditors ...RequestEditorFn) (*GetShiftShiftIdResponse, error)

	// DeleteShiftShiftIdTeammates request with any body
	DeleteShiftShiftIdTeammatesWithBodyWithResponse(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteShiftShiftIdTeammatesResponse, error)

	DeleteShiftShiftIdTeammatesWithResponse(ctx context.Context, shiftId string, body DeleteShiftShiftIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteShiftShiftIdTeammatesResponse, error)

	// GetShiftShiftIdTeammates request
	GetShiftShiftIdTeammatesWithResponse(ctx context.Context, shiftId string, reqEditors ...RequestEditorFn) (*GetShiftShiftIdTeammatesResponse, error)

	// PostShiftShiftIdTeammates request with any body
	PostShiftShiftIdTeammatesWithBodyWithResponse(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShiftShiftIdTeammatesResponse, error)

	PostShiftShiftIdTeammatesWithResponse(ctx context.Context, shiftId string, body PostShiftShiftIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShiftShiftIdTeammatesResponse, error)

	// ListShifts request
	ListShiftsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListShiftsResponse, error)

	// PostShifts request with any body
	PostShiftsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShiftsResponse, error)

	PostShiftsWithResponse(ctx context.Context, body PostShiftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShiftsResponse, error)

	// PatchShiftsShiftId request with any body
	PatchShiftsShiftIdWithBodyWithResponse(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShiftsShiftIdResponse, error)

	PatchShiftsShiftIdWithResponse(ctx context.Context, shiftId string, body PatchShiftsShiftIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShiftsShiftIdResponse, error)

	// GetTags request
	GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// PostTags request with any body
	PostTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsResponse, error)

	PostTagsWithResponse(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsResponse, error)

	// DeleteTagsTagId request
	DeleteTagsTagIdWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*DeleteTagsTagIdResponse, error)

	// GetTagsTagId request
	GetTagsTagIdWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*GetTagsTagIdResponse, error)

	// PatchTagsTagId request with any body
	PatchTagsTagIdWithBodyWithResponse(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error)

	PatchTagsTagIdWithResponse(ctx context.Context, tagId string, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error)

	// GetTagsTagIdChildren request
	GetTagsTagIdChildrenWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*GetTagsTagIdChildrenResponse, error)

	// PostTagsTagIdChildren request with any body
	PostTagsTagIdChildrenWithBodyWithResponse(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsTagIdChildrenResponse, error)

	PostTagsTagIdChildrenWithResponse(ctx context.Context, tagId string, body PostTagsTagIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsTagIdChildrenResponse, error)

	// GetTagsTagIdConversations request
	GetTagsTagIdConversationsWithResponse(ctx context.Context, tagId string, params *GetTagsTagIdConversationsParams, reqEditors ...RequestEditorFn) (*GetTagsTagIdConversationsResponse, error)

	// GetTeamTeamIdRules request
	GetTeamTeamIdRulesWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamTeamIdRulesResponse, error)

	// GetTeammates request
	GetTeammatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTeammatesResponse, error)

	// GetTeammatesTeammateId request
	GetTeammatesTeammateIdWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdResponse, error)

	// PatchTeammatesTeammateId request with any body
	PatchTeammatesTeammateIdWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTeammatesTeammateIdResponse, error)

	PatchTeammatesTeammateIdWithResponse(ctx context.Context, teammateId string, body PatchTeammatesTeammateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTeammatesTeammateIdResponse, error)

	// GetTeammatesTeammateIdChannels request
	GetTeammatesTeammateIdChannelsWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdChannelsResponse, error)

	// GetTeammatesTeammateIdContactGroups request
	GetTeammatesTeammateIdContactGroupsWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdContactGroupsResponse, error)

	// PostTeammatesTeammateIdContactGroups request with any body
	PostTeammatesTeammateIdContactGroupsWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdContactGroupsResponse, error)

	PostTeammatesTeammateIdContactGroupsWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdContactGroupsResponse, error)

	// GetTeammatesTeammateIdContacts request
	GetTeammatesTeammateIdContactsWithResponse(ctx context.Context, teammateId string, params *GetTeammatesTeammateIdContactsParams, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdContactsResponse, error)

	// PostTeammatesTeammateIdContacts request with any body
	PostTeammatesTeammateIdContactsWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdContactsResponse, error)

	PostTeammatesTeammateIdContactsWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdContactsResponse, error)

	// GetTeammatesTeammateIdConversations request
	GetTeammatesTeammateIdConversationsWithResponse(ctx context.Context, teammateId string, params *GetTeammatesTeammateIdConversationsParams, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdConversationsResponse, error)

	// GetTeammatesTeammateIdInboxes request
	GetTeammatesTeammateIdInboxesWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdInboxesResponse, error)

	// GetTeammatesTeammateIdMessageTemplateFolders request
	GetTeammatesTeammateIdMessageTemplateFoldersWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdMessageTemplateFoldersResponse, error)

	// PostTeammatesTeammateIdMessageTemplateFolders request with any body
	PostTeammatesTeammateIdMessageTemplateFoldersWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdMessageTemplateFoldersResponse, error)

	PostTeammatesTeammateIdMessageTemplateFoldersWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdMessageTemplateFoldersResponse, error)

	// GetTeammatesTeammateIdMessageTemplates request
	GetTeammatesTeammateIdMessageTemplatesWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdMessageTemplatesResponse, error)

	// PostTeammatesTeammateIdMessageTemplates request with any body
	PostTeammatesTeammateIdMessageTemplatesWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdMessageTemplatesResponse, error)

	PostTeammatesTeammateIdMessageTemplatesWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdMessageTemplatesResponse, error)

	// GetTeammatesTeammateIdRules request
	GetTeammatesTeammateIdRulesWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdRulesResponse, error)

	// GetTeammatesTeammateIdShifts request
	GetTeammatesTeammateIdShiftsWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdShiftsResponse, error)

	// GetTeammatesTeammateIdTags request
	GetTeammatesTeammateIdTagsWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdTagsResponse, error)

	// PostTeammatesTeammateIdTags request with any body
	PostTeammatesTeammateIdTagsWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdTagsResponse, error)

	PostTeammatesTeammateIdTagsWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdTagsResponse, error)

	// GetTeams request
	GetTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error)

	// GetTeamsTeamId request
	GetTeamsTeamIdWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdResponse, error)

	// GetTeamsTeamIdAnalytics request
	GetTeamsTeamIdAnalyticsWithResponse(ctx context.Context, teamId string, params *GetTeamsTeamIdAnalyticsParams, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdAnalyticsResponse, error)

	// GetTeamsTeamIdChannels request
	GetTeamsTeamIdChannelsWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdChannelsResponse, error)

	// GetTeamsTeamIdContactGroups request
	GetTeamsTeamIdContactGroupsWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdContactGroupsResponse, error)

	// PostTeamsTeamIdContactGroups request with any body
	PostTeamsTeamIdContactGroupsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdContactGroupsResponse, error)

	PostTeamsTeamIdContactGroupsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdContactGroupsResponse, error)

	// GetTeamsTeamIdContacts request
	GetTeamsTeamIdContactsWithResponse(ctx context.Context, teamId string, params *GetTeamsTeamIdContactsParams, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdContactsResponse, error)

	// PostTeamsTeamIdContacts request with any body
	PostTeamsTeamIdContactsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdContactsResponse, error)

	PostTeamsTeamIdContactsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdContactsResponse, error)

	// PostTeamsTeamIdExports request with any body
	PostTeamsTeamIdExportsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdExportsResponse, error)

	PostTeamsTeamIdExportsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdExportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdExportsResponse, error)

	// GetTeamsTeamIdInboxes request
	GetTeamsTeamIdInboxesWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdInboxesResponse, error)

	// PostTeamsTeamIdInboxes request with any body
	PostTeamsTeamIdInboxesWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdInboxesResponse, error)

	PostTeamsTeamIdInboxesWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdInboxesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdInboxesResponse, error)

	// GetTeamsTeamIdMessageTemplateFolders request
	GetTeamsTeamIdMessageTemplateFoldersWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdMessageTemplateFoldersResponse, error)

	// PostTeamsTeamIdMessageTemplateFolders request with any body
	PostTeamsTeamIdMessageTemplateFoldersWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdMessageTemplateFoldersResponse, error)

	PostTeamsTeamIdMessageTemplateFoldersWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdMessageTemplateFoldersResponse, error)

	// GetTeamsTeamIdMessageTemplates request
	GetTeamsTeamIdMessageTemplatesWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdMessageTemplatesResponse, error)

	// PostTeamsTeamIdMessageTemplates request with any body
	PostTeamsTeamIdMessageTemplatesWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdMessageTemplatesResponse, error)

	PostTeamsTeamIdMessageTemplatesWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdMessageTemplatesResponse, error)

	// GetTeamsTeamIdShifts request
	GetTeamsTeamIdShiftsWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdShiftsResponse, error)

	// PostTeamsTeamIdShifts request with any body
	PostTeamsTeamIdShiftsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdShiftsResponse, error)

	PostTeamsTeamIdShiftsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdShiftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdShiftsResponse, error)

	// GetTeamsTeamIdTags request
	GetTeamsTeamIdTagsWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdTagsResponse, error)

	// PostTeamsTeamIdTags request with any body
	PostTeamsTeamIdTagsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdTagsResponse, error)

	PostTeamsTeamIdTagsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdTagsResponse, error)

	// DeleteTeamsTeamIdTeammates request with any body
	DeleteTeamsTeamIdTeammatesWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTeamsTeamIdTeammatesResponse, error)

	DeleteTeamsTeamIdTeammatesWithResponse(ctx context.Context, teamId string, body DeleteTeamsTeamIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTeamsTeamIdTeammatesResponse, error)

	// PostTeamsTeamIdTeammates request with any body
	PostTeamsTeamIdTeammatesWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdTeammatesResponse, error)

	PostTeamsTeamIdTeammatesWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdTeammatesResponse, error)
}

type GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]AccountResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountResponse
}

// Status returns HTTPResponse.Status
func (r PostAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountsAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountsAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountsAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountResponse
}

// Status returns HTTPResponse.Status
func (r GetAccountsAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAccountsAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountResponse
}

// Status returns HTTPResponse.Status
func (r PatchAccountsAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAccountsAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountsAccountIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountsAccountIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountsAccountIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsAccountIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ContactResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAccountsAccountIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsAccountIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsAccountIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsAccountIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsAccountIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnalyticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnalyticsResponse
}

// Status returns HTTPResponse.Status
func (r GetAnalyticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnalyticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAnalyticsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AnalyticsExportResponse2
}

// Status returns HTTPResponse.Status
func (r CreateAnalyticsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAnalyticsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnalyticsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnalyticsExportResponse2
}

// Status returns HTTPResponse.Status
func (r GetAnalyticsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnalyticsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAnalyticsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AnalyticsReportResponse2
}

// Status returns HTTPResponse.Status
func (r CreateAnalyticsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAnalyticsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnalyticsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnalyticsReportResponse2
}

// Status returns HTTPResponse.Status
func (r GetAnalyticsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnalyticsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ChannelResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelsChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelResponse
}

// Status returns HTTPResponse.Status
func (r GetChannelsChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelsChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchChannelsChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchChannelsChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchChannelsChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChannelsChannelIdDraftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostChannelsChannelIdDraftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChannelsChannelIdDraftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChannelsChannelIdIncomingMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		// Message unique identifier
		MessageUid *string `json:"message_uid,omitempty"`
		Status     *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostChannelsChannelIdIncomingMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChannelsChannelIdIncomingMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChannelsChannelIdMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostChannelsChannelIdMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChannelsChannelIdMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChannelsChannelIdValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostChannelsChannelIdValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChannelsChannelIdValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommentResponse
}

// Status returns HTTPResponse.Status
func (r GetCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentsCommentIdMentionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TeammateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCommentsCommentIdMentionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentsCommentIdMentionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ContactGroupResponses `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactGroupsContactGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContactGroupsContactGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactGroupsContactGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactGroupsContactGroupIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ContactResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactGroupsContactGroupIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactGroupsContactGroupIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactGroupsContactGroupIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostContactGroupsContactGroupIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactGroupsContactGroupIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ContactResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactResponse
}

// Status returns HTTPResponse.Status
func (r PostContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListContactCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]CustomFieldResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListContactCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListContactCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactsContactIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContactsContactIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactsContactIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactsContactIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactResponse
}

// Status returns HTTPResponse.Status
func (r GetContactsContactIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactsContactIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchContactsContactIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchContactsContactIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchContactsContactIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactsContactIdConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ConversationResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactsContactIdConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactsContactIdConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactsContactIdHandlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContactsContactIdHandlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactsContactIdHandlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactsContactIdHandlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostContactsContactIdHandlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactsContactIdHandlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactsContactIdNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Results       *[]ContactNoteResponses `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactsContactIdNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactsContactIdNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactsContactIdNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactNoteResponses
}

// Status returns HTTPResponse.Status
func (r PostContactsContactIdNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactsContactIdNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ConversationResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results *[]ConversationResponse `json:"_results,omitempty"`

		// Total number of matching conversations
		Total *int `json:"_total,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SearchConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationResponse
}

// Status returns HTTPResponse.Status
func (r GetConversationByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConversationsConversationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchConversationsConversationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConversationsConversationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConversationsConversationIdAssigneeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutConversationsConversationIdAssigneeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConversationsConversationIdAssigneeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsConversationIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]CommentResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationsConversationIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsConversationIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConversationsConversationIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CommentResponse
}

// Status returns HTTPResponse.Status
func (r PostConversationsConversationIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConversationsConversationIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsConversationIdDraftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationsConversationIdDraftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsConversationIdDraftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConversationsConversationIdDraftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostConversationsConversationIdDraftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConversationsConversationIdDraftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsConversationIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]EventResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationsConversationIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsConversationIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConversationsConversationIdFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConversationsConversationIdFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConversationsConversationIdFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsConversationIdFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TeammateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationsConversationIdFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsConversationIdFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConversationsConversationIdFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConversationsConversationIdFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConversationsConversationIdFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsConversationIdInboxesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]InboxResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationsConversationIdInboxesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsConversationIdInboxesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConversationsConversationIdLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConversationsConversationIdLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConversationsConversationIdLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConversationsConversationIdLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConversationsConversationIdLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConversationsConversationIdLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsConversationIdMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationsConversationIdMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsConversationIdMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConversationsConversationIdMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostConversationsConversationIdMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConversationsConversationIdMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConversationsConversationIdRemindersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchConversationsConversationIdRemindersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConversationsConversationIdRemindersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConversationsConversationIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConversationsConversationIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConversationsConversationIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConversationsConversationIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConversationsConversationIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConversationsConversationIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]CustomFieldResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCustomFieldsCustomFieldIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchCustomFieldsCustomFieldIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCustomFieldsCustomFieldIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDownloadAttachmentLinkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Attachment
}

// Status returns HTTPResponse.Status
func (r GetDownloadAttachmentLinkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDownloadAttachmentLinkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDraftsDraftIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDraftsDraftIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDraftsDraftIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDraftsMessageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PatchDraftsMessageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDraftsMessageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]EventResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventResponse
}

// Status returns HTTPResponse.Status
func (r GetEventsEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ExportResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetExportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExportResponse
}

// Status returns HTTPResponse.Status
func (r CreateExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExportsExportIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExportResponse
}

// Status returns HTTPResponse.Status
func (r GetExportsExportIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExportsExportIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboxesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]InboxResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInboxesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboxesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInboxesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInboxesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInboxesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboxesInboxIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InboxResponse
}

// Status returns HTTPResponse.Status
func (r GetInboxesInboxIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboxesInboxIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboxesInboxIdChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ChannelResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInboxesInboxIdChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboxesInboxIdChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInboxesInboxIdChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInboxesInboxIdChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInboxesInboxIdChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboxesInboxIdConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ConversationResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInboxesInboxIdConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboxesInboxIdConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportInboxMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		// Message unique identifier
		MessageUid *string `json:"message_uid,omitempty"`
		Status     *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ImportInboxMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportInboxMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInboxesInboxIdTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInboxesInboxIdTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInboxesInboxIdTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboxesInboxIdTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TeammateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInboxesInboxIdTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboxesInboxIdTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInboxesInboxIdTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInboxesInboxIdTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInboxesInboxIdTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]LinkResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LinkResponse
}

// Status returns HTTPResponse.Status
func (r PostLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLinksLinkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkResponse
}

// Status returns HTTPResponse.Status
func (r GetLinksLinkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLinksLinkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLinksLinkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchLinksLinkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLinksLinkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLinkConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ConversationResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListLinkConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLinkConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityResponse
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageTemplateFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMessageTemplateFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageTemplateFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessageTemplateFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageTemplateFolderResponse
}

// Status returns HTTPResponse.Status
func (r PostMessageTemplateFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessageTemplateFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageTemplateFoldersMessageTemplateFolderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		// id of the message template to be deleted
		MessageTemplateFolderId *string `json:"message_template_folder_id,omitempty"`
		Status                  *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteMessageTemplateFoldersMessageTemplateFolderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageTemplateFoldersMessageTemplateFolderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageTemplateFoldersMessageTemplateFolderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageTemplateFolderResponse
}

// Status returns HTTPResponse.Status
func (r GetMessageTemplateFoldersMessageTemplateFolderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageTemplateFoldersMessageTemplateFolderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMessageTemplateFoldersMessageTemplateFolderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageTemplateFolderResponse
}

// Status returns HTTPResponse.Status
func (r PatchMessageTemplateFoldersMessageTemplateFolderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMessageTemplateFoldersMessageTemplateFolderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageTemplateFolderResponse
}

// Status returns HTTPResponse.Status
func (r PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageTemplateResponse
}

// Status returns HTTPResponse.Status
func (r PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMessageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageTemplateResponse
}

// Status returns HTTPResponse.Status
func (r PostMessageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageTemplatesMessageTemplateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMessageTemplatesMessageTemplateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageTemplatesMessageTemplateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageTemplatesMessageTemplateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageTemplateResponse
}

// Status returns HTTPResponse.Status
func (r GetMessageTemplatesMessageTemplateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageTemplatesMessageTemplateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMessageTemplatesMessageTemplateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageTemplateResponse
}

// Status returns HTTPResponse.Status
func (r PatchMessageTemplatesMessageTemplateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMessageTemplatesMessageTemplateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesMessageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r GetMessagesMessageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesMessageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]RuleResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleResponse
}

// Status returns HTTPResponse.Status
func (r GetRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShiftShiftIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShiftResponse
}

// Status returns HTTPResponse.Status
func (r GetShiftShiftIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShiftShiftIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShiftShiftIdTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteShiftShiftIdTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShiftShiftIdTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShiftShiftIdTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TeammateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShiftShiftIdTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShiftShiftIdTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShiftShiftIdTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostShiftShiftIdTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShiftShiftIdTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListShiftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ShiftResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListShiftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListShiftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShiftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShiftResponse
}

// Status returns HTTPResponse.Status
func (r PostShiftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShiftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchShiftsShiftIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchShiftsShiftIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchShiftsShiftIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TagResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagResponse
}

// Status returns HTTPResponse.Status
func (r PostTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResponse
}

// Status returns HTTPResponse.Status
func (r GetTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagIdChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TagResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsTagIdChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagIdChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTagsTagIdChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagResponse
}

// Status returns HTTPResponse.Status
func (r PostTagsTagIdChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTagsTagIdChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagIdConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ConversationResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsTagIdConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagIdConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamTeamIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]RuleResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamTeamIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamTeamIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TeammateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeammateResponse
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTeammatesTeammateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchTeammatesTeammateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTeammatesTeammateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ChannelResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ContactGroupResponses `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeammatesTeammateIdContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTeammatesTeammateIdContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeammatesTeammateIdContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ContactResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeammatesTeammateIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactResponse
}

// Status returns HTTPResponse.Status
func (r PostTeammatesTeammateIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeammatesTeammateIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ConversationResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdInboxesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]InboxResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdInboxesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdInboxesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdMessageTemplateFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdMessageTemplateFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdMessageTemplateFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeammatesTeammateIdMessageTemplateFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageTemplateFolderResponse
}

// Status returns HTTPResponse.Status
func (r PostTeammatesTeammateIdMessageTemplateFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeammatesTeammateIdMessageTemplateFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdMessageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdMessageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdMessageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeammatesTeammateIdMessageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageTemplateResponse
}

// Status returns HTTPResponse.Status
func (r PostTeammatesTeammateIdMessageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeammatesTeammateIdMessageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]RuleResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdShiftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ShiftResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdShiftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdShiftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeammatesTeammateIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TagResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeammatesTeammateIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeammatesTeammateIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeammatesTeammateIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagResponse
}

// Status returns HTTPResponse.Status
func (r PostTeammatesTeammateIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeammatesTeammateIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TeamResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdAnalyticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnalyticsResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdAnalyticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdAnalyticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ChannelResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ContactGroupResponses `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]ContactResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContactResponse
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdExportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExportResponse
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdExportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdExportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdInboxesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]InboxResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdInboxesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdInboxesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdInboxesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdInboxesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdInboxesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdMessageTemplateFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdMessageTemplateFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdMessageTemplateFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdMessageTemplateFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageTemplateFolderResponse
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdMessageTemplateFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdMessageTemplateFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdMessageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			// Link to next page of results
			Next *string `json:"next,omitempty"`
		} `json:"_pagination,omitempty"`
		Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdMessageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdMessageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdMessageTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageTemplateResponse
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdMessageTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdMessageTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdShiftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]ShiftResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdShiftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdShiftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdShiftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShiftResponse
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdShiftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdShiftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsTeamIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results       *[]TagResponse `json:"_results,omitempty"`
		ResourceLinks *struct {
			// Link to resource
			Self *string `json:"self,omitempty"`
		} `json:"resource_links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTeamsTeamIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsTeamIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagResponse
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamsTeamIdTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamsTeamIdTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamsTeamIdTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsTeamIdTeammatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTeamsTeamIdTeammatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsTeamIdTeammatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountsWithResponse request returning *GetAccountsResponse
func (c *ClientWithResponses) GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error) {
	rsp, err := c.GetAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsResponse(rsp)
}

// PostAccountsWithBodyWithResponse request with arbitrary body returning *PostAccountsResponse
func (c *ClientWithResponses) PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsResponse, error) {
	rsp, err := c.PostAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsWithResponse(ctx context.Context, body PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsResponse, error) {
	rsp, err := c.PostAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsResponse(rsp)
}

// DeleteAccountsAccountIdWithResponse request returning *DeleteAccountsAccountIdResponse
func (c *ClientWithResponses) DeleteAccountsAccountIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*DeleteAccountsAccountIdResponse, error) {
	rsp, err := c.DeleteAccountsAccountId(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountsAccountIdResponse(rsp)
}

// GetAccountsAccountIdWithResponse request returning *GetAccountsAccountIdResponse
func (c *ClientWithResponses) GetAccountsAccountIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*GetAccountsAccountIdResponse, error) {
	rsp, err := c.GetAccountsAccountId(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsAccountIdResponse(rsp)
}

// PatchAccountsAccountIdWithBodyWithResponse request with arbitrary body returning *PatchAccountsAccountIdResponse
func (c *ClientWithResponses) PatchAccountsAccountIdWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAccountsAccountIdResponse, error) {
	rsp, err := c.PatchAccountsAccountIdWithBody(ctx, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAccountsAccountIdResponse(rsp)
}

func (c *ClientWithResponses) PatchAccountsAccountIdWithResponse(ctx context.Context, accountId string, body PatchAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAccountsAccountIdResponse, error) {
	rsp, err := c.PatchAccountsAccountId(ctx, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAccountsAccountIdResponse(rsp)
}

// DeleteAccountsAccountIdContactsWithBodyWithResponse request with arbitrary body returning *DeleteAccountsAccountIdContactsResponse
func (c *ClientWithResponses) DeleteAccountsAccountIdContactsWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountsAccountIdContactsResponse, error) {
	rsp, err := c.DeleteAccountsAccountIdContactsWithBody(ctx, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountsAccountIdContactsResponse(rsp)
}

func (c *ClientWithResponses) DeleteAccountsAccountIdContactsWithResponse(ctx context.Context, accountId string, body DeleteAccountsAccountIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountsAccountIdContactsResponse, error) {
	rsp, err := c.DeleteAccountsAccountIdContacts(ctx, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountsAccountIdContactsResponse(rsp)
}

// GetAccountsAccountIdContactsWithResponse request returning *GetAccountsAccountIdContactsResponse
func (c *ClientWithResponses) GetAccountsAccountIdContactsWithResponse(ctx context.Context, accountId string, params *GetAccountsAccountIdContactsParams, reqEditors ...RequestEditorFn) (*GetAccountsAccountIdContactsResponse, error) {
	rsp, err := c.GetAccountsAccountIdContacts(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsAccountIdContactsResponse(rsp)
}

// PostAccountsAccountIdContactsWithBodyWithResponse request with arbitrary body returning *PostAccountsAccountIdContactsResponse
func (c *ClientWithResponses) PostAccountsAccountIdContactsWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsAccountIdContactsResponse, error) {
	rsp, err := c.PostAccountsAccountIdContactsWithBody(ctx, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsAccountIdContactsResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsAccountIdContactsWithResponse(ctx context.Context, accountId string, body PostAccountsAccountIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsAccountIdContactsResponse, error) {
	rsp, err := c.PostAccountsAccountIdContacts(ctx, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsAccountIdContactsResponse(rsp)
}

// GetAnalyticsWithResponse request returning *GetAnalyticsResponse
func (c *ClientWithResponses) GetAnalyticsWithResponse(ctx context.Context, params *GetAnalyticsParams, reqEditors ...RequestEditorFn) (*GetAnalyticsResponse, error) {
	rsp, err := c.GetAnalytics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnalyticsResponse(rsp)
}

// CreateAnalyticsExportWithBodyWithResponse request with arbitrary body returning *CreateAnalyticsExportResponse
func (c *ClientWithResponses) CreateAnalyticsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAnalyticsExportResponse, error) {
	rsp, err := c.CreateAnalyticsExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAnalyticsExportResponse(rsp)
}

func (c *ClientWithResponses) CreateAnalyticsExportWithResponse(ctx context.Context, body CreateAnalyticsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAnalyticsExportResponse, error) {
	rsp, err := c.CreateAnalyticsExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAnalyticsExportResponse(rsp)
}

// GetAnalyticsExportWithResponse request returning *GetAnalyticsExportResponse
func (c *ClientWithResponses) GetAnalyticsExportWithResponse(ctx context.Context, exportId string, reqEditors ...RequestEditorFn) (*GetAnalyticsExportResponse, error) {
	rsp, err := c.GetAnalyticsExport(ctx, exportId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnalyticsExportResponse(rsp)
}

// CreateAnalyticsReportWithBodyWithResponse request with arbitrary body returning *CreateAnalyticsReportResponse
func (c *ClientWithResponses) CreateAnalyticsReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAnalyticsReportResponse, error) {
	rsp, err := c.CreateAnalyticsReportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAnalyticsReportResponse(rsp)
}

func (c *ClientWithResponses) CreateAnalyticsReportWithResponse(ctx context.Context, body CreateAnalyticsReportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAnalyticsReportResponse, error) {
	rsp, err := c.CreateAnalyticsReport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAnalyticsReportResponse(rsp)
}

// GetAnalyticsReportWithResponse request returning *GetAnalyticsReportResponse
func (c *ClientWithResponses) GetAnalyticsReportWithResponse(ctx context.Context, reportUid string, reqEditors ...RequestEditorFn) (*GetAnalyticsReportResponse, error) {
	rsp, err := c.GetAnalyticsReport(ctx, reportUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnalyticsReportResponse(rsp)
}

// GetChannelsWithResponse request returning *GetChannelsResponse
func (c *ClientWithResponses) GetChannelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChannelsResponse, error) {
	rsp, err := c.GetChannels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelsResponse(rsp)
}

// GetChannelsChannelIdWithResponse request returning *GetChannelsChannelIdResponse
func (c *ClientWithResponses) GetChannelsChannelIdWithResponse(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*GetChannelsChannelIdResponse, error) {
	rsp, err := c.GetChannelsChannelId(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelsChannelIdResponse(rsp)
}

// PatchChannelsChannelIdWithBodyWithResponse request with arbitrary body returning *PatchChannelsChannelIdResponse
func (c *ClientWithResponses) PatchChannelsChannelIdWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchChannelsChannelIdResponse, error) {
	rsp, err := c.PatchChannelsChannelIdWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchChannelsChannelIdResponse(rsp)
}

func (c *ClientWithResponses) PatchChannelsChannelIdWithResponse(ctx context.Context, channelId string, body PatchChannelsChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchChannelsChannelIdResponse, error) {
	rsp, err := c.PatchChannelsChannelId(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchChannelsChannelIdResponse(rsp)
}

// PostChannelsChannelIdDraftsWithBodyWithResponse request with arbitrary body returning *PostChannelsChannelIdDraftsResponse
func (c *ClientWithResponses) PostChannelsChannelIdDraftsWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdDraftsResponse, error) {
	rsp, err := c.PostChannelsChannelIdDraftsWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelsChannelIdDraftsResponse(rsp)
}

func (c *ClientWithResponses) PostChannelsChannelIdDraftsWithResponse(ctx context.Context, channelId string, body PostChannelsChannelIdDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdDraftsResponse, error) {
	rsp, err := c.PostChannelsChannelIdDrafts(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelsChannelIdDraftsResponse(rsp)
}

// PostChannelsChannelIdIncomingMessagesWithBodyWithResponse request with arbitrary body returning *PostChannelsChannelIdIncomingMessagesResponse
func (c *ClientWithResponses) PostChannelsChannelIdIncomingMessagesWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdIncomingMessagesResponse, error) {
	rsp, err := c.PostChannelsChannelIdIncomingMessagesWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelsChannelIdIncomingMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostChannelsChannelIdIncomingMessagesWithResponse(ctx context.Context, channelId string, body PostChannelsChannelIdIncomingMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdIncomingMessagesResponse, error) {
	rsp, err := c.PostChannelsChannelIdIncomingMessages(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelsChannelIdIncomingMessagesResponse(rsp)
}

// PostChannelsChannelIdMessagesWithBodyWithResponse request with arbitrary body returning *PostChannelsChannelIdMessagesResponse
func (c *ClientWithResponses) PostChannelsChannelIdMessagesWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdMessagesResponse, error) {
	rsp, err := c.PostChannelsChannelIdMessagesWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelsChannelIdMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostChannelsChannelIdMessagesWithResponse(ctx context.Context, channelId string, body PostChannelsChannelIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdMessagesResponse, error) {
	rsp, err := c.PostChannelsChannelIdMessages(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelsChannelIdMessagesResponse(rsp)
}

// PostChannelsChannelIdValidateWithResponse request returning *PostChannelsChannelIdValidateResponse
func (c *ClientWithResponses) PostChannelsChannelIdValidateWithResponse(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*PostChannelsChannelIdValidateResponse, error) {
	rsp, err := c.PostChannelsChannelIdValidate(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelsChannelIdValidateResponse(rsp)
}

// GetCommentsCommentIdWithResponse request returning *GetCommentsCommentIdResponse
func (c *ClientWithResponses) GetCommentsCommentIdWithResponse(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*GetCommentsCommentIdResponse, error) {
	rsp, err := c.GetCommentsCommentId(ctx, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentsCommentIdResponse(rsp)
}

// GetCommentsCommentIdMentionsWithResponse request returning *GetCommentsCommentIdMentionsResponse
func (c *ClientWithResponses) GetCommentsCommentIdMentionsWithResponse(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*GetCommentsCommentIdMentionsResponse, error) {
	rsp, err := c.GetCommentsCommentIdMentions(ctx, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentsCommentIdMentionsResponse(rsp)
}

// GetContactGroupsWithResponse request returning *GetContactGroupsResponse
func (c *ClientWithResponses) GetContactGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactGroupsResponse, error) {
	rsp, err := c.GetContactGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactGroupsResponse(rsp)
}

// PostContactGroupsWithBodyWithResponse request with arbitrary body returning *PostContactGroupsResponse
func (c *ClientWithResponses) PostContactGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactGroupsResponse, error) {
	rsp, err := c.PostContactGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostContactGroupsWithResponse(ctx context.Context, body PostContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactGroupsResponse, error) {
	rsp, err := c.PostContactGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactGroupsResponse(rsp)
}

// DeleteContactGroupsContactGroupIdWithResponse request returning *DeleteContactGroupsContactGroupIdResponse
func (c *ClientWithResponses) DeleteContactGroupsContactGroupIdWithResponse(ctx context.Context, contactGroupId string, reqEditors ...RequestEditorFn) (*DeleteContactGroupsContactGroupIdResponse, error) {
	rsp, err := c.DeleteContactGroupsContactGroupId(ctx, contactGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactGroupsContactGroupIdResponse(rsp)
}

// GetContactGroupsContactGroupIdContactsWithResponse request returning *GetContactGroupsContactGroupIdContactsResponse
func (c *ClientWithResponses) GetContactGroupsContactGroupIdContactsWithResponse(ctx context.Context, contactGroupId string, params *GetContactGroupsContactGroupIdContactsParams, reqEditors ...RequestEditorFn) (*GetContactGroupsContactGroupIdContactsResponse, error) {
	rsp, err := c.GetContactGroupsContactGroupIdContacts(ctx, contactGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactGroupsContactGroupIdContactsResponse(rsp)
}

// PostContactGroupsContactGroupIdContactsWithBodyWithResponse request with arbitrary body returning *PostContactGroupsContactGroupIdContactsResponse
func (c *ClientWithResponses) PostContactGroupsContactGroupIdContactsWithBodyWithResponse(ctx context.Context, contactGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactGroupsContactGroupIdContactsResponse, error) {
	rsp, err := c.PostContactGroupsContactGroupIdContactsWithBody(ctx, contactGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactGroupsContactGroupIdContactsResponse(rsp)
}

func (c *ClientWithResponses) PostContactGroupsContactGroupIdContactsWithResponse(ctx context.Context, contactGroupId string, body PostContactGroupsContactGroupIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactGroupsContactGroupIdContactsResponse, error) {
	rsp, err := c.PostContactGroupsContactGroupIdContacts(ctx, contactGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactGroupsContactGroupIdContactsResponse(rsp)
}

// GetContactsWithResponse request returning *GetContactsResponse
func (c *ClientWithResponses) GetContactsWithResponse(ctx context.Context, params *GetContactsParams, reqEditors ...RequestEditorFn) (*GetContactsResponse, error) {
	rsp, err := c.GetContacts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsResponse(rsp)
}

// PostContactsWithBodyWithResponse request with arbitrary body returning *PostContactsResponse
func (c *ClientWithResponses) PostContactsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsResponse, error) {
	rsp, err := c.PostContactsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsResponse(rsp)
}

func (c *ClientWithResponses) PostContactsWithResponse(ctx context.Context, body PostContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsResponse, error) {
	rsp, err := c.PostContacts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsResponse(rsp)
}

// ListContactCustomFieldsWithResponse request returning *ListContactCustomFieldsResponse
func (c *ClientWithResponses) ListContactCustomFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListContactCustomFieldsResponse, error) {
	rsp, err := c.ListContactCustomFields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListContactCustomFieldsResponse(rsp)
}

// DeleteContactsContactIdWithResponse request returning *DeleteContactsContactIdResponse
func (c *ClientWithResponses) DeleteContactsContactIdWithResponse(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*DeleteContactsContactIdResponse, error) {
	rsp, err := c.DeleteContactsContactId(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactsContactIdResponse(rsp)
}

// GetContactsContactIdWithResponse request returning *GetContactsContactIdResponse
func (c *ClientWithResponses) GetContactsContactIdWithResponse(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*GetContactsContactIdResponse, error) {
	rsp, err := c.GetContactsContactId(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsContactIdResponse(rsp)
}

// PatchContactsContactIdWithBodyWithResponse request with arbitrary body returning *PatchContactsContactIdResponse
func (c *ClientWithResponses) PatchContactsContactIdWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactsContactIdResponse, error) {
	rsp, err := c.PatchContactsContactIdWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactsContactIdResponse(rsp)
}

func (c *ClientWithResponses) PatchContactsContactIdWithResponse(ctx context.Context, contactId string, body PatchContactsContactIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactsContactIdResponse, error) {
	rsp, err := c.PatchContactsContactId(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactsContactIdResponse(rsp)
}

// GetContactsContactIdConversationsWithResponse request returning *GetContactsContactIdConversationsResponse
func (c *ClientWithResponses) GetContactsContactIdConversationsWithResponse(ctx context.Context, contactId string, params *GetContactsContactIdConversationsParams, reqEditors ...RequestEditorFn) (*GetContactsContactIdConversationsResponse, error) {
	rsp, err := c.GetContactsContactIdConversations(ctx, contactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsContactIdConversationsResponse(rsp)
}

// DeleteContactsContactIdHandlesWithBodyWithResponse request with arbitrary body returning *DeleteContactsContactIdHandlesResponse
func (c *ClientWithResponses) DeleteContactsContactIdHandlesWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteContactsContactIdHandlesResponse, error) {
	rsp, err := c.DeleteContactsContactIdHandlesWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactsContactIdHandlesResponse(rsp)
}

func (c *ClientWithResponses) DeleteContactsContactIdHandlesWithResponse(ctx context.Context, contactId string, body DeleteContactsContactIdHandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteContactsContactIdHandlesResponse, error) {
	rsp, err := c.DeleteContactsContactIdHandles(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactsContactIdHandlesResponse(rsp)
}

// PostContactsContactIdHandlesWithBodyWithResponse request with arbitrary body returning *PostContactsContactIdHandlesResponse
func (c *ClientWithResponses) PostContactsContactIdHandlesWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsContactIdHandlesResponse, error) {
	rsp, err := c.PostContactsContactIdHandlesWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsContactIdHandlesResponse(rsp)
}

func (c *ClientWithResponses) PostContactsContactIdHandlesWithResponse(ctx context.Context, contactId string, body PostContactsContactIdHandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsContactIdHandlesResponse, error) {
	rsp, err := c.PostContactsContactIdHandles(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsContactIdHandlesResponse(rsp)
}

// GetContactsContactIdNotesWithResponse request returning *GetContactsContactIdNotesResponse
func (c *ClientWithResponses) GetContactsContactIdNotesWithResponse(ctx context.Context, contactId string, reqEditors ...RequestEditorFn) (*GetContactsContactIdNotesResponse, error) {
	rsp, err := c.GetContactsContactIdNotes(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsContactIdNotesResponse(rsp)
}

// PostContactsContactIdNotesWithBodyWithResponse request with arbitrary body returning *PostContactsContactIdNotesResponse
func (c *ClientWithResponses) PostContactsContactIdNotesWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsContactIdNotesResponse, error) {
	rsp, err := c.PostContactsContactIdNotesWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsContactIdNotesResponse(rsp)
}

func (c *ClientWithResponses) PostContactsContactIdNotesWithResponse(ctx context.Context, contactId string, body PostContactsContactIdNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsContactIdNotesResponse, error) {
	rsp, err := c.PostContactsContactIdNotes(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsContactIdNotesResponse(rsp)
}

// ListConversationsWithResponse request returning *ListConversationsResponse
func (c *ClientWithResponses) ListConversationsWithResponse(ctx context.Context, params *ListConversationsParams, reqEditors ...RequestEditorFn) (*ListConversationsResponse, error) {
	rsp, err := c.ListConversations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConversationsResponse(rsp)
}

// SearchConversationsWithResponse request returning *SearchConversationsResponse
func (c *ClientWithResponses) SearchConversationsWithResponse(ctx context.Context, query string, params *SearchConversationsParams, reqEditors ...RequestEditorFn) (*SearchConversationsResponse, error) {
	rsp, err := c.SearchConversations(ctx, query, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchConversationsResponse(rsp)
}

// GetConversationByIdWithResponse request returning *GetConversationByIdResponse
func (c *ClientWithResponses) GetConversationByIdWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationByIdResponse, error) {
	rsp, err := c.GetConversationById(ctx, conversationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationByIdResponse(rsp)
}

// PatchConversationsConversationIdWithBodyWithResponse request with arbitrary body returning *PatchConversationsConversationIdResponse
func (c *ClientWithResponses) PatchConversationsConversationIdWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConversationsConversationIdResponse, error) {
	rsp, err := c.PatchConversationsConversationIdWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConversationsConversationIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConversationsConversationIdWithResponse(ctx context.Context, conversationId string, body PatchConversationsConversationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConversationsConversationIdResponse, error) {
	rsp, err := c.PatchConversationsConversationId(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConversationsConversationIdResponse(rsp)
}

// PutConversationsConversationIdAssigneeWithBodyWithResponse request with arbitrary body returning *PutConversationsConversationIdAssigneeResponse
func (c *ClientWithResponses) PutConversationsConversationIdAssigneeWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConversationsConversationIdAssigneeResponse, error) {
	rsp, err := c.PutConversationsConversationIdAssigneeWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConversationsConversationIdAssigneeResponse(rsp)
}

func (c *ClientWithResponses) PutConversationsConversationIdAssigneeWithResponse(ctx context.Context, conversationId string, body PutConversationsConversationIdAssigneeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConversationsConversationIdAssigneeResponse, error) {
	rsp, err := c.PutConversationsConversationIdAssignee(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConversationsConversationIdAssigneeResponse(rsp)
}

// GetConversationsConversationIdCommentsWithResponse request returning *GetConversationsConversationIdCommentsResponse
func (c *ClientWithResponses) GetConversationsConversationIdCommentsWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdCommentsResponse, error) {
	rsp, err := c.GetConversationsConversationIdComments(ctx, conversationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsConversationIdCommentsResponse(rsp)
}

// PostConversationsConversationIdCommentsWithBodyWithResponse request with arbitrary body returning *PostConversationsConversationIdCommentsResponse
func (c *ClientWithResponses) PostConversationsConversationIdCommentsWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdCommentsResponse, error) {
	rsp, err := c.PostConversationsConversationIdCommentsWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdCommentsResponse(rsp)
}

func (c *ClientWithResponses) PostConversationsConversationIdCommentsWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdCommentsResponse, error) {
	rsp, err := c.PostConversationsConversationIdComments(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdCommentsResponse(rsp)
}

// GetConversationsConversationIdDraftsWithResponse request returning *GetConversationsConversationIdDraftsResponse
func (c *ClientWithResponses) GetConversationsConversationIdDraftsWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdDraftsResponse, error) {
	rsp, err := c.GetConversationsConversationIdDrafts(ctx, conversationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsConversationIdDraftsResponse(rsp)
}

// PostConversationsConversationIdDraftsWithBodyWithResponse request with arbitrary body returning *PostConversationsConversationIdDraftsResponse
func (c *ClientWithResponses) PostConversationsConversationIdDraftsWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdDraftsResponse, error) {
	rsp, err := c.PostConversationsConversationIdDraftsWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdDraftsResponse(rsp)
}

func (c *ClientWithResponses) PostConversationsConversationIdDraftsWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdDraftsResponse, error) {
	rsp, err := c.PostConversationsConversationIdDrafts(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdDraftsResponse(rsp)
}

// GetConversationsConversationIdEventsWithResponse request returning *GetConversationsConversationIdEventsResponse
func (c *ClientWithResponses) GetConversationsConversationIdEventsWithResponse(ctx context.Context, conversationId string, params *GetConversationsConversationIdEventsParams, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdEventsResponse, error) {
	rsp, err := c.GetConversationsConversationIdEvents(ctx, conversationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsConversationIdEventsResponse(rsp)
}

// DeleteConversationsConversationIdFollowersWithBodyWithResponse request with arbitrary body returning *DeleteConversationsConversationIdFollowersResponse
func (c *ClientWithResponses) DeleteConversationsConversationIdFollowersWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdFollowersResponse, error) {
	rsp, err := c.DeleteConversationsConversationIdFollowersWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConversationsConversationIdFollowersResponse(rsp)
}

func (c *ClientWithResponses) DeleteConversationsConversationIdFollowersWithResponse(ctx context.Context, conversationId string, body DeleteConversationsConversationIdFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdFollowersResponse, error) {
	rsp, err := c.DeleteConversationsConversationIdFollowers(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConversationsConversationIdFollowersResponse(rsp)
}

// GetConversationsConversationIdFollowersWithResponse request returning *GetConversationsConversationIdFollowersResponse
func (c *ClientWithResponses) GetConversationsConversationIdFollowersWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdFollowersResponse, error) {
	rsp, err := c.GetConversationsConversationIdFollowers(ctx, conversationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsConversationIdFollowersResponse(rsp)
}

// PostConversationsConversationIdFollowersWithBodyWithResponse request with arbitrary body returning *PostConversationsConversationIdFollowersResponse
func (c *ClientWithResponses) PostConversationsConversationIdFollowersWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdFollowersResponse, error) {
	rsp, err := c.PostConversationsConversationIdFollowersWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdFollowersResponse(rsp)
}

func (c *ClientWithResponses) PostConversationsConversationIdFollowersWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdFollowersResponse, error) {
	rsp, err := c.PostConversationsConversationIdFollowers(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdFollowersResponse(rsp)
}

// GetConversationsConversationIdInboxesWithResponse request returning *GetConversationsConversationIdInboxesResponse
func (c *ClientWithResponses) GetConversationsConversationIdInboxesWithResponse(ctx context.Context, conversationId string, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdInboxesResponse, error) {
	rsp, err := c.GetConversationsConversationIdInboxes(ctx, conversationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsConversationIdInboxesResponse(rsp)
}

// DeleteConversationsConversationIdLinksWithBodyWithResponse request with arbitrary body returning *DeleteConversationsConversationIdLinksResponse
func (c *ClientWithResponses) DeleteConversationsConversationIdLinksWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdLinksResponse, error) {
	rsp, err := c.DeleteConversationsConversationIdLinksWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConversationsConversationIdLinksResponse(rsp)
}

func (c *ClientWithResponses) DeleteConversationsConversationIdLinksWithResponse(ctx context.Context, conversationId string, body DeleteConversationsConversationIdLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdLinksResponse, error) {
	rsp, err := c.DeleteConversationsConversationIdLinks(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConversationsConversationIdLinksResponse(rsp)
}

// PostConversationsConversationIdLinksWithBodyWithResponse request with arbitrary body returning *PostConversationsConversationIdLinksResponse
func (c *ClientWithResponses) PostConversationsConversationIdLinksWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdLinksResponse, error) {
	rsp, err := c.PostConversationsConversationIdLinksWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdLinksResponse(rsp)
}

func (c *ClientWithResponses) PostConversationsConversationIdLinksWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdLinksResponse, error) {
	rsp, err := c.PostConversationsConversationIdLinks(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdLinksResponse(rsp)
}

// GetConversationsConversationIdMessagesWithResponse request returning *GetConversationsConversationIdMessagesResponse
func (c *ClientWithResponses) GetConversationsConversationIdMessagesWithResponse(ctx context.Context, conversationId string, params *GetConversationsConversationIdMessagesParams, reqEditors ...RequestEditorFn) (*GetConversationsConversationIdMessagesResponse, error) {
	rsp, err := c.GetConversationsConversationIdMessages(ctx, conversationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsConversationIdMessagesResponse(rsp)
}

// PostConversationsConversationIdMessagesWithBodyWithResponse request with arbitrary body returning *PostConversationsConversationIdMessagesResponse
func (c *ClientWithResponses) PostConversationsConversationIdMessagesWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdMessagesResponse, error) {
	rsp, err := c.PostConversationsConversationIdMessagesWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostConversationsConversationIdMessagesWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdMessagesResponse, error) {
	rsp, err := c.PostConversationsConversationIdMessages(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdMessagesResponse(rsp)
}

// PatchConversationsConversationIdRemindersWithBodyWithResponse request with arbitrary body returning *PatchConversationsConversationIdRemindersResponse
func (c *ClientWithResponses) PatchConversationsConversationIdRemindersWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConversationsConversationIdRemindersResponse, error) {
	rsp, err := c.PatchConversationsConversationIdRemindersWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConversationsConversationIdRemindersResponse(rsp)
}

func (c *ClientWithResponses) PatchConversationsConversationIdRemindersWithResponse(ctx context.Context, conversationId string, body PatchConversationsConversationIdRemindersJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConversationsConversationIdRemindersResponse, error) {
	rsp, err := c.PatchConversationsConversationIdReminders(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConversationsConversationIdRemindersResponse(rsp)
}

// DeleteConversationsConversationIdTagsWithBodyWithResponse request with arbitrary body returning *DeleteConversationsConversationIdTagsResponse
func (c *ClientWithResponses) DeleteConversationsConversationIdTagsWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdTagsResponse, error) {
	rsp, err := c.DeleteConversationsConversationIdTagsWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConversationsConversationIdTagsResponse(rsp)
}

func (c *ClientWithResponses) DeleteConversationsConversationIdTagsWithResponse(ctx context.Context, conversationId string, body DeleteConversationsConversationIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConversationsConversationIdTagsResponse, error) {
	rsp, err := c.DeleteConversationsConversationIdTags(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConversationsConversationIdTagsResponse(rsp)
}

// PostConversationsConversationIdTagsWithBodyWithResponse request with arbitrary body returning *PostConversationsConversationIdTagsResponse
func (c *ClientWithResponses) PostConversationsConversationIdTagsWithBodyWithResponse(ctx context.Context, conversationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdTagsResponse, error) {
	rsp, err := c.PostConversationsConversationIdTagsWithBody(ctx, conversationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdTagsResponse(rsp)
}

func (c *ClientWithResponses) PostConversationsConversationIdTagsWithResponse(ctx context.Context, conversationId string, body PostConversationsConversationIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsConversationIdTagsResponse, error) {
	rsp, err := c.PostConversationsConversationIdTags(ctx, conversationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsConversationIdTagsResponse(rsp)
}

// ListCustomFieldsWithResponse request returning *ListCustomFieldsResponse
func (c *ClientWithResponses) ListCustomFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error) {
	rsp, err := c.ListCustomFields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldsResponse(rsp)
}

// PatchCustomFieldsCustomFieldIdWithBodyWithResponse request with arbitrary body returning *PatchCustomFieldsCustomFieldIdResponse
func (c *ClientWithResponses) PatchCustomFieldsCustomFieldIdWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCustomFieldsCustomFieldIdResponse, error) {
	rsp, err := c.PatchCustomFieldsCustomFieldIdWithBody(ctx, customFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCustomFieldsCustomFieldIdResponse(rsp)
}

func (c *ClientWithResponses) PatchCustomFieldsCustomFieldIdWithResponse(ctx context.Context, customFieldId string, body PatchCustomFieldsCustomFieldIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCustomFieldsCustomFieldIdResponse, error) {
	rsp, err := c.PatchCustomFieldsCustomFieldId(ctx, customFieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCustomFieldsCustomFieldIdResponse(rsp)
}

// GetDownloadAttachmentLinkIdWithResponse request returning *GetDownloadAttachmentLinkIdResponse
func (c *ClientWithResponses) GetDownloadAttachmentLinkIdWithResponse(ctx context.Context, attachmentLinkId string, reqEditors ...RequestEditorFn) (*GetDownloadAttachmentLinkIdResponse, error) {
	rsp, err := c.GetDownloadAttachmentLinkId(ctx, attachmentLinkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDownloadAttachmentLinkIdResponse(rsp)
}

// DeleteDraftsDraftIdWithBodyWithResponse request with arbitrary body returning *DeleteDraftsDraftIdResponse
func (c *ClientWithResponses) DeleteDraftsDraftIdWithBodyWithResponse(ctx context.Context, draftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDraftsDraftIdResponse, error) {
	rsp, err := c.DeleteDraftsDraftIdWithBody(ctx, draftId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDraftsDraftIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteDraftsDraftIdWithResponse(ctx context.Context, draftId string, body DeleteDraftsDraftIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDraftsDraftIdResponse, error) {
	rsp, err := c.DeleteDraftsDraftId(ctx, draftId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDraftsDraftIdResponse(rsp)
}

// PatchDraftsMessageIdWithBodyWithResponse request with arbitrary body returning *PatchDraftsMessageIdResponse
func (c *ClientWithResponses) PatchDraftsMessageIdWithBodyWithResponse(ctx context.Context, messageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDraftsMessageIdResponse, error) {
	rsp, err := c.PatchDraftsMessageIdWithBody(ctx, messageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDraftsMessageIdResponse(rsp)
}

func (c *ClientWithResponses) PatchDraftsMessageIdWithResponse(ctx context.Context, messageId string, body PatchDraftsMessageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDraftsMessageIdResponse, error) {
	rsp, err := c.PatchDraftsMessageId(ctx, messageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDraftsMessageIdResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// GetEventsEventIdWithResponse request returning *GetEventsEventIdResponse
func (c *ClientWithResponses) GetEventsEventIdWithResponse(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*GetEventsEventIdResponse, error) {
	rsp, err := c.GetEventsEventId(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsEventIdResponse(rsp)
}

// GetExportsWithResponse request returning *GetExportsResponse
func (c *ClientWithResponses) GetExportsWithResponse(ctx context.Context, params *GetExportsParams, reqEditors ...RequestEditorFn) (*GetExportsResponse, error) {
	rsp, err := c.GetExports(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExportsResponse(rsp)
}

// CreateExportWithBodyWithResponse request with arbitrary body returning *CreateExportResponse
func (c *ClientWithResponses) CreateExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExportResponse, error) {
	rsp, err := c.CreateExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExportResponse(rsp)
}

func (c *ClientWithResponses) CreateExportWithResponse(ctx context.Context, body CreateExportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExportResponse, error) {
	rsp, err := c.CreateExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExportResponse(rsp)
}

// GetExportsExportIdWithResponse request returning *GetExportsExportIdResponse
func (c *ClientWithResponses) GetExportsExportIdWithResponse(ctx context.Context, exportId string, reqEditors ...RequestEditorFn) (*GetExportsExportIdResponse, error) {
	rsp, err := c.GetExportsExportId(ctx, exportId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExportsExportIdResponse(rsp)
}

// GetInboxesWithResponse request returning *GetInboxesResponse
func (c *ClientWithResponses) GetInboxesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInboxesResponse, error) {
	rsp, err := c.GetInboxes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboxesResponse(rsp)
}

// PostInboxesWithBodyWithResponse request with arbitrary body returning *PostInboxesResponse
func (c *ClientWithResponses) PostInboxesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInboxesResponse, error) {
	rsp, err := c.PostInboxesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInboxesResponse(rsp)
}

func (c *ClientWithResponses) PostInboxesWithResponse(ctx context.Context, body PostInboxesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInboxesResponse, error) {
	rsp, err := c.PostInboxes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInboxesResponse(rsp)
}

// GetInboxesInboxIdWithResponse request returning *GetInboxesInboxIdResponse
func (c *ClientWithResponses) GetInboxesInboxIdWithResponse(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*GetInboxesInboxIdResponse, error) {
	rsp, err := c.GetInboxesInboxId(ctx, inboxId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboxesInboxIdResponse(rsp)
}

// GetInboxesInboxIdChannelsWithResponse request returning *GetInboxesInboxIdChannelsResponse
func (c *ClientWithResponses) GetInboxesInboxIdChannelsWithResponse(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*GetInboxesInboxIdChannelsResponse, error) {
	rsp, err := c.GetInboxesInboxIdChannels(ctx, inboxId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboxesInboxIdChannelsResponse(rsp)
}

// PostInboxesInboxIdChannelsWithBodyWithResponse request with arbitrary body returning *PostInboxesInboxIdChannelsResponse
func (c *ClientWithResponses) PostInboxesInboxIdChannelsWithBodyWithResponse(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInboxesInboxIdChannelsResponse, error) {
	rsp, err := c.PostInboxesInboxIdChannelsWithBody(ctx, inboxId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInboxesInboxIdChannelsResponse(rsp)
}

func (c *ClientWithResponses) PostInboxesInboxIdChannelsWithResponse(ctx context.Context, inboxId string, body PostInboxesInboxIdChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInboxesInboxIdChannelsResponse, error) {
	rsp, err := c.PostInboxesInboxIdChannels(ctx, inboxId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInboxesInboxIdChannelsResponse(rsp)
}

// GetInboxesInboxIdConversationsWithResponse request returning *GetInboxesInboxIdConversationsResponse
func (c *ClientWithResponses) GetInboxesInboxIdConversationsWithResponse(ctx context.Context, inboxId string, params *GetInboxesInboxIdConversationsParams, reqEditors ...RequestEditorFn) (*GetInboxesInboxIdConversationsResponse, error) {
	rsp, err := c.GetInboxesInboxIdConversations(ctx, inboxId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboxesInboxIdConversationsResponse(rsp)
}

// ImportInboxMessageWithBodyWithResponse request with arbitrary body returning *ImportInboxMessageResponse
func (c *ClientWithResponses) ImportInboxMessageWithBodyWithResponse(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportInboxMessageResponse, error) {
	rsp, err := c.ImportInboxMessageWithBody(ctx, inboxId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportInboxMessageResponse(rsp)
}

func (c *ClientWithResponses) ImportInboxMessageWithResponse(ctx context.Context, inboxId string, body ImportInboxMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportInboxMessageResponse, error) {
	rsp, err := c.ImportInboxMessage(ctx, inboxId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportInboxMessageResponse(rsp)
}

// DeleteInboxesInboxIdTeammatesWithBodyWithResponse request with arbitrary body returning *DeleteInboxesInboxIdTeammatesResponse
func (c *ClientWithResponses) DeleteInboxesInboxIdTeammatesWithBodyWithResponse(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteInboxesInboxIdTeammatesResponse, error) {
	rsp, err := c.DeleteInboxesInboxIdTeammatesWithBody(ctx, inboxId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInboxesInboxIdTeammatesResponse(rsp)
}

func (c *ClientWithResponses) DeleteInboxesInboxIdTeammatesWithResponse(ctx context.Context, inboxId string, body DeleteInboxesInboxIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteInboxesInboxIdTeammatesResponse, error) {
	rsp, err := c.DeleteInboxesInboxIdTeammates(ctx, inboxId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInboxesInboxIdTeammatesResponse(rsp)
}

// GetInboxesInboxIdTeammatesWithResponse request returning *GetInboxesInboxIdTeammatesResponse
func (c *ClientWithResponses) GetInboxesInboxIdTeammatesWithResponse(ctx context.Context, inboxId string, reqEditors ...RequestEditorFn) (*GetInboxesInboxIdTeammatesResponse, error) {
	rsp, err := c.GetInboxesInboxIdTeammates(ctx, inboxId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboxesInboxIdTeammatesResponse(rsp)
}

// PostInboxesInboxIdTeammatesWithBodyWithResponse request with arbitrary body returning *PostInboxesInboxIdTeammatesResponse
func (c *ClientWithResponses) PostInboxesInboxIdTeammatesWithBodyWithResponse(ctx context.Context, inboxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInboxesInboxIdTeammatesResponse, error) {
	rsp, err := c.PostInboxesInboxIdTeammatesWithBody(ctx, inboxId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInboxesInboxIdTeammatesResponse(rsp)
}

func (c *ClientWithResponses) PostInboxesInboxIdTeammatesWithResponse(ctx context.Context, inboxId string, body PostInboxesInboxIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInboxesInboxIdTeammatesResponse, error) {
	rsp, err := c.PostInboxesInboxIdTeammates(ctx, inboxId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInboxesInboxIdTeammatesResponse(rsp)
}

// GetLinksWithResponse request returning *GetLinksResponse
func (c *ClientWithResponses) GetLinksWithResponse(ctx context.Context, params *GetLinksParams, reqEditors ...RequestEditorFn) (*GetLinksResponse, error) {
	rsp, err := c.GetLinks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLinksResponse(rsp)
}

// PostLinksWithBodyWithResponse request with arbitrary body returning *PostLinksResponse
func (c *ClientWithResponses) PostLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLinksResponse, error) {
	rsp, err := c.PostLinksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLinksResponse(rsp)
}

func (c *ClientWithResponses) PostLinksWithResponse(ctx context.Context, body PostLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLinksResponse, error) {
	rsp, err := c.PostLinks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLinksResponse(rsp)
}

// GetLinksLinkIdWithResponse request returning *GetLinksLinkIdResponse
func (c *ClientWithResponses) GetLinksLinkIdWithResponse(ctx context.Context, linkId string, reqEditors ...RequestEditorFn) (*GetLinksLinkIdResponse, error) {
	rsp, err := c.GetLinksLinkId(ctx, linkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLinksLinkIdResponse(rsp)
}

// PatchLinksLinkIdWithBodyWithResponse request with arbitrary body returning *PatchLinksLinkIdResponse
func (c *ClientWithResponses) PatchLinksLinkIdWithBodyWithResponse(ctx context.Context, linkId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLinksLinkIdResponse, error) {
	rsp, err := c.PatchLinksLinkIdWithBody(ctx, linkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLinksLinkIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLinksLinkIdWithResponse(ctx context.Context, linkId string, body PatchLinksLinkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLinksLinkIdResponse, error) {
	rsp, err := c.PatchLinksLinkId(ctx, linkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLinksLinkIdResponse(rsp)
}

// ListLinkConversationsWithResponse request returning *ListLinkConversationsResponse
func (c *ClientWithResponses) ListLinkConversationsWithResponse(ctx context.Context, linkId string, params *ListLinkConversationsParams, reqEditors ...RequestEditorFn) (*ListLinkConversationsResponse, error) {
	rsp, err := c.ListLinkConversations(ctx, linkId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLinkConversationsResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// GetMessageTemplateFoldersWithResponse request returning *GetMessageTemplateFoldersResponse
func (c *ClientWithResponses) GetMessageTemplateFoldersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMessageTemplateFoldersResponse, error) {
	rsp, err := c.GetMessageTemplateFolders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageTemplateFoldersResponse(rsp)
}

// PostMessageTemplateFoldersWithBodyWithResponse request with arbitrary body returning *PostMessageTemplateFoldersResponse
func (c *ClientWithResponses) PostMessageTemplateFoldersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersResponse, error) {
	rsp, err := c.PostMessageTemplateFoldersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageTemplateFoldersResponse(rsp)
}

func (c *ClientWithResponses) PostMessageTemplateFoldersWithResponse(ctx context.Context, body PostMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersResponse, error) {
	rsp, err := c.PostMessageTemplateFolders(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageTemplateFoldersResponse(rsp)
}

// DeleteMessageTemplateFoldersMessageTemplateFolderIdWithResponse request returning *DeleteMessageTemplateFoldersMessageTemplateFolderIdResponse
func (c *ClientWithResponses) DeleteMessageTemplateFoldersMessageTemplateFolderIdWithResponse(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*DeleteMessageTemplateFoldersMessageTemplateFolderIdResponse, error) {
	rsp, err := c.DeleteMessageTemplateFoldersMessageTemplateFolderId(ctx, messageTemplateFolderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageTemplateFoldersMessageTemplateFolderIdResponse(rsp)
}

// GetMessageTemplateFoldersMessageTemplateFolderIdWithResponse request returning *GetMessageTemplateFoldersMessageTemplateFolderIdResponse
func (c *ClientWithResponses) GetMessageTemplateFoldersMessageTemplateFolderIdWithResponse(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*GetMessageTemplateFoldersMessageTemplateFolderIdResponse, error) {
	rsp, err := c.GetMessageTemplateFoldersMessageTemplateFolderId(ctx, messageTemplateFolderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageTemplateFoldersMessageTemplateFolderIdResponse(rsp)
}

// PatchMessageTemplateFoldersMessageTemplateFolderIdWithBodyWithResponse request with arbitrary body returning *PatchMessageTemplateFoldersMessageTemplateFolderIdResponse
func (c *ClientWithResponses) PatchMessageTemplateFoldersMessageTemplateFolderIdWithBodyWithResponse(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMessageTemplateFoldersMessageTemplateFolderIdResponse, error) {
	rsp, err := c.PatchMessageTemplateFoldersMessageTemplateFolderIdWithBody(ctx, messageTemplateFolderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMessageTemplateFoldersMessageTemplateFolderIdResponse(rsp)
}

func (c *ClientWithResponses) PatchMessageTemplateFoldersMessageTemplateFolderIdWithResponse(ctx context.Context, messageTemplateFolderId string, body PatchMessageTemplateFoldersMessageTemplateFolderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMessageTemplateFoldersMessageTemplateFolderIdResponse, error) {
	rsp, err := c.PatchMessageTemplateFoldersMessageTemplateFolderId(ctx, messageTemplateFolderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMessageTemplateFoldersMessageTemplateFolderIdResponse(rsp)
}

// GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithResponse request returning *GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse
func (c *ClientWithResponses) GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithResponse(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders(ctx, messageTemplateFolderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse(rsp)
}

// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithBodyWithResponse request with arbitrary body returning *PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse
func (c *ClientWithResponses) PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithBodyWithResponse(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithBody(ctx, messageTemplateFolderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse(rsp)
}

func (c *ClientWithResponses) PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithResponse(ctx context.Context, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFolders(ctx, messageTemplateFolderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse(rsp)
}

// GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithResponse request returning *GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse
func (c *ClientWithResponses) GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithResponse(ctx context.Context, messageTemplateFolderId string, reqEditors ...RequestEditorFn) (*GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse, error) {
	rsp, err := c.GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates(ctx, messageTemplateFolderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse(rsp)
}

// PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithBodyWithResponse request with arbitrary body returning *PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse
func (c *ClientWithResponses) PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithBodyWithResponse(ctx context.Context, messageTemplateFolderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse, error) {
	rsp, err := c.PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithBody(ctx, messageTemplateFolderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse(rsp)
}

func (c *ClientWithResponses) PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithResponse(ctx context.Context, messageTemplateFolderId string, body PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse, error) {
	rsp, err := c.PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplates(ctx, messageTemplateFolderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse(rsp)
}

// GetMessageTemplatesWithResponse request returning *GetMessageTemplatesResponse
func (c *ClientWithResponses) GetMessageTemplatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMessageTemplatesResponse, error) {
	rsp, err := c.GetMessageTemplates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageTemplatesResponse(rsp)
}

// PostMessageTemplatesWithBodyWithResponse request with arbitrary body returning *PostMessageTemplatesResponse
func (c *ClientWithResponses) PostMessageTemplatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageTemplatesResponse, error) {
	rsp, err := c.PostMessageTemplatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageTemplatesResponse(rsp)
}

func (c *ClientWithResponses) PostMessageTemplatesWithResponse(ctx context.Context, body PostMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageTemplatesResponse, error) {
	rsp, err := c.PostMessageTemplates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageTemplatesResponse(rsp)
}

// DeleteMessageTemplatesMessageTemplateIdWithResponse request returning *DeleteMessageTemplatesMessageTemplateIdResponse
func (c *ClientWithResponses) DeleteMessageTemplatesMessageTemplateIdWithResponse(ctx context.Context, messageTemplateId string, reqEditors ...RequestEditorFn) (*DeleteMessageTemplatesMessageTemplateIdResponse, error) {
	rsp, err := c.DeleteMessageTemplatesMessageTemplateId(ctx, messageTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageTemplatesMessageTemplateIdResponse(rsp)
}

// GetMessageTemplatesMessageTemplateIdWithResponse request returning *GetMessageTemplatesMessageTemplateIdResponse
func (c *ClientWithResponses) GetMessageTemplatesMessageTemplateIdWithResponse(ctx context.Context, messageTemplateId string, reqEditors ...RequestEditorFn) (*GetMessageTemplatesMessageTemplateIdResponse, error) {
	rsp, err := c.GetMessageTemplatesMessageTemplateId(ctx, messageTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageTemplatesMessageTemplateIdResponse(rsp)
}

// PatchMessageTemplatesMessageTemplateIdWithBodyWithResponse request with arbitrary body returning *PatchMessageTemplatesMessageTemplateIdResponse
func (c *ClientWithResponses) PatchMessageTemplatesMessageTemplateIdWithBodyWithResponse(ctx context.Context, messageTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMessageTemplatesMessageTemplateIdResponse, error) {
	rsp, err := c.PatchMessageTemplatesMessageTemplateIdWithBody(ctx, messageTemplateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMessageTemplatesMessageTemplateIdResponse(rsp)
}

func (c *ClientWithResponses) PatchMessageTemplatesMessageTemplateIdWithResponse(ctx context.Context, messageTemplateId string, body PatchMessageTemplatesMessageTemplateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMessageTemplatesMessageTemplateIdResponse, error) {
	rsp, err := c.PatchMessageTemplatesMessageTemplateId(ctx, messageTemplateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMessageTemplatesMessageTemplateIdResponse(rsp)
}

// GetMessagesMessageIdWithResponse request returning *GetMessagesMessageIdResponse
func (c *ClientWithResponses) GetMessagesMessageIdWithResponse(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*GetMessagesMessageIdResponse, error) {
	rsp, err := c.GetMessagesMessageId(ctx, messageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesMessageIdResponse(rsp)
}

// GetRulesWithResponse request returning *GetRulesResponse
func (c *ClientWithResponses) GetRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRulesResponse, error) {
	rsp, err := c.GetRules(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRulesResponse(rsp)
}

// GetRulesRuleIdWithResponse request returning *GetRulesRuleIdResponse
func (c *ClientWithResponses) GetRulesRuleIdWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*GetRulesRuleIdResponse, error) {
	rsp, err := c.GetRulesRuleId(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRulesRuleIdResponse(rsp)
}

// GetShiftShiftIdWithResponse request returning *GetShiftShiftIdResponse
func (c *ClientWithResponses) GetShiftShiftIdWithResponse(ctx context.Context, shiftId string, reqEditors ...RequestEditorFn) (*GetShiftShiftIdResponse, error) {
	rsp, err := c.GetShiftShiftId(ctx, shiftId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShiftShiftIdResponse(rsp)
}

// DeleteShiftShiftIdTeammatesWithBodyWithResponse request with arbitrary body returning *DeleteShiftShiftIdTeammatesResponse
func (c *ClientWithResponses) DeleteShiftShiftIdTeammatesWithBodyWithResponse(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteShiftShiftIdTeammatesResponse, error) {
	rsp, err := c.DeleteShiftShiftIdTeammatesWithBody(ctx, shiftId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShiftShiftIdTeammatesResponse(rsp)
}

func (c *ClientWithResponses) DeleteShiftShiftIdTeammatesWithResponse(ctx context.Context, shiftId string, body DeleteShiftShiftIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteShiftShiftIdTeammatesResponse, error) {
	rsp, err := c.DeleteShiftShiftIdTeammates(ctx, shiftId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShiftShiftIdTeammatesResponse(rsp)
}

// GetShiftShiftIdTeammatesWithResponse request returning *GetShiftShiftIdTeammatesResponse
func (c *ClientWithResponses) GetShiftShiftIdTeammatesWithResponse(ctx context.Context, shiftId string, reqEditors ...RequestEditorFn) (*GetShiftShiftIdTeammatesResponse, error) {
	rsp, err := c.GetShiftShiftIdTeammates(ctx, shiftId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShiftShiftIdTeammatesResponse(rsp)
}

// PostShiftShiftIdTeammatesWithBodyWithResponse request with arbitrary body returning *PostShiftShiftIdTeammatesResponse
func (c *ClientWithResponses) PostShiftShiftIdTeammatesWithBodyWithResponse(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShiftShiftIdTeammatesResponse, error) {
	rsp, err := c.PostShiftShiftIdTeammatesWithBody(ctx, shiftId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShiftShiftIdTeammatesResponse(rsp)
}

func (c *ClientWithResponses) PostShiftShiftIdTeammatesWithResponse(ctx context.Context, shiftId string, body PostShiftShiftIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShiftShiftIdTeammatesResponse, error) {
	rsp, err := c.PostShiftShiftIdTeammates(ctx, shiftId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShiftShiftIdTeammatesResponse(rsp)
}

// ListShiftsWithResponse request returning *ListShiftsResponse
func (c *ClientWithResponses) ListShiftsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListShiftsResponse, error) {
	rsp, err := c.ListShifts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListShiftsResponse(rsp)
}

// PostShiftsWithBodyWithResponse request with arbitrary body returning *PostShiftsResponse
func (c *ClientWithResponses) PostShiftsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShiftsResponse, error) {
	rsp, err := c.PostShiftsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShiftsResponse(rsp)
}

func (c *ClientWithResponses) PostShiftsWithResponse(ctx context.Context, body PostShiftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShiftsResponse, error) {
	rsp, err := c.PostShifts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShiftsResponse(rsp)
}

// PatchShiftsShiftIdWithBodyWithResponse request with arbitrary body returning *PatchShiftsShiftIdResponse
func (c *ClientWithResponses) PatchShiftsShiftIdWithBodyWithResponse(ctx context.Context, shiftId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShiftsShiftIdResponse, error) {
	rsp, err := c.PatchShiftsShiftIdWithBody(ctx, shiftId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShiftsShiftIdResponse(rsp)
}

func (c *ClientWithResponses) PatchShiftsShiftIdWithResponse(ctx context.Context, shiftId string, body PatchShiftsShiftIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShiftsShiftIdResponse, error) {
	rsp, err := c.PatchShiftsShiftId(ctx, shiftId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShiftsShiftIdResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// PostTagsWithBodyWithResponse request with arbitrary body returning *PostTagsResponse
func (c *ClientWithResponses) PostTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsResponse, error) {
	rsp, err := c.PostTagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsResponse(rsp)
}

func (c *ClientWithResponses) PostTagsWithResponse(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsResponse, error) {
	rsp, err := c.PostTags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsResponse(rsp)
}

// DeleteTagsTagIdWithResponse request returning *DeleteTagsTagIdResponse
func (c *ClientWithResponses) DeleteTagsTagIdWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*DeleteTagsTagIdResponse, error) {
	rsp, err := c.DeleteTagsTagId(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagsTagIdResponse(rsp)
}

// GetTagsTagIdWithResponse request returning *GetTagsTagIdResponse
func (c *ClientWithResponses) GetTagsTagIdWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*GetTagsTagIdResponse, error) {
	rsp, err := c.GetTagsTagId(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagIdResponse(rsp)
}

// PatchTagsTagIdWithBodyWithResponse request with arbitrary body returning *PatchTagsTagIdResponse
func (c *ClientWithResponses) PatchTagsTagIdWithBodyWithResponse(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error) {
	rsp, err := c.PatchTagsTagIdWithBody(ctx, tagId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTagsTagIdResponse(rsp)
}

func (c *ClientWithResponses) PatchTagsTagIdWithResponse(ctx context.Context, tagId string, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error) {
	rsp, err := c.PatchTagsTagId(ctx, tagId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTagsTagIdResponse(rsp)
}

// GetTagsTagIdChildrenWithResponse request returning *GetTagsTagIdChildrenResponse
func (c *ClientWithResponses) GetTagsTagIdChildrenWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*GetTagsTagIdChildrenResponse, error) {
	rsp, err := c.GetTagsTagIdChildren(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagIdChildrenResponse(rsp)
}

// PostTagsTagIdChildrenWithBodyWithResponse request with arbitrary body returning *PostTagsTagIdChildrenResponse
func (c *ClientWithResponses) PostTagsTagIdChildrenWithBodyWithResponse(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsTagIdChildrenResponse, error) {
	rsp, err := c.PostTagsTagIdChildrenWithBody(ctx, tagId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsTagIdChildrenResponse(rsp)
}

func (c *ClientWithResponses) PostTagsTagIdChildrenWithResponse(ctx context.Context, tagId string, body PostTagsTagIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsTagIdChildrenResponse, error) {
	rsp, err := c.PostTagsTagIdChildren(ctx, tagId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsTagIdChildrenResponse(rsp)
}

// GetTagsTagIdConversationsWithResponse request returning *GetTagsTagIdConversationsResponse
func (c *ClientWithResponses) GetTagsTagIdConversationsWithResponse(ctx context.Context, tagId string, params *GetTagsTagIdConversationsParams, reqEditors ...RequestEditorFn) (*GetTagsTagIdConversationsResponse, error) {
	rsp, err := c.GetTagsTagIdConversations(ctx, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagIdConversationsResponse(rsp)
}

// GetTeamTeamIdRulesWithResponse request returning *GetTeamTeamIdRulesResponse
func (c *ClientWithResponses) GetTeamTeamIdRulesWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamTeamIdRulesResponse, error) {
	rsp, err := c.GetTeamTeamIdRules(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamTeamIdRulesResponse(rsp)
}

// GetTeammatesWithResponse request returning *GetTeammatesResponse
func (c *ClientWithResponses) GetTeammatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTeammatesResponse, error) {
	rsp, err := c.GetTeammates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesResponse(rsp)
}

// GetTeammatesTeammateIdWithResponse request returning *GetTeammatesTeammateIdResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdResponse, error) {
	rsp, err := c.GetTeammatesTeammateId(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdResponse(rsp)
}

// PatchTeammatesTeammateIdWithBodyWithResponse request with arbitrary body returning *PatchTeammatesTeammateIdResponse
func (c *ClientWithResponses) PatchTeammatesTeammateIdWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTeammatesTeammateIdResponse, error) {
	rsp, err := c.PatchTeammatesTeammateIdWithBody(ctx, teammateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTeammatesTeammateIdResponse(rsp)
}

func (c *ClientWithResponses) PatchTeammatesTeammateIdWithResponse(ctx context.Context, teammateId string, body PatchTeammatesTeammateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTeammatesTeammateIdResponse, error) {
	rsp, err := c.PatchTeammatesTeammateId(ctx, teammateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTeammatesTeammateIdResponse(rsp)
}

// GetTeammatesTeammateIdChannelsWithResponse request returning *GetTeammatesTeammateIdChannelsResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdChannelsWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdChannelsResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdChannels(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdChannelsResponse(rsp)
}

// GetTeammatesTeammateIdContactGroupsWithResponse request returning *GetTeammatesTeammateIdContactGroupsResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdContactGroupsWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdContactGroupsResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdContactGroups(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdContactGroupsResponse(rsp)
}

// PostTeammatesTeammateIdContactGroupsWithBodyWithResponse request with arbitrary body returning *PostTeammatesTeammateIdContactGroupsResponse
func (c *ClientWithResponses) PostTeammatesTeammateIdContactGroupsWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdContactGroupsResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdContactGroupsWithBody(ctx, teammateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostTeammatesTeammateIdContactGroupsWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdContactGroupsResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdContactGroups(ctx, teammateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdContactGroupsResponse(rsp)
}

// GetTeammatesTeammateIdContactsWithResponse request returning *GetTeammatesTeammateIdContactsResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdContactsWithResponse(ctx context.Context, teammateId string, params *GetTeammatesTeammateIdContactsParams, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdContactsResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdContacts(ctx, teammateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdContactsResponse(rsp)
}

// PostTeammatesTeammateIdContactsWithBodyWithResponse request with arbitrary body returning *PostTeammatesTeammateIdContactsResponse
func (c *ClientWithResponses) PostTeammatesTeammateIdContactsWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdContactsResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdContactsWithBody(ctx, teammateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdContactsResponse(rsp)
}

func (c *ClientWithResponses) PostTeammatesTeammateIdContactsWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdContactsResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdContacts(ctx, teammateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdContactsResponse(rsp)
}

// GetTeammatesTeammateIdConversationsWithResponse request returning *GetTeammatesTeammateIdConversationsResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdConversationsWithResponse(ctx context.Context, teammateId string, params *GetTeammatesTeammateIdConversationsParams, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdConversationsResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdConversations(ctx, teammateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdConversationsResponse(rsp)
}

// GetTeammatesTeammateIdInboxesWithResponse request returning *GetTeammatesTeammateIdInboxesResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdInboxesWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdInboxesResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdInboxes(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdInboxesResponse(rsp)
}

// GetTeammatesTeammateIdMessageTemplateFoldersWithResponse request returning *GetTeammatesTeammateIdMessageTemplateFoldersResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdMessageTemplateFoldersWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdMessageTemplateFolders(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdMessageTemplateFoldersResponse(rsp)
}

// PostTeammatesTeammateIdMessageTemplateFoldersWithBodyWithResponse request with arbitrary body returning *PostTeammatesTeammateIdMessageTemplateFoldersResponse
func (c *ClientWithResponses) PostTeammatesTeammateIdMessageTemplateFoldersWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdMessageTemplateFoldersWithBody(ctx, teammateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdMessageTemplateFoldersResponse(rsp)
}

func (c *ClientWithResponses) PostTeammatesTeammateIdMessageTemplateFoldersWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdMessageTemplateFolders(ctx, teammateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdMessageTemplateFoldersResponse(rsp)
}

// GetTeammatesTeammateIdMessageTemplatesWithResponse request returning *GetTeammatesTeammateIdMessageTemplatesResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdMessageTemplatesWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdMessageTemplatesResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdMessageTemplates(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdMessageTemplatesResponse(rsp)
}

// PostTeammatesTeammateIdMessageTemplatesWithBodyWithResponse request with arbitrary body returning *PostTeammatesTeammateIdMessageTemplatesResponse
func (c *ClientWithResponses) PostTeammatesTeammateIdMessageTemplatesWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdMessageTemplatesResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdMessageTemplatesWithBody(ctx, teammateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdMessageTemplatesResponse(rsp)
}

func (c *ClientWithResponses) PostTeammatesTeammateIdMessageTemplatesWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdMessageTemplatesResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdMessageTemplates(ctx, teammateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdMessageTemplatesResponse(rsp)
}

// GetTeammatesTeammateIdRulesWithResponse request returning *GetTeammatesTeammateIdRulesResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdRulesWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdRulesResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdRules(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdRulesResponse(rsp)
}

// GetTeammatesTeammateIdShiftsWithResponse request returning *GetTeammatesTeammateIdShiftsResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdShiftsWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdShiftsResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdShifts(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdShiftsResponse(rsp)
}

// GetTeammatesTeammateIdTagsWithResponse request returning *GetTeammatesTeammateIdTagsResponse
func (c *ClientWithResponses) GetTeammatesTeammateIdTagsWithResponse(ctx context.Context, teammateId string, reqEditors ...RequestEditorFn) (*GetTeammatesTeammateIdTagsResponse, error) {
	rsp, err := c.GetTeammatesTeammateIdTags(ctx, teammateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeammatesTeammateIdTagsResponse(rsp)
}

// PostTeammatesTeammateIdTagsWithBodyWithResponse request with arbitrary body returning *PostTeammatesTeammateIdTagsResponse
func (c *ClientWithResponses) PostTeammatesTeammateIdTagsWithBodyWithResponse(ctx context.Context, teammateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdTagsResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdTagsWithBody(ctx, teammateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdTagsResponse(rsp)
}

func (c *ClientWithResponses) PostTeammatesTeammateIdTagsWithResponse(ctx context.Context, teammateId string, body PostTeammatesTeammateIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeammatesTeammateIdTagsResponse, error) {
	rsp, err := c.PostTeammatesTeammateIdTags(ctx, teammateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeammatesTeammateIdTagsResponse(rsp)
}

// GetTeamsWithResponse request returning *GetTeamsResponse
func (c *ClientWithResponses) GetTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error) {
	rsp, err := c.GetTeams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsResponse(rsp)
}

// GetTeamsTeamIdWithResponse request returning *GetTeamsTeamIdResponse
func (c *ClientWithResponses) GetTeamsTeamIdWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdResponse, error) {
	rsp, err := c.GetTeamsTeamId(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdResponse(rsp)
}

// GetTeamsTeamIdAnalyticsWithResponse request returning *GetTeamsTeamIdAnalyticsResponse
func (c *ClientWithResponses) GetTeamsTeamIdAnalyticsWithResponse(ctx context.Context, teamId string, params *GetTeamsTeamIdAnalyticsParams, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdAnalyticsResponse, error) {
	rsp, err := c.GetTeamsTeamIdAnalytics(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdAnalyticsResponse(rsp)
}

// GetTeamsTeamIdChannelsWithResponse request returning *GetTeamsTeamIdChannelsResponse
func (c *ClientWithResponses) GetTeamsTeamIdChannelsWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdChannelsResponse, error) {
	rsp, err := c.GetTeamsTeamIdChannels(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdChannelsResponse(rsp)
}

// GetTeamsTeamIdContactGroupsWithResponse request returning *GetTeamsTeamIdContactGroupsResponse
func (c *ClientWithResponses) GetTeamsTeamIdContactGroupsWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdContactGroupsResponse, error) {
	rsp, err := c.GetTeamsTeamIdContactGroups(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdContactGroupsResponse(rsp)
}

// PostTeamsTeamIdContactGroupsWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdContactGroupsResponse
func (c *ClientWithResponses) PostTeamsTeamIdContactGroupsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdContactGroupsResponse, error) {
	rsp, err := c.PostTeamsTeamIdContactGroupsWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdContactGroupsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdContactGroupsResponse, error) {
	rsp, err := c.PostTeamsTeamIdContactGroups(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdContactGroupsResponse(rsp)
}

// GetTeamsTeamIdContactsWithResponse request returning *GetTeamsTeamIdContactsResponse
func (c *ClientWithResponses) GetTeamsTeamIdContactsWithResponse(ctx context.Context, teamId string, params *GetTeamsTeamIdContactsParams, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdContactsResponse, error) {
	rsp, err := c.GetTeamsTeamIdContacts(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdContactsResponse(rsp)
}

// PostTeamsTeamIdContactsWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdContactsResponse
func (c *ClientWithResponses) PostTeamsTeamIdContactsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdContactsResponse, error) {
	rsp, err := c.PostTeamsTeamIdContactsWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdContactsResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdContactsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdContactsResponse, error) {
	rsp, err := c.PostTeamsTeamIdContacts(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdContactsResponse(rsp)
}

// PostTeamsTeamIdExportsWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdExportsResponse
func (c *ClientWithResponses) PostTeamsTeamIdExportsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdExportsResponse, error) {
	rsp, err := c.PostTeamsTeamIdExportsWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdExportsResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdExportsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdExportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdExportsResponse, error) {
	rsp, err := c.PostTeamsTeamIdExports(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdExportsResponse(rsp)
}

// GetTeamsTeamIdInboxesWithResponse request returning *GetTeamsTeamIdInboxesResponse
func (c *ClientWithResponses) GetTeamsTeamIdInboxesWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdInboxesResponse, error) {
	rsp, err := c.GetTeamsTeamIdInboxes(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdInboxesResponse(rsp)
}

// PostTeamsTeamIdInboxesWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdInboxesResponse
func (c *ClientWithResponses) PostTeamsTeamIdInboxesWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdInboxesResponse, error) {
	rsp, err := c.PostTeamsTeamIdInboxesWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdInboxesResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdInboxesWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdInboxesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdInboxesResponse, error) {
	rsp, err := c.PostTeamsTeamIdInboxes(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdInboxesResponse(rsp)
}

// GetTeamsTeamIdMessageTemplateFoldersWithResponse request returning *GetTeamsTeamIdMessageTemplateFoldersResponse
func (c *ClientWithResponses) GetTeamsTeamIdMessageTemplateFoldersWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.GetTeamsTeamIdMessageTemplateFolders(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdMessageTemplateFoldersResponse(rsp)
}

// PostTeamsTeamIdMessageTemplateFoldersWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdMessageTemplateFoldersResponse
func (c *ClientWithResponses) PostTeamsTeamIdMessageTemplateFoldersWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.PostTeamsTeamIdMessageTemplateFoldersWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdMessageTemplateFoldersResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdMessageTemplateFoldersWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdMessageTemplateFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdMessageTemplateFoldersResponse, error) {
	rsp, err := c.PostTeamsTeamIdMessageTemplateFolders(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdMessageTemplateFoldersResponse(rsp)
}

// GetTeamsTeamIdMessageTemplatesWithResponse request returning *GetTeamsTeamIdMessageTemplatesResponse
func (c *ClientWithResponses) GetTeamsTeamIdMessageTemplatesWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdMessageTemplatesResponse, error) {
	rsp, err := c.GetTeamsTeamIdMessageTemplates(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdMessageTemplatesResponse(rsp)
}

// PostTeamsTeamIdMessageTemplatesWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdMessageTemplatesResponse
func (c *ClientWithResponses) PostTeamsTeamIdMessageTemplatesWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdMessageTemplatesResponse, error) {
	rsp, err := c.PostTeamsTeamIdMessageTemplatesWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdMessageTemplatesResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdMessageTemplatesWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdMessageTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdMessageTemplatesResponse, error) {
	rsp, err := c.PostTeamsTeamIdMessageTemplates(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdMessageTemplatesResponse(rsp)
}

// GetTeamsTeamIdShiftsWithResponse request returning *GetTeamsTeamIdShiftsResponse
func (c *ClientWithResponses) GetTeamsTeamIdShiftsWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdShiftsResponse, error) {
	rsp, err := c.GetTeamsTeamIdShifts(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdShiftsResponse(rsp)
}

// PostTeamsTeamIdShiftsWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdShiftsResponse
func (c *ClientWithResponses) PostTeamsTeamIdShiftsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdShiftsResponse, error) {
	rsp, err := c.PostTeamsTeamIdShiftsWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdShiftsResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdShiftsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdShiftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdShiftsResponse, error) {
	rsp, err := c.PostTeamsTeamIdShifts(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdShiftsResponse(rsp)
}

// GetTeamsTeamIdTagsWithResponse request returning *GetTeamsTeamIdTagsResponse
func (c *ClientWithResponses) GetTeamsTeamIdTagsWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamsTeamIdTagsResponse, error) {
	rsp, err := c.GetTeamsTeamIdTags(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsTeamIdTagsResponse(rsp)
}

// PostTeamsTeamIdTagsWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdTagsResponse
func (c *ClientWithResponses) PostTeamsTeamIdTagsWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdTagsResponse, error) {
	rsp, err := c.PostTeamsTeamIdTagsWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdTagsResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdTagsWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdTagsResponse, error) {
	rsp, err := c.PostTeamsTeamIdTags(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdTagsResponse(rsp)
}

// DeleteTeamsTeamIdTeammatesWithBodyWithResponse request with arbitrary body returning *DeleteTeamsTeamIdTeammatesResponse
func (c *ClientWithResponses) DeleteTeamsTeamIdTeammatesWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTeamsTeamIdTeammatesResponse, error) {
	rsp, err := c.DeleteTeamsTeamIdTeammatesWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamsTeamIdTeammatesResponse(rsp)
}

func (c *ClientWithResponses) DeleteTeamsTeamIdTeammatesWithResponse(ctx context.Context, teamId string, body DeleteTeamsTeamIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTeamsTeamIdTeammatesResponse, error) {
	rsp, err := c.DeleteTeamsTeamIdTeammates(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamsTeamIdTeammatesResponse(rsp)
}

// PostTeamsTeamIdTeammatesWithBodyWithResponse request with arbitrary body returning *PostTeamsTeamIdTeammatesResponse
func (c *ClientWithResponses) PostTeamsTeamIdTeammatesWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdTeammatesResponse, error) {
	rsp, err := c.PostTeamsTeamIdTeammatesWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdTeammatesResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsTeamIdTeammatesWithResponse(ctx context.Context, teamId string, body PostTeamsTeamIdTeammatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsTeamIdTeammatesResponse, error) {
	rsp, err := c.PostTeamsTeamIdTeammates(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsTeamIdTeammatesResponse(rsp)
}

// ParseGetAccountsResponse parses an HTTP response from a GetAccountsWithResponse call
func ParseGetAccountsResponse(rsp *http.Response) (*GetAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]AccountResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccountsResponse parses an HTTP response from a PostAccountsWithResponse call
func ParsePostAccountsResponse(rsp *http.Response) (*PostAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAccountsAccountIdResponse parses an HTTP response from a DeleteAccountsAccountIdWithResponse call
func ParseDeleteAccountsAccountIdResponse(rsp *http.Response) (*DeleteAccountsAccountIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountsAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountsAccountIdResponse parses an HTTP response from a GetAccountsAccountIdWithResponse call
func ParseGetAccountsAccountIdResponse(rsp *http.Response) (*GetAccountsAccountIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAccountsAccountIdResponse parses an HTTP response from a PatchAccountsAccountIdWithResponse call
func ParsePatchAccountsAccountIdResponse(rsp *http.Response) (*PatchAccountsAccountIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAccountsAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccountsAccountIdContactsResponse parses an HTTP response from a DeleteAccountsAccountIdContactsWithResponse call
func ParseDeleteAccountsAccountIdContactsResponse(rsp *http.Response) (*DeleteAccountsAccountIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountsAccountIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountsAccountIdContactsResponse parses an HTTP response from a GetAccountsAccountIdContactsWithResponse call
func ParseGetAccountsAccountIdContactsResponse(rsp *http.Response) (*GetAccountsAccountIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsAccountIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ContactResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccountsAccountIdContactsResponse parses an HTTP response from a PostAccountsAccountIdContactsWithResponse call
func ParsePostAccountsAccountIdContactsResponse(rsp *http.Response) (*PostAccountsAccountIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsAccountIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAnalyticsResponse parses an HTTP response from a GetAnalyticsWithResponse call
func ParseGetAnalyticsResponse(rsp *http.Response) (*GetAnalyticsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnalyticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnalyticsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAnalyticsExportResponse parses an HTTP response from a CreateAnalyticsExportWithResponse call
func ParseCreateAnalyticsExportResponse(rsp *http.Response) (*CreateAnalyticsExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAnalyticsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AnalyticsExportResponse2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAnalyticsExportResponse parses an HTTP response from a GetAnalyticsExportWithResponse call
func ParseGetAnalyticsExportResponse(rsp *http.Response) (*GetAnalyticsExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnalyticsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnalyticsExportResponse2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAnalyticsReportResponse parses an HTTP response from a CreateAnalyticsReportWithResponse call
func ParseCreateAnalyticsReportResponse(rsp *http.Response) (*CreateAnalyticsReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAnalyticsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AnalyticsReportResponse2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAnalyticsReportResponse parses an HTTP response from a GetAnalyticsReportWithResponse call
func ParseGetAnalyticsReportResponse(rsp *http.Response) (*GetAnalyticsReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnalyticsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnalyticsReportResponse2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelsResponse parses an HTTP response from a GetChannelsWithResponse call
func ParseGetChannelsResponse(rsp *http.Response) (*GetChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ChannelResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelsChannelIdResponse parses an HTTP response from a GetChannelsChannelIdWithResponse call
func ParseGetChannelsChannelIdResponse(rsp *http.Response) (*GetChannelsChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelsChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchChannelsChannelIdResponse parses an HTTP response from a PatchChannelsChannelIdWithResponse call
func ParsePatchChannelsChannelIdResponse(rsp *http.Response) (*PatchChannelsChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchChannelsChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostChannelsChannelIdDraftsResponse parses an HTTP response from a PostChannelsChannelIdDraftsWithResponse call
func ParsePostChannelsChannelIdDraftsResponse(rsp *http.Response) (*PostChannelsChannelIdDraftsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChannelsChannelIdDraftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChannelsChannelIdIncomingMessagesResponse parses an HTTP response from a PostChannelsChannelIdIncomingMessagesWithResponse call
func ParsePostChannelsChannelIdIncomingMessagesResponse(rsp *http.Response) (*PostChannelsChannelIdIncomingMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChannelsChannelIdIncomingMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			// Message unique identifier
			MessageUid *string `json:"message_uid,omitempty"`
			Status     *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParsePostChannelsChannelIdMessagesResponse parses an HTTP response from a PostChannelsChannelIdMessagesWithResponse call
func ParsePostChannelsChannelIdMessagesResponse(rsp *http.Response) (*PostChannelsChannelIdMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChannelsChannelIdMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParsePostChannelsChannelIdValidateResponse parses an HTTP response from a PostChannelsChannelIdValidateWithResponse call
func ParsePostChannelsChannelIdValidateResponse(rsp *http.Response) (*PostChannelsChannelIdValidateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChannelsChannelIdValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetCommentsCommentIdResponse parses an HTTP response from a GetCommentsCommentIdWithResponse call
func ParseGetCommentsCommentIdResponse(rsp *http.Response) (*GetCommentsCommentIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommentsCommentIdMentionsResponse parses an HTTP response from a GetCommentsCommentIdMentionsWithResponse call
func ParseGetCommentsCommentIdMentionsResponse(rsp *http.Response) (*GetCommentsCommentIdMentionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommentsCommentIdMentionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TeammateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactGroupsResponse parses an HTTP response from a GetContactGroupsWithResponse call
func ParseGetContactGroupsResponse(rsp *http.Response) (*GetContactGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ContactGroupResponses `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContactGroupsResponse parses an HTTP response from a PostContactGroupsWithResponse call
func ParsePostContactGroupsResponse(rsp *http.Response) (*PostContactGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteContactGroupsContactGroupIdResponse parses an HTTP response from a DeleteContactGroupsContactGroupIdWithResponse call
func ParseDeleteContactGroupsContactGroupIdResponse(rsp *http.Response) (*DeleteContactGroupsContactGroupIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactGroupsContactGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactGroupsContactGroupIdContactsResponse parses an HTTP response from a GetContactGroupsContactGroupIdContactsWithResponse call
func ParseGetContactGroupsContactGroupIdContactsResponse(rsp *http.Response) (*GetContactGroupsContactGroupIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactGroupsContactGroupIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ContactResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContactGroupsContactGroupIdContactsResponse parses an HTTP response from a PostContactGroupsContactGroupIdContactsWithResponse call
func ParsePostContactGroupsContactGroupIdContactsResponse(rsp *http.Response) (*PostContactGroupsContactGroupIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactGroupsContactGroupIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactsResponse parses an HTTP response from a GetContactsWithResponse call
func ParseGetContactsResponse(rsp *http.Response) (*GetContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ContactResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContactsResponse parses an HTTP response from a PostContactsWithResponse call
func ParsePostContactsResponse(rsp *http.Response) (*PostContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListContactCustomFieldsResponse parses an HTTP response from a ListContactCustomFieldsWithResponse call
func ParseListContactCustomFieldsResponse(rsp *http.Response) (*ListContactCustomFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListContactCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]CustomFieldResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactsContactIdResponse parses an HTTP response from a DeleteContactsContactIdWithResponse call
func ParseDeleteContactsContactIdResponse(rsp *http.Response) (*DeleteContactsContactIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactsContactIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactsContactIdResponse parses an HTTP response from a GetContactsContactIdWithResponse call
func ParseGetContactsContactIdResponse(rsp *http.Response) (*GetContactsContactIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactsContactIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePatchContactsContactIdResponse parses an HTTP response from a PatchContactsContactIdWithResponse call
func ParsePatchContactsContactIdResponse(rsp *http.Response) (*PatchContactsContactIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchContactsContactIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactsContactIdConversationsResponse parses an HTTP response from a GetContactsContactIdConversationsWithResponse call
func ParseGetContactsContactIdConversationsResponse(rsp *http.Response) (*GetContactsContactIdConversationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactsContactIdConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ConversationResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactsContactIdHandlesResponse parses an HTTP response from a DeleteContactsContactIdHandlesWithResponse call
func ParseDeleteContactsContactIdHandlesResponse(rsp *http.Response) (*DeleteContactsContactIdHandlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactsContactIdHandlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostContactsContactIdHandlesResponse parses an HTTP response from a PostContactsContactIdHandlesWithResponse call
func ParsePostContactsContactIdHandlesResponse(rsp *http.Response) (*PostContactsContactIdHandlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactsContactIdHandlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactsContactIdNotesResponse parses an HTTP response from a GetContactsContactIdNotesWithResponse call
func ParseGetContactsContactIdNotesResponse(rsp *http.Response) (*GetContactsContactIdNotesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactsContactIdNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Results       *[]ContactNoteResponses `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParsePostContactsContactIdNotesResponse parses an HTTP response from a PostContactsContactIdNotesWithResponse call
func ParsePostContactsContactIdNotesResponse(rsp *http.Response) (*PostContactsContactIdNotesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactsContactIdNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactNoteResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListConversationsResponse parses an HTTP response from a ListConversationsWithResponse call
func ParseListConversationsResponse(rsp *http.Response) (*ListConversationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ConversationResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchConversationsResponse parses an HTTP response from a SearchConversationsWithResponse call
func ParseSearchConversationsResponse(rsp *http.Response) (*SearchConversationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results *[]ConversationResponse `json:"_results,omitempty"`

			// Total number of matching conversations
			Total *int `json:"_total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConversationByIdResponse parses an HTTP response from a GetConversationByIdWithResponse call
func ParseGetConversationByIdResponse(rsp *http.Response) (*GetConversationByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConversationsConversationIdResponse parses an HTTP response from a PatchConversationsConversationIdWithResponse call
func ParsePatchConversationsConversationIdResponse(rsp *http.Response) (*PatchConversationsConversationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConversationsConversationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutConversationsConversationIdAssigneeResponse parses an HTTP response from a PutConversationsConversationIdAssigneeWithResponse call
func ParsePutConversationsConversationIdAssigneeResponse(rsp *http.Response) (*PutConversationsConversationIdAssigneeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConversationsConversationIdAssigneeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConversationsConversationIdCommentsResponse parses an HTTP response from a GetConversationsConversationIdCommentsWithResponse call
func ParseGetConversationsConversationIdCommentsResponse(rsp *http.Response) (*GetConversationsConversationIdCommentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsConversationIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]CommentResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConversationsConversationIdCommentsResponse parses an HTTP response from a PostConversationsConversationIdCommentsWithResponse call
func ParsePostConversationsConversationIdCommentsResponse(rsp *http.Response) (*PostConversationsConversationIdCommentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConversationsConversationIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CommentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetConversationsConversationIdDraftsResponse parses an HTTP response from a GetConversationsConversationIdDraftsWithResponse call
func ParseGetConversationsConversationIdDraftsResponse(rsp *http.Response) (*GetConversationsConversationIdDraftsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsConversationIdDraftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConversationsConversationIdDraftsResponse parses an HTTP response from a PostConversationsConversationIdDraftsWithResponse call
func ParsePostConversationsConversationIdDraftsResponse(rsp *http.Response) (*PostConversationsConversationIdDraftsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConversationsConversationIdDraftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConversationsConversationIdEventsResponse parses an HTTP response from a GetConversationsConversationIdEventsWithResponse call
func ParseGetConversationsConversationIdEventsResponse(rsp *http.Response) (*GetConversationsConversationIdEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsConversationIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]EventResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConversationsConversationIdFollowersResponse parses an HTTP response from a DeleteConversationsConversationIdFollowersWithResponse call
func ParseDeleteConversationsConversationIdFollowersResponse(rsp *http.Response) (*DeleteConversationsConversationIdFollowersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConversationsConversationIdFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConversationsConversationIdFollowersResponse parses an HTTP response from a GetConversationsConversationIdFollowersWithResponse call
func ParseGetConversationsConversationIdFollowersResponse(rsp *http.Response) (*GetConversationsConversationIdFollowersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsConversationIdFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TeammateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConversationsConversationIdFollowersResponse parses an HTTP response from a PostConversationsConversationIdFollowersWithResponse call
func ParsePostConversationsConversationIdFollowersResponse(rsp *http.Response) (*PostConversationsConversationIdFollowersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConversationsConversationIdFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConversationsConversationIdInboxesResponse parses an HTTP response from a GetConversationsConversationIdInboxesWithResponse call
func ParseGetConversationsConversationIdInboxesResponse(rsp *http.Response) (*GetConversationsConversationIdInboxesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsConversationIdInboxesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]InboxResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConversationsConversationIdLinksResponse parses an HTTP response from a DeleteConversationsConversationIdLinksWithResponse call
func ParseDeleteConversationsConversationIdLinksResponse(rsp *http.Response) (*DeleteConversationsConversationIdLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConversationsConversationIdLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConversationsConversationIdLinksResponse parses an HTTP response from a PostConversationsConversationIdLinksWithResponse call
func ParsePostConversationsConversationIdLinksResponse(rsp *http.Response) (*PostConversationsConversationIdLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConversationsConversationIdLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConversationsConversationIdMessagesResponse parses an HTTP response from a GetConversationsConversationIdMessagesWithResponse call
func ParseGetConversationsConversationIdMessagesResponse(rsp *http.Response) (*GetConversationsConversationIdMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsConversationIdMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConversationsConversationIdMessagesResponse parses an HTTP response from a PostConversationsConversationIdMessagesWithResponse call
func ParsePostConversationsConversationIdMessagesResponse(rsp *http.Response) (*PostConversationsConversationIdMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConversationsConversationIdMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParsePatchConversationsConversationIdRemindersResponse parses an HTTP response from a PatchConversationsConversationIdRemindersWithResponse call
func ParsePatchConversationsConversationIdRemindersResponse(rsp *http.Response) (*PatchConversationsConversationIdRemindersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConversationsConversationIdRemindersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteConversationsConversationIdTagsResponse parses an HTTP response from a DeleteConversationsConversationIdTagsWithResponse call
func ParseDeleteConversationsConversationIdTagsResponse(rsp *http.Response) (*DeleteConversationsConversationIdTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConversationsConversationIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConversationsConversationIdTagsResponse parses an HTTP response from a PostConversationsConversationIdTagsWithResponse call
func ParsePostConversationsConversationIdTagsResponse(rsp *http.Response) (*PostConversationsConversationIdTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConversationsConversationIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldsResponse parses an HTTP response from a ListCustomFieldsWithResponse call
func ParseListCustomFieldsResponse(rsp *http.Response) (*ListCustomFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]CustomFieldResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCustomFieldsCustomFieldIdResponse parses an HTTP response from a PatchCustomFieldsCustomFieldIdWithResponse call
func ParsePatchCustomFieldsCustomFieldIdResponse(rsp *http.Response) (*PatchCustomFieldsCustomFieldIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCustomFieldsCustomFieldIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDownloadAttachmentLinkIdResponse parses an HTTP response from a GetDownloadAttachmentLinkIdWithResponse call
func ParseGetDownloadAttachmentLinkIdResponse(rsp *http.Response) (*GetDownloadAttachmentLinkIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDownloadAttachmentLinkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Attachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDraftsDraftIdResponse parses an HTTP response from a DeleteDraftsDraftIdWithResponse call
func ParseDeleteDraftsDraftIdResponse(rsp *http.Response) (*DeleteDraftsDraftIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDraftsDraftIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchDraftsMessageIdResponse parses an HTTP response from a PatchDraftsMessageIdWithResponse call
func ParsePatchDraftsMessageIdResponse(rsp *http.Response) (*PatchDraftsMessageIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDraftsMessageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]EventResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEventsEventIdResponse parses an HTTP response from a GetEventsEventIdWithResponse call
func ParseGetEventsEventIdResponse(rsp *http.Response) (*GetEventsEventIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExportsResponse parses an HTTP response from a GetExportsWithResponse call
func ParseGetExportsResponse(rsp *http.Response) (*GetExportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ExportResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateExportResponse parses an HTTP response from a CreateExportWithResponse call
func ParseCreateExportResponse(rsp *http.Response) (*CreateExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetExportsExportIdResponse parses an HTTP response from a GetExportsExportIdWithResponse call
func ParseGetExportsExportIdResponse(rsp *http.Response) (*GetExportsExportIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExportsExportIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInboxesResponse parses an HTTP response from a GetInboxesWithResponse call
func ParseGetInboxesResponse(rsp *http.Response) (*GetInboxesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboxesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]InboxResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInboxesResponse parses an HTTP response from a PostInboxesWithResponse call
func ParsePostInboxesResponse(rsp *http.Response) (*PostInboxesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInboxesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInboxesInboxIdResponse parses an HTTP response from a GetInboxesInboxIdWithResponse call
func ParseGetInboxesInboxIdResponse(rsp *http.Response) (*GetInboxesInboxIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboxesInboxIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InboxResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInboxesInboxIdChannelsResponse parses an HTTP response from a GetInboxesInboxIdChannelsWithResponse call
func ParseGetInboxesInboxIdChannelsResponse(rsp *http.Response) (*GetInboxesInboxIdChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboxesInboxIdChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ChannelResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInboxesInboxIdChannelsResponse parses an HTTP response from a PostInboxesInboxIdChannelsWithResponse call
func ParsePostInboxesInboxIdChannelsResponse(rsp *http.Response) (*PostInboxesInboxIdChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInboxesInboxIdChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInboxesInboxIdConversationsResponse parses an HTTP response from a GetInboxesInboxIdConversationsWithResponse call
func ParseGetInboxesInboxIdConversationsResponse(rsp *http.Response) (*GetInboxesInboxIdConversationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboxesInboxIdConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ConversationResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportInboxMessageResponse parses an HTTP response from a ImportInboxMessageWithResponse call
func ParseImportInboxMessageResponse(rsp *http.Response) (*ImportInboxMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportInboxMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			// Message unique identifier
			MessageUid *string `json:"message_uid,omitempty"`
			Status     *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDeleteInboxesInboxIdTeammatesResponse parses an HTTP response from a DeleteInboxesInboxIdTeammatesWithResponse call
func ParseDeleteInboxesInboxIdTeammatesResponse(rsp *http.Response) (*DeleteInboxesInboxIdTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInboxesInboxIdTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInboxesInboxIdTeammatesResponse parses an HTTP response from a GetInboxesInboxIdTeammatesWithResponse call
func ParseGetInboxesInboxIdTeammatesResponse(rsp *http.Response) (*GetInboxesInboxIdTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboxesInboxIdTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TeammateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInboxesInboxIdTeammatesResponse parses an HTTP response from a PostInboxesInboxIdTeammatesWithResponse call
func ParsePostInboxesInboxIdTeammatesResponse(rsp *http.Response) (*PostInboxesInboxIdTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInboxesInboxIdTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLinksResponse parses an HTTP response from a GetLinksWithResponse call
func ParseGetLinksResponse(rsp *http.Response) (*GetLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]LinkResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLinksResponse parses an HTTP response from a PostLinksWithResponse call
func ParsePostLinksResponse(rsp *http.Response) (*PostLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LinkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetLinksLinkIdResponse parses an HTTP response from a GetLinksLinkIdWithResponse call
func ParseGetLinksLinkIdResponse(rsp *http.Response) (*GetLinksLinkIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLinksLinkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchLinksLinkIdResponse parses an HTTP response from a PatchLinksLinkIdWithResponse call
func ParsePatchLinksLinkIdResponse(rsp *http.Response) (*PatchLinksLinkIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLinksLinkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListLinkConversationsResponse parses an HTTP response from a ListLinkConversationsWithResponse call
func ParseListLinkConversationsResponse(rsp *http.Response) (*ListLinkConversationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLinkConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ConversationResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessageTemplateFoldersResponse parses an HTTP response from a GetMessageTemplateFoldersWithResponse call
func ParseGetMessageTemplateFoldersResponse(rsp *http.Response) (*GetMessageTemplateFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageTemplateFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMessageTemplateFoldersResponse parses an HTTP response from a PostMessageTemplateFoldersWithResponse call
func ParsePostMessageTemplateFoldersResponse(rsp *http.Response) (*PostMessageTemplateFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessageTemplateFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageTemplateFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteMessageTemplateFoldersMessageTemplateFolderIdResponse parses an HTTP response from a DeleteMessageTemplateFoldersMessageTemplateFolderIdWithResponse call
func ParseDeleteMessageTemplateFoldersMessageTemplateFolderIdResponse(rsp *http.Response) (*DeleteMessageTemplateFoldersMessageTemplateFolderIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageTemplateFoldersMessageTemplateFolderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			// id of the message template to be deleted
			MessageTemplateFolderId *string `json:"message_template_folder_id,omitempty"`
			Status                  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetMessageTemplateFoldersMessageTemplateFolderIdResponse parses an HTTP response from a GetMessageTemplateFoldersMessageTemplateFolderIdWithResponse call
func ParseGetMessageTemplateFoldersMessageTemplateFolderIdResponse(rsp *http.Response) (*GetMessageTemplateFoldersMessageTemplateFolderIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageTemplateFoldersMessageTemplateFolderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageTemplateFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchMessageTemplateFoldersMessageTemplateFolderIdResponse parses an HTTP response from a PatchMessageTemplateFoldersMessageTemplateFolderIdWithResponse call
func ParsePatchMessageTemplateFoldersMessageTemplateFolderIdResponse(rsp *http.Response) (*PatchMessageTemplateFoldersMessageTemplateFolderIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMessageTemplateFoldersMessageTemplateFolderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageTemplateFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse parses an HTTP response from a GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithResponse call
func ParseGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse(rsp *http.Response) (*GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse parses an HTTP response from a PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersWithResponse call
func ParsePostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse(rsp *http.Response) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplateFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageTemplateFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse parses an HTTP response from a GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithResponse call
func ParseGetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse(rsp *http.Response) (*GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse parses an HTTP response from a PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesWithResponse call
func ParsePostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse(rsp *http.Response) (*PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessageTemplateFoldersMessageTemplateFolderIdMessageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMessageTemplatesResponse parses an HTTP response from a GetMessageTemplatesWithResponse call
func ParseGetMessageTemplatesResponse(rsp *http.Response) (*GetMessageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMessageTemplatesResponse parses an HTTP response from a PostMessageTemplatesWithResponse call
func ParsePostMessageTemplatesResponse(rsp *http.Response) (*PostMessageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteMessageTemplatesMessageTemplateIdResponse parses an HTTP response from a DeleteMessageTemplatesMessageTemplateIdWithResponse call
func ParseDeleteMessageTemplatesMessageTemplateIdResponse(rsp *http.Response) (*DeleteMessageTemplatesMessageTemplateIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageTemplatesMessageTemplateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMessageTemplatesMessageTemplateIdResponse parses an HTTP response from a GetMessageTemplatesMessageTemplateIdWithResponse call
func ParseGetMessageTemplatesMessageTemplateIdResponse(rsp *http.Response) (*GetMessageTemplatesMessageTemplateIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageTemplatesMessageTemplateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchMessageTemplatesMessageTemplateIdResponse parses an HTTP response from a PatchMessageTemplatesMessageTemplateIdWithResponse call
func ParsePatchMessageTemplatesMessageTemplateIdResponse(rsp *http.Response) (*PatchMessageTemplatesMessageTemplateIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMessageTemplatesMessageTemplateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessagesMessageIdResponse parses an HTTP response from a GetMessagesMessageIdWithResponse call
func ParseGetMessagesMessageIdResponse(rsp *http.Response) (*GetMessagesMessageIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesMessageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRulesResponse parses an HTTP response from a GetRulesWithResponse call
func ParseGetRulesResponse(rsp *http.Response) (*GetRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]RuleResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRulesRuleIdResponse parses an HTTP response from a GetRulesRuleIdWithResponse call
func ParseGetRulesRuleIdResponse(rsp *http.Response) (*GetRulesRuleIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShiftShiftIdResponse parses an HTTP response from a GetShiftShiftIdWithResponse call
func ParseGetShiftShiftIdResponse(rsp *http.Response) (*GetShiftShiftIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShiftShiftIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShiftResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteShiftShiftIdTeammatesResponse parses an HTTP response from a DeleteShiftShiftIdTeammatesWithResponse call
func ParseDeleteShiftShiftIdTeammatesResponse(rsp *http.Response) (*DeleteShiftShiftIdTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShiftShiftIdTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetShiftShiftIdTeammatesResponse parses an HTTP response from a GetShiftShiftIdTeammatesWithResponse call
func ParseGetShiftShiftIdTeammatesResponse(rsp *http.Response) (*GetShiftShiftIdTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShiftShiftIdTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TeammateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShiftShiftIdTeammatesResponse parses an HTTP response from a PostShiftShiftIdTeammatesWithResponse call
func ParsePostShiftShiftIdTeammatesResponse(rsp *http.Response) (*PostShiftShiftIdTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShiftShiftIdTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListShiftsResponse parses an HTTP response from a ListShiftsWithResponse call
func ParseListShiftsResponse(rsp *http.Response) (*ListShiftsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListShiftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ShiftResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShiftsResponse parses an HTTP response from a PostShiftsWithResponse call
func ParsePostShiftsResponse(rsp *http.Response) (*PostShiftsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShiftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShiftResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePatchShiftsShiftIdResponse parses an HTTP response from a PatchShiftsShiftIdWithResponse call
func ParsePatchShiftsShiftIdResponse(rsp *http.Response) (*PatchShiftsShiftIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchShiftsShiftIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TagResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTagsResponse parses an HTTP response from a PostTagsWithResponse call
func ParsePostTagsResponse(rsp *http.Response) (*PostTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTagsTagIdResponse parses an HTTP response from a DeleteTagsTagIdWithResponse call
func ParseDeleteTagsTagIdResponse(rsp *http.Response) (*DeleteTagsTagIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTagsTagIdResponse parses an HTTP response from a GetTagsTagIdWithResponse call
func ParseGetTagsTagIdResponse(rsp *http.Response) (*GetTagsTagIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchTagsTagIdResponse parses an HTTP response from a PatchTagsTagIdWithResponse call
func ParsePatchTagsTagIdResponse(rsp *http.Response) (*PatchTagsTagIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTagsTagIdChildrenResponse parses an HTTP response from a GetTagsTagIdChildrenWithResponse call
func ParseGetTagsTagIdChildrenResponse(rsp *http.Response) (*GetTagsTagIdChildrenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagIdChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TagResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTagsTagIdChildrenResponse parses an HTTP response from a PostTagsTagIdChildrenWithResponse call
func ParsePostTagsTagIdChildrenResponse(rsp *http.Response) (*PostTagsTagIdChildrenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTagsTagIdChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTagsTagIdConversationsResponse parses an HTTP response from a GetTagsTagIdConversationsWithResponse call
func ParseGetTagsTagIdConversationsResponse(rsp *http.Response) (*GetTagsTagIdConversationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagIdConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ConversationResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeamTeamIdRulesResponse parses an HTTP response from a GetTeamTeamIdRulesWithResponse call
func ParseGetTeamTeamIdRulesResponse(rsp *http.Response) (*GetTeamTeamIdRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamTeamIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]RuleResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeammatesResponse parses an HTTP response from a GetTeammatesWithResponse call
func ParseGetTeammatesResponse(rsp *http.Response) (*GetTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TeammateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdResponse parses an HTTP response from a GetTeammatesTeammateIdWithResponse call
func ParseGetTeammatesTeammateIdResponse(rsp *http.Response) (*GetTeammatesTeammateIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeammateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchTeammatesTeammateIdResponse parses an HTTP response from a PatchTeammatesTeammateIdWithResponse call
func ParsePatchTeammatesTeammateIdResponse(rsp *http.Response) (*PatchTeammatesTeammateIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTeammatesTeammateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeammatesTeammateIdChannelsResponse parses an HTTP response from a GetTeammatesTeammateIdChannelsWithResponse call
func ParseGetTeammatesTeammateIdChannelsResponse(rsp *http.Response) (*GetTeammatesTeammateIdChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ChannelResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdContactGroupsResponse parses an HTTP response from a GetTeammatesTeammateIdContactGroupsWithResponse call
func ParseGetTeammatesTeammateIdContactGroupsResponse(rsp *http.Response) (*GetTeammatesTeammateIdContactGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ContactGroupResponses `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeammatesTeammateIdContactGroupsResponse parses an HTTP response from a PostTeammatesTeammateIdContactGroupsWithResponse call
func ParsePostTeammatesTeammateIdContactGroupsResponse(rsp *http.Response) (*PostTeammatesTeammateIdContactGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeammatesTeammateIdContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeammatesTeammateIdContactsResponse parses an HTTP response from a GetTeammatesTeammateIdContactsWithResponse call
func ParseGetTeammatesTeammateIdContactsResponse(rsp *http.Response) (*GetTeammatesTeammateIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ContactResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeammatesTeammateIdContactsResponse parses an HTTP response from a PostTeammatesTeammateIdContactsWithResponse call
func ParsePostTeammatesTeammateIdContactsResponse(rsp *http.Response) (*PostTeammatesTeammateIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeammatesTeammateIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdConversationsResponse parses an HTTP response from a GetTeammatesTeammateIdConversationsWithResponse call
func ParseGetTeammatesTeammateIdConversationsResponse(rsp *http.Response) (*GetTeammatesTeammateIdConversationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ConversationResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdInboxesResponse parses an HTTP response from a GetTeammatesTeammateIdInboxesWithResponse call
func ParseGetTeammatesTeammateIdInboxesResponse(rsp *http.Response) (*GetTeammatesTeammateIdInboxesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdInboxesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]InboxResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdMessageTemplateFoldersResponse parses an HTTP response from a GetTeammatesTeammateIdMessageTemplateFoldersWithResponse call
func ParseGetTeammatesTeammateIdMessageTemplateFoldersResponse(rsp *http.Response) (*GetTeammatesTeammateIdMessageTemplateFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdMessageTemplateFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeammatesTeammateIdMessageTemplateFoldersResponse parses an HTTP response from a PostTeammatesTeammateIdMessageTemplateFoldersWithResponse call
func ParsePostTeammatesTeammateIdMessageTemplateFoldersResponse(rsp *http.Response) (*PostTeammatesTeammateIdMessageTemplateFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeammatesTeammateIdMessageTemplateFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageTemplateFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdMessageTemplatesResponse parses an HTTP response from a GetTeammatesTeammateIdMessageTemplatesWithResponse call
func ParseGetTeammatesTeammateIdMessageTemplatesResponse(rsp *http.Response) (*GetTeammatesTeammateIdMessageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdMessageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeammatesTeammateIdMessageTemplatesResponse parses an HTTP response from a PostTeammatesTeammateIdMessageTemplatesWithResponse call
func ParsePostTeammatesTeammateIdMessageTemplatesResponse(rsp *http.Response) (*PostTeammatesTeammateIdMessageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeammatesTeammateIdMessageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdRulesResponse parses an HTTP response from a GetTeammatesTeammateIdRulesWithResponse call
func ParseGetTeammatesTeammateIdRulesResponse(rsp *http.Response) (*GetTeammatesTeammateIdRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]RuleResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdShiftsResponse parses an HTTP response from a GetTeammatesTeammateIdShiftsWithResponse call
func ParseGetTeammatesTeammateIdShiftsResponse(rsp *http.Response) (*GetTeammatesTeammateIdShiftsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdShiftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ShiftResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeammatesTeammateIdTagsResponse parses an HTTP response from a GetTeammatesTeammateIdTagsWithResponse call
func ParseGetTeammatesTeammateIdTagsResponse(rsp *http.Response) (*GetTeammatesTeammateIdTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeammatesTeammateIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TagResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeammatesTeammateIdTagsResponse parses an HTTP response from a PostTeammatesTeammateIdTagsWithResponse call
func ParsePostTeammatesTeammateIdTagsResponse(rsp *http.Response) (*PostTeammatesTeammateIdTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeammatesTeammateIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTeamsResponse parses an HTTP response from a GetTeamsWithResponse call
func ParseGetTeamsResponse(rsp *http.Response) (*GetTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TeamResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeamsTeamIdResponse parses an HTTP response from a GetTeamsTeamIdWithResponse call
func ParseGetTeamsTeamIdResponse(rsp *http.Response) (*GetTeamsTeamIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeamsTeamIdAnalyticsResponse parses an HTTP response from a GetTeamsTeamIdAnalyticsWithResponse call
func ParseGetTeamsTeamIdAnalyticsResponse(rsp *http.Response) (*GetTeamsTeamIdAnalyticsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdAnalyticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnalyticsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeamsTeamIdChannelsResponse parses an HTTP response from a GetTeamsTeamIdChannelsWithResponse call
func ParseGetTeamsTeamIdChannelsResponse(rsp *http.Response) (*GetTeamsTeamIdChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ChannelResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeamsTeamIdContactGroupsResponse parses an HTTP response from a GetTeamsTeamIdContactGroupsWithResponse call
func ParseGetTeamsTeamIdContactGroupsResponse(rsp *http.Response) (*GetTeamsTeamIdContactGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ContactGroupResponses `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeamsTeamIdContactGroupsResponse parses an HTTP response from a PostTeamsTeamIdContactGroupsWithResponse call
func ParsePostTeamsTeamIdContactGroupsResponse(rsp *http.Response) (*PostTeamsTeamIdContactGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsTeamIdContactsResponse parses an HTTP response from a GetTeamsTeamIdContactsWithResponse call
func ParseGetTeamsTeamIdContactsResponse(rsp *http.Response) (*GetTeamsTeamIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]ContactResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeamsTeamIdContactsResponse parses an HTTP response from a PostTeamsTeamIdContactsWithResponse call
func ParsePostTeamsTeamIdContactsResponse(rsp *http.Response) (*PostTeamsTeamIdContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostTeamsTeamIdExportsResponse parses an HTTP response from a PostTeamsTeamIdExportsWithResponse call
func ParsePostTeamsTeamIdExportsResponse(rsp *http.Response) (*PostTeamsTeamIdExportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdExportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTeamsTeamIdInboxesResponse parses an HTTP response from a GetTeamsTeamIdInboxesWithResponse call
func ParseGetTeamsTeamIdInboxesResponse(rsp *http.Response) (*GetTeamsTeamIdInboxesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdInboxesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]InboxResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeamsTeamIdInboxesResponse parses an HTTP response from a PostTeamsTeamIdInboxesWithResponse call
func ParsePostTeamsTeamIdInboxesResponse(rsp *http.Response) (*PostTeamsTeamIdInboxesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdInboxesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsTeamIdMessageTemplateFoldersResponse parses an HTTP response from a GetTeamsTeamIdMessageTemplateFoldersWithResponse call
func ParseGetTeamsTeamIdMessageTemplateFoldersResponse(rsp *http.Response) (*GetTeamsTeamIdMessageTemplateFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdMessageTemplateFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeamsTeamIdMessageTemplateFoldersResponse parses an HTTP response from a PostTeamsTeamIdMessageTemplateFoldersWithResponse call
func ParsePostTeamsTeamIdMessageTemplateFoldersResponse(rsp *http.Response) (*PostTeamsTeamIdMessageTemplateFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdMessageTemplateFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageTemplateFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTeamsTeamIdMessageTemplatesResponse parses an HTTP response from a GetTeamsTeamIdMessageTemplatesWithResponse call
func ParseGetTeamsTeamIdMessageTemplatesResponse(rsp *http.Response) (*GetTeamsTeamIdMessageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdMessageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				// Link to next page of results
				Next *string `json:"next,omitempty"`
			} `json:"_pagination,omitempty"`
			Results       *[]MessageTemplateResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeamsTeamIdMessageTemplatesResponse parses an HTTP response from a PostTeamsTeamIdMessageTemplatesWithResponse call
func ParsePostTeamsTeamIdMessageTemplatesResponse(rsp *http.Response) (*PostTeamsTeamIdMessageTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdMessageTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTeamsTeamIdShiftsResponse parses an HTTP response from a GetTeamsTeamIdShiftsWithResponse call
func ParseGetTeamsTeamIdShiftsResponse(rsp *http.Response) (*GetTeamsTeamIdShiftsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdShiftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]ShiftResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeamsTeamIdShiftsResponse parses an HTTP response from a PostTeamsTeamIdShiftsWithResponse call
func ParsePostTeamsTeamIdShiftsResponse(rsp *http.Response) (*PostTeamsTeamIdShiftsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdShiftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShiftResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTeamsTeamIdTagsResponse parses an HTTP response from a GetTeamsTeamIdTagsWithResponse call
func ParseGetTeamsTeamIdTagsResponse(rsp *http.Response) (*GetTeamsTeamIdTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsTeamIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results       *[]TagResponse `json:"_results,omitempty"`
			ResourceLinks *struct {
				// Link to resource
				Self *string `json:"self,omitempty"`
			} `json:"resource_links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTeamsTeamIdTagsResponse parses an HTTP response from a PostTeamsTeamIdTagsWithResponse call
func ParsePostTeamsTeamIdTagsResponse(rsp *http.Response) (*PostTeamsTeamIdTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTeamsTeamIdTeammatesResponse parses an HTTP response from a DeleteTeamsTeamIdTeammatesWithResponse call
func ParseDeleteTeamsTeamIdTeammatesResponse(rsp *http.Response) (*DeleteTeamsTeamIdTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamsTeamIdTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTeamsTeamIdTeammatesResponse parses an HTTP response from a PostTeamsTeamIdTeammatesWithResponse call
func ParsePostTeamsTeamIdTeammatesResponse(rsp *http.Response) (*PostTeamsTeamIdTeammatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsTeamIdTeammatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y97XLbOLYo+ioo7bsryVxFdpJOz3Ru3artSdK9fSvpZCfuvetWd0qGSUjihCQ0AGhH",
	"ncoznP/n13mM8zznBc4rnMLCB0ESJEGJsi3HVTOdRMTn+sLCwvr4OolotqY5yQWfvPg6WWOGMyIIg3/h",
	"SCSXidj8R0HYRv4QEx6xZC0Smk9eTD4SzKIV+qf8iujFP0gk0FUiVohCC5yiNaNrwkRCODq/IAvKyPkU",
	"neOFIOx8iihD52KzJvx8Zj8jnMemBeIrWqQxuiAII5FkhAucrVGSI04imsdczVaskaDoGYpJlGRy0hRH",
	"hM/M2JVR0oQLRBeIXJJcIGgwm0wnidwO7GMyneQ4I/Kfk+mERyuSYblz2XTyYsIFS/Ll5Nu36QTnON2I",
	"JOKv87gJmzO73AWjGbpaJdEK2S7oKklTRPK4ZW71hZF/Fgkj8eSFYAXxrCbJBVkSVl3OWyJYEvHmkvQH",
	"Cawkj9IiJi2zZ3qErhUkgmTcA5ip+QEzhjfVlX0UmIntQMWhq3+55tt24JKz/0lz0lzX76cnv54gOcmn",
	"hysh1vzF0RHJZ1fJ52RN4gTPKFseyX8dvUm4mNPFXPw5j7HAF5iTuaTXuRyYP5IEJ1YESFj+IjGwoCzD",
	"An6OsSCKlGfodIFolghB4il8I1/WlAkFg4IT9NvZyzZ6NaP3kG2EWTyUn+VKvDxdrOXi47nmV+Bd85vl",
	"96sV5QRd4rQgu3H0lowa0fySMI7l+ofuHJvtbtA5F1gUnPCOLRnx4k6JTD/08BxznixzEkspWOTuv+T8",
	"ySX8XYrFmKREkPj80babTvIL+uU09oiBN3qN0IIEiANoOE9iPvEKgP+LkcXkxeRfjsqT5Eg140cfCKcF",
	"i8jpK69kSJMs8QiEt/gLyovsgjC5TkZ4kQqO1oShNV62rVKN5a4ww1+SrMgmL54cH099MkCOdkY/k9wj",
	"k+TPEjSS6QRFUrYQrvg1J19E10rkp7mAcbtxxCkTf/dQ488JSWM5cyynlq1gXkYiygALXilImZhfbAKm",
	"fMdiwpqzws/oYqMFsAF7Sd6yL4m7pqcwsrsCkksE/D7BPJpMYcLJp6lnXQIvO4lV4GUApQq83AudCoKz",
	"DAvSvUTdKGSduul+FkvXSbSLnFNqU7+QS5P8s1Kh0EPyBWfrlHD0GJ1fkQsp0f6RMAySjeMcn6MtJdk3",
	"ea7zNc050SppRNaSDF9I1TUXJAcBgtfrNIlA3h79g1Pg6HLQ8siC30EeK+AscJEKCT4zrJc41S8KXmpN",
	"VbB+0NLBjiIVDP33lzjPSXyS8yvCfqZpTNgrKdsTtcYtt5ARzkHKkGydSkJawMjzxKOJJrHRP3QvZHpJ",
	"Qr0gSJ81za1P9wCqk+Yq1Not8KRqpNYkeziQfKs6jgC2wgcnPTwq8uSfBUFJTHKRLBIQaNcBmLyEgF6n",
	"3jwt1E6DN90lPE7UeB80T7WsRLeauIryByJV0fEWUo7buZTyIsDUAuSahMDRKiNjwqUcsmUdTgOpRZdc",
	"PdoaNAWeacboBEyDjeqrUrJmX2tTow9boWZ0WOhKrjQdbXUv1Xjd6zGTwpUgG5V6XqrxeubXk6oricDR",
	"mPPDeH3zq0nL+X+lgoy9BjnmB3tidy0E5VSTrXNbGnM5dtBeuJTTf5tOwDY02jpeX5JecatmlFN/GVXG",
	"vobh+ib/YsSqOvLEZrT5T/WAnSt4f4rUbSsmAicpn5jb63jLkKP1QEHNCHfS/PNoM79J8s/dxAfTwbRc",
	"vFvoc5fvoOPM13iZ5JaXqh/l1dV3g5GKPC0vts61O0SZmU7mpnXoHaahhtQvMqD2wzVnLkHEPWo8SRft",
	"ezG9g5SxEPVMLkvCBRsUWaQ1Nfy7j79WVeVg8NiinbTg9R6jh4dRF5VK9dsJi0MB2tBJDwaQFlol/JTq",
	"er3wq+vUhwM/Ay0HfqDx/sJosb5mIJYTO1r5wYDSXBWWCnJ1gMrLxk3As3bJOThw5rQqHtXPd/+Qa9yT",
	"Dw1zVaTZa6uy638ooXHXsei52jdRORdU4NT3uCdw6rwwZlhEqyRfViwBzuLdN8NBGHPegNXDi9mpF4n3",
	"iLv9POggq8RhwQXN4NH2es+ict5DVJJg9UiDzQITzGV3nxNqVsGDwRq5rCq2ysL4HeCrZkk9HIRpBFmM",
	"nSq3n+sUVDX768HAzoDKwu6NWd51Qa5qPz4YwCk4WbBp09J3Y0M7XNuZg7QPNL1eKSEnPEDIKTiVYCuu",
	"G2zFYYKtqIDt4ypZXK95EWY8QMBpSFnIneHltcLtDC8PEGoApRJmxlXzWgGnJz1A6FnX1ioIrx18Bwo6",
	"AFu2hffiIF2jwwUL4EPT8SavntW+mWE6OW0x5rRF77SFmpZLKTnavLWzwjexmlB5so82b0XW+maVk2n/",
	"9PEmrTCad1Y5neMWP+rUWa/no50WAhpUVznySekqW2X9CExN84W10FVH1JYoLARLLgpBOHggi1XCjbPH",
	"bOK5HVQGqY+p14LcXz1uxDHNcJJXhaA/ukC3RJhzGiVYqNiQC1L5YUWs5+60LzBvOiFfBGE5Tr1e46ev",
	"jNe42UqSI5wj0wnxDRck883jG+63ulO1GR23r1fFB9RH+hVnpLa0sNucbqxjOKoUolcB8RgjhWGU0Yi/",
	"V4b/1L40S/ZNCmZExdl1hk9erUjuAhVdYY501xJG6t0D/C6D+OKknS+2ZotX+2WL62CE11VGmCJeRCuE",
	"OdrQgqELHH2mi0USEf0dUYZefni7T35J6ZLOC+Z58Prtw5vaJh5wJJuHs53ZPHz19OpTvxhJsQ7bqZG2",
	"8/bs181MCw+S8RABMJ4GOJ3YwNfhDKm7NhlSTnQSx+Yx/oyC10YrxIyw8jPG6StuUG7hJyjCcSzpV4UT",
	"QtASiZVzxWQ6uthzF/pJbs5GzGtrOizgaXOHxBdR/zqPIWTYbCvGAjuhdmZbOmL6oQko5kkeEfTkp78e",
	"Pz5+8vj4ydnx8Qv43/99fPxohv4rSVN5jDJa5DGJdegxDJTH5VSbmU+ALpLUpEoICnX5WbdXAUS+WHgI",
	"kb+Gbcb0KjcbhaX0bVUcVJj8axEd6VD5FunvhKaqJBeS9OwtjfujVF3iNlkHVKoGaOulcXWkP932TH9Y",
	"xsY/Qljo4Fx3z5iXrDw2la4ZXTLCPXLmV+U9wXC+TPKlytxwLDH25PgYRZSpoM1YftNktiYsIrnQhniQ",
	"ija0a81oRDhXG6jGbWdJrv7lieHe9dZfLkAHQYSdI8mfHjb4mPxJAFsXG+EQs8aSpHcvctxAwpogEAVv",
	"QAoITtEtK/JcrlGqS5D1YYGTlMQeyp1OvFrB2YogqRk4WTdqK0YRziFClF7lKcVxhcDcEN0G7UidOt+8",
	"W0xe/N57xT2F9/+wm2FIW+2+GtL01GRJCJk/pJ1zyfj2qRkmrIiVK60mWxeC1BhhQdkMvVIhperATtPZ",
	"xIWwyuJyGldE2OVyvkgYF3MTKw1ydTKFLyucx2nlF18rnuL5BSM4Wrm/ggfVnJF1ujE/5+RqzskSPFzn",
	"Rv3Ki2wOgpSU3xZFmppPOruF/dj2+1zKdzWfbhJxLOa8YJdkY9etPxlhPWckInKY+u+c2MWV25tMJ+tI",
	"VMblWCR8IdcP9xH5WeDlksTzukeYHIquSV4u2JwDsNaU8uYmq+3VeSF/v6Lss+Sqsr2PdWuIP9OnV42V",
	"N2uPVIXQ/Rk6z4vsHP2/fxTHx88I+rXICEsi9J/y4xSdxwUrP74qmPJXu9RfuXC+foRF2W/rSJTf3pfS",
	"Hb47gkr+MZ3EBWSGEEwBuHuvKtb4u1YQs7Y0TjbfBET0q5RORjGZhWrxTXHiuRff66g3o6N2apqGLj75",
	"+KVV2WylpjOHivSRFGs7D9ER98OJ6mOEU8ye+mjqu9Eo/0EvZoH6ZJAKWOJiuAL4rUorbVbGrUSOXJBK",
	"/gK6XhJLbF8uqyfnfE3YPMYbS79zs0KgFFCroGdNi1klXFDW7CbwBbzz+HstGV6vmn0kF6tPUjWzFB2m",
	"p9Zou18RtPnl7FLDmicZ+UUv8i6yT6sdkF7lvqxUXsba7pV2l8vWmgDohvKaJpbGZrsNzYpufbaLCkW7",
	"uWc0H0079ELVFz1UTR/5hl83VwVqoj0Q1oxcJrTg6vRfE5bQeOIjAzFQAQG19tt0ctm3gtJq2b0EDxqe",
	"tuFhS0VpkMCwGwTleFhfgIB3S2c1W5bWhaaTkreV0q1pV6v33cq3O+ltglhTcVG5yegCYaSoWhO5FFo0",
	"J1qsN6izmbS0vssUX6jsNK3vHG2QaSilO+oT9l1itqVrSuOXT1VCUueT55EhLbLc9yqoPlhFGLo7x+kQ",
	"Qacm8b5lGQSMIQsGkp8rkXynSP1MHl2YG5j2y3Jo6RXljF55kPeBXoVi7i6dBb1IrHKEVcH2f24PQLVV",
	"X734vsQpb4GXercnOFopOEm4sEuctuO+1byi1+SM0ER3C+u+kT+712fPKPvQRDqNGCH7ORTyreTEa74Y",
	"k1w49FeV6PAVUnlaHRhGIzFaJKn3vV/+3u+g0ztM5dCs8AuOscAePwS7TWQbTevbDfOoMAl2IY8pdjP8",
	"yV+vVoQRlAiUcNVSG7VMlpELGm+8O+LzJE8TnxXqv1ZErAhDlKGcCgdAMGfC0dqhSf88F5SmBOdbP0w9",
	"6sGMQ/etniSC2gehECTLpTpPMk3iVN/25XvlDu/zvaqnaWn6hsWx/8Z9oj4g9foAF+sSb3x7Tx8jH0y+",
	"Qj+RrVlyqX0v7XGywCkn036q0yNLkkvyOLlM4sIVfpbIYKJLnJp1bzlNRPNFsjRPCwk8TCSxd76tzQc2",
	"Y1yLD5HZMTTzQLTH/GD6q2bX7m7ESR7PcQcN6qIJ6zXBjCPMldGc5LGmJ0OV8jehjEM/M+r3I+NEiCRf",
	"+nR/DQXboi55cZrObbDAPMK5fsprFYVl0uyrRKxoIRSGIBUu5/D+DCMgmivPQ42IGXqXpxupBagNUYb4",
	"CjMSmwb8/zHWd/ioucV+nXmpr8hjOgdYw1un984JZ/XDjGBeMHUqWPcMscJCnhWMoxW+hLcBOaK8ncJb",
	"0ZoYFshd/nBsusfT59Mnx9Mnz6fPjqc/Hn8KVwZ496NgKUuMqYBnAny+Miz/EFdJmlD1FyGAxBc4IheU",
	"fp5MJzyjFB5OQVGKKLj9sgLeaJUTaYshrJ7DqSlc7fnXYXaW5wovjxltvjTpVEMfJyr5e+t3OFyIFWXb",
	"hPDA+dyqU9mLrlnrbt6fHeOsKW/zJnolKb/iO6THAech1XEyqjE3qqc1afPshGU84NUcrN4LVB42FrIt",
	"r1lIK3K3aX1rZH6JBfYcL39Pcsw26v2ULpBqNkNvCw6CBJ1rOnosefkFyopUJFJJPFpQlj2W3c5RskB8",
	"TSJJJ2CtV8+RUrDB4D5ohjl+w2dvWIR27JyhN0TKOZKtxUauY0MLFFM4/68SvgIBCN6uRk/UI83Qr1SA",
	"UJRaE/mScHmcuFPBKykuBM2wSCKcphvESEYvYaRseDyGxkxfPAZ4ws7lvaZDHOE0hf1AY3hU5q6fLbog",
	"Kc2hXMUMnQrfVpTrH8oSzuW+dXKzaXBRpcFSQ5GlX5Hka5xlPt3Hp9HpLSYcZZh9JrFUNTAyQ/jOVCs6",
	"uoEJzZoLDoeI/zJq8O53W3d4tsXXehCcjR91r7oeDuUe9bz/Bt6ypvrOP7g1Nr4PEOw1ZkHJBttu+IVD",
	"DXAj1w2HNv4dXAebAFjZ36vTqfbWssKU0bHEp9chu3xQqRku4HeDRTXlDL1ULqnnJMNJej5F5+sVzaGs",
	"oFZd5V+N7ir/bnRW+F3eeebRCgtdZ0udhOeuW0WpAcMU8o6zMm++ViN2FOFyzE5tuGqV0AC0m/daJhTM",
	"/EaTagzIXiM32pdWTYPZ1Hr2q1RD+QCfdtPhWN9UheUo6rp2QUjeDJfrvHnV80m2KH69UVka3g+4VgH3",
	"qbTtVXfqcR5Sbdq0pdCrXHBSW8VlPWvSjaB4ofHPhppY7nXJnkYg0vBFSoauVovS/epy+zliv28l8Tqu",
	"wWr+lvSjTmimSXfcPY5qtoWRU/e/Sa2jmR+0KVNV2UyyzcESFnRVs5U4eVwbB8XMazgZxNImSccoLF0u",
	"NeHG6rkNy5Xs5h4gro1mlAR27Q9970y9WdME4QtaNPfZsEHbaG63VXewrBMArva7xkzkhFmzvxN5bAvi",
	"usN7zNH1IaAgKJIqkcR/BGPpF2A+GyDEfFzISJSsE/30260C6oYuTnYQb1mr5dZKlJIgO4yX5HLAOLqx",
	"71Gapik11ToCRirb+3ivTJQZMJRp7fVl4mLupP/xjyZb2Uff8ojrsYqWiRUD1tj+NLn396toReIiJfGc",
	"kSzJ4xYUKW60jdHDnOaPyZe1vJaAfib/HeE8IimJHyE71m4y6oMepiUEJsBjuDarDcvT0W2T6aQs9gzO",
	"Pqbgpv3R55DJCwW/5uTqQ91TALx85JW160QReNkj9aHU7k4A7UwRB+c8nJ0vyyKAtXyevSadjqfx1qfS",
	"j9rcrN/z5VCQqqNzrLaX0I/6S3NBN/sgikGgxb4H0Tv35Dn0xVPbZqbm6VO/efbaamxsvybbsnbkgLfM",
	"+kuP6zPDd3nxQR8JQb/rEJwyum2ZcDFbJmJVXMwimh2tYsryhLAjcvxDfPzDT0+fHD97Sn7629O/Pln8",
	"8ONi8Tf8/NlP+Ifo4lFFGQl4TPI/pfbk0jFkrtRo4zvToSHs9sxaz8dkl6gHdrFrn/BwmgYEBr20VTX9",
	"RtJA60Pzbe01jlb6synVratwmzDLc/X1HI7Gc3UenysLEB/LPOHxH/dZMnkThC0vKts/WVTnhXG8tkl3",
	"EabCqc8w2UWiXvJsMzjuYK3sJczWDb5ieHEvhMYRQjRHF2SF04X8crWimQrmlRBWz7cXpGkYdvAfRQGp",
	"ypTLr75/Wb6/WlE1hc5hgDC6SJM8RhFdb+oaHs0j4iwtUe5cIfDwk+jfaWzngCG9dueQzQVtbNwtZTSu",
	"OdOX5o5aZXcak8o24WYE+LTvSQ905wfooV3JZcKTi5TYZGNAU4jm6eYRogw9UApWSw+wWVaUOaPDWf+l",
	"UrN+5D5AldtQE+x0OYCl+fMg0XHwOgY2w8/nU+Pn6T9VmvNoFOzrpaznGHqjqwn7yv5az3J1T88l1rBy",
	"y6ze2yH8tcy86UaEtZi+/O9N8pKbbuRppo2Q8PeCpa7Bb7tMnLInpDzIaU4A7+ZsMMkPypXZfcOzgGHf",
	"vqOxsrd2gNfKmJ7wl6skjX0oaBSAhbuMWZtyGiWPr1giBJGXLvPOVAd6v2htlOp3QuYnHyljmyk6fZCh",
	"d+/eoSIXSYreRYJeEIaePherWatxqkHTzaubRkNk7FNKx7RbTuDBMUmxFFpJDhgscos7sC0XaQo4zFFS",
	"noZuLxB1evwZUpmvtaZ6QcBkAw5isxCh3k9pncB8V4DUegeZNycj2FTMLJq2BeJEKIqWK7XgMGy8pusi",
	"Nf5ueq7ZkBX6pEuvKlijeVWDOojkVc3jKuULirigrAkDLsmBgpVC10puSqDh+NNjVYD0/uydU8XX5+yK",
	"GcnFXHXt0fJUW7tVSJq8TnEElgxBZ+gXSjj8ValolNrGSYMbkgUwxGzX64kXZUOE1WFibhiQ3itFqAar",
	"OyfLg6i4lQCoImYl2Butkny78/xeyjao8SMo4/fEODYx3qsy90zmMFmy8AYwp5R5c1FQ60ahKnCU1+iL",
	"FEfyNrNkZCN5S91t1gVbg+PlhUpSKAg4PS0ZIZI6NyRN6dVkOqEM5/CC1nYB70evWdD+76Qq9V1YyatT",
	"HevOuzPmnZQp7oA8MJc3tSQvA6EhpZ74E5k0eaEUoHDpzG1WXwNMeec/UyVVPMVPgOsRZBxQUlYnrLXX",
	"6hRzniw2VdeqpvKzSparNFmuPNz07+YTilxqE3jp2myqRKbSolkSskRlqAzGe6wpUP+hCfOT3wtIG5bm",
	"SV51a0kTbgy9IcG5euWuqSrJq8YGGHG2pau9wMsdlD5PPeOGJOj0VHXKStgnIcctdvfwu57BAh6ue0a4",
	"vipWQW+o1dXa0FGTT8rQxnQSY0FMfmCV+qglIBRGfFs6w9y/Xmxlre/w8JCd52ZS1zyeYfY5pld5wz7+",
	"s0pg6kk8UYZbmM7n6KEeEWzg5yuRpZXwCfkD5AzUk32adqf3qAligv3OQdq9XT+EquQcON+o1C05llqb",
	"2jN4mqlFw2U49vm7ixUjOJ7DWdnIkUQWhJE8ItoHtK4Yqb7WmQrUqTLTqzLfqjYcXWxMEH6Sc0FwHB7u",
	"77PgvNKkXwb3N3Of2MiN7sRb2kU7t/ZmT4JIO0UDgT3xP5UlQhCkxojEmBrFgrMAYZturE26Z+oAvaul",
	"rz8Ex3cSDVSt+zP4mhXZx4xX4ALWiLIa5HJgn+zrTLSgNp6qSyn4WTZTrzWwmsqxaQjE9VKQagMY+zEX",
	"SGtuvWlpyt22vFhL1cN7mv+n+tDzQFkDtRlNTvs6ToSdNAy0H8g63ag+TbiWL469r4sq7FmJT5qnG3hi",
	"3NN7Yccr4e6w7Xb+aDzUTZ18OwoHl7X8DzUtXrvzSmDoF3b5A9uAzxmnGREreLCSYp6oMPGEoxVer0mu",
	"PigJNvNJwtJzsd8Jphl48G06IUqsB4aSqZ2sMFcRArrzzlonDDsZP1f1QBfelihNQDCyI9WqvMqT3sMy",
	"TZd+ZzHVIbq1VKebjd8kOFPGFJvsB24lpXOYEdufvBv1hyOcOWs0KGfJckmYLrxosFTmHR1QtXtwIEug",
	"0QBey9t9cf0AEJgtiYfg32MmEnh/1nEOStl6CHnj/iiOj5/+iJL4UYVsH3Ckh9sDaQRjytQH2QJRXtgP",
	"AfkQV+k+IVVNptPXvlEheDokVudT7w1xJ95TAUheFhx+VzUotY734FbvuN1PpsYZH6wzdA1mGMEwX8EP",
	"cFOorFOuv4CCC7QQ5q8ZhQEWlF1hFtvdFbn6Uyc0mRPGaNsFWJUF+4+CsM2ApLvGHUc3cFJHmmRxqrrE",
	"7I/8VCvBSst+gNP0gQoFo5dJLG8oUtEw45i7jepNYtU/pzqzcqUfaH5kiaMN2IjK5VRuSLM/8kERmbtX",
	"cmmJwNOvCl23IOVZL6gpzeEpxdRVxAN0ZP1mYIcj3J/jAB4R5qr73A13CjLb2SWaudQI8gau1MvyNqqL",
	"R8k+5zDoud+Yp1ekQWrCDOeVqKdha9NrguRyZUSxfa7RbrUoI9kFYUNWOkoZGj+ZCLxsIxJjKx2NPgRe",
	"+onjsOrWDK5Z88mKve0KHHsUbbUkq2l3xuKGZaqVrawDOskJU1cRRTq2NFFeSCDAS6quSiQKLsXkH1AX",
	"4o/JbPe0n22lCPdd/EMDdevKH/80Z1qXjuEef3usFmLGfcBvLGPnFkUiJQ3O2pJYB4QhWsppVggKr1/S",
	"kfh3L+whoXcKXCA27fKhg4XUeS5pDecbL/S6ub/R8yZeYwAKmYRm+9uITnsQGtRgHbUvCDJxpj5bkldk",
	"3T/EbK4hsqN0krmLr0JTiEuLHAto6Y0jDzudwgvyzg99QRoXL9tiZJjWYkBotBZIFUGZtU74Rb+Tm8Jz",
	"UTIxAa1ZRWb6geeK5g8ESjKlyF7RMiO0TWjBpUC0UQanr2aTQU93CbflXH0v84KwLMkJlxxvIJFwZLog",
	"vBCE6QXO2tIQmVt5+PjW9PNQ9wUCBdA/NDf7R+higza06Lwo8c/Jes6KtHY3EqxoXI2qi4E+jheZHGgt",
	"hd257Hsu59aj+ee/XW+VrpLvIOTTuK+Yw8L3JEfrpykTo1XjgdNlTiF0vSrMIPUVbGB2/8o5/JWzN5sE",
	"Xpr0uBTh2Kt9DDIWBYWsBUr9obK+WbvHpIfsqt2jXS+pEWzW6JFwc/65R58Zkme8mmQyNK9kSRW0fJJz",
	"j5DKoeWIc3lJt9XQ/dUV9hVCVw7uo9KqPX3L7LTmbt1a/mFgoi1lORwjOW3rirbPyqTzfbRfTNTqbTuf",
	"ehWWuE4P1Je2rueyrkZpuaeXTqG96ygb3kDqusrjSVvA5y2I9rTjOhf6trDPQa/Uw2JHXyV8neKN8i3u",
	"GeF2+USqSNezzVrncvelhitK2APe9SMKQw+TBfqc06v8Udhy6k94Y9bPKM++m62fkRbswvPYzMhlQq66",
	"q2H1peAIvBuPe43z3uLAwWbudyA6bSilWDnkTHXK3QtdYEC5DclBbmPaAu2GNLX5Cz5NJ3mRpqq+qLon",
	"NRP/MUbZvJ/roB26WpHcgYSyYeqQTj5GfZXuVJytt0+PhmCwad8o7EVUXz+9+sJ26TDLVdf8I0y538Zo",
	"P1MG189081hKsfPSGiDJZIbekHwpVtYZUEVFmaxfW9gp1HxXhIhzIEGlzj5ADwOyZD6qL05jz/JLiUX9",
	"4OeI31Lynqm07nL692rSRzMk16Wd3M0kU2Wt2iWVp+cieUnmkgrmOOdXhJF4OEp86V4lXsqMtGZsvxmh",
	"XMMCX1KWCNKDp/75oaGzADtw3woYga7jr8AO3LKCNu/yn51aAPVpq57nK5rG1iGx5nfuTa1uLnF+LQ0m",
	"thUKGpRe6minuk1NV6yeGxHNMvP+N2sRYhpE40Aezio94nDrVQDUWc3A5YS6121b3ruDYvoO2Ps37AC+",
	"vrcudc2aHYbckz0Zeeva1SgJyNtVZENBqnVftlnIYJmQeK6sMd1DVgKBdUcEtonrfo8dwdhFvviyhpMv",
	"Al1W3amlNtpMx8rbzUxf+41IHiuRYmRjLbJF+vxlSsqjpcuc1OEyfgYBYQySadT2a0VQ3lZV8lt5manm",
	"vNjVsjMgNwXji/mTp8/GSYiwVdqSu+ru4MHuXq6sJleCC/XfP41yge2/QPom3zZ70xDS9s7L+LqNlkPy",
	"KRgwl6kUSGsmhaly61BPJ4wgzAjKgT4ESyIbUN1fso7P7bDzBWVznKbz1iTrPpWjZYGVpA0ulCp3zkFW",
	"WS/MezMy3GFvpsDTcxu4yQnf6ZfY+8Dg/ac1VdfErtyMd8fr5Xa4idC1fUepUbWOSehzKDhR7Zo1Xhgk",
	"pgCzmKmm6oWIeyEDj+eQw0HgJTp91fN4u0W1EvVGOe+QwjZRklPFXN6zAzC+n6IJe9H8b+wxu57fnrqR",
	"yUYUQyTsvTy+l8d3Tx47IcrNPBPaxqsDQBzjmjIHM3WZbjxx35CI93iR3Uv9e6kfIPWtwG9aIIeW+63m",
	"jLBvk8FucB01LXct0dx1ATLwbZ0+LDSVUR9oPtCUNFDp2PCMIJFnbxRNlJD3h4za+lSDoqZCqhmaAlqN",
	"SKqtsg1se72tLCn4gttdZqwbIpAqLgAaZSWyBWVemKg8H2NiQI/oK0AMtGDzk4Sni3HqhTSTmnQdhk7C",
	"IH0sQmRZuZdqiQzeVntn1yQijjOhz01U8tpIdmRg5q0MxG0992YUAgGzPbcANRVdgMNRq/ufc0wVKXnA",
	"kW5bqxEd7tk7DElFOka1VDnMKD6cbevZG+qLIagf29BfySLaXHtrQD9dlClarW3wyV9fHB97NbquoG/v",
	"UMc/eYfqCkz2wKqWI7WxvQVLBqVZVZVq8sF9OBbD+xTD5xGrYnifggzuc6XofECfb23Y6Ygi3zpN8Kde",
	"t8Adizy3JgPeIY/wvuQLTLiTQ7Ya4cYcsm9pPuS6uhhS6PIML70RGb4L/UjxGGboT/7ldHm5j5iSOexu",
	"ow0WqrGu1udaKBx2veU5nocIE2+a5cH6j0ZWj/oTlnz61iSb3ilwJkljRjocpYDUTKvtw2ZgmB2DZuQY",
	"N/QYHHbnNeESmAtYrOo1CSvve0Zw5hd7BGd7k3tm7E8tKxrpjinnGVhwvrxvGY8NfejoscZIBjid6MxM",
	"PeXBbXAASHfwva1GCAxZky8iZHghjTaIXm/+DrOXVsLdZx3CaumEFgLOao5ZjePbvFTBGV5w5VLfkl9V",
	"eSE2r3pgAneKrLtE4604kzAuWt4FfpbfKkFiXSMN5sLWgfgcx1mSB7olOUDLEXSUYFPF5evJZaonq3Vj",
	"Gj6T7dky9EVKo88kHjYwjiJauDlszSi+SaRob8HbGzwAbaN4N3cdt3ruB7z/1O2QwY3BTNvrP4A5YX64",
	"/6a/NJ6eH9rHtT8m//bHBGWSHWjOH/n9sX6Dw1q/hW5Tw7usvt+07BAhktyXN+Cj/qIgApWkZn/kToyO",
	"CVlWSSzNQCjDkF1Gd4l1H9lE1bwru0Foz3mRx3TOSR5DhjxdPh2n6dyebfMI5+Dnvjn3jN5MV+Hv26Ea",
	"VyLsaCF0CLM+SOWVCUZAEOORcLOFGXond4DlXUPjU4Xd2T36lenqjv2+3ZBJ8WFGMC+YutXqeK9H6qSX",
	"VMfVeQ8veTFFGJ5pkQSF0ue1VmJWW16ejqfPp0+Op0+eT58dT388/hSiBjqEWAtj2C0xlqA6H1bzOUbQ",
	"GfpIBEogKyX4vcJeVfvOSqxBiUYz6nviF3TWYgL1Jn37lVyZ1Grly6v7Om/T4Jp0PNOJznirEv3LH/ga",
	"+/3/HcOCXwl00lmCo4BiDOOXQNO4tjm85KHaYKe+46WGE43720UV9XLWzlI+ebdhnnh9Omromya1z5X6",
	"0Vm/LEKeUrl8Z+0RziOSznqKk4XCTVtfcG1OEMJIWyQqEJ1qny71/J/EzUGlwKFXOW9mq9PDGrFXGbXg",
	"xBkR55vaiFKtaY9mfsDNqMCv/Xh1QVV7fHbQXFa12n81q10LUJVMZgqXDz34/UkcynE99TNHqHq5XRnL",
	"a6oMvNcSl+PVtKwVzJwaXyPIYbxm5DKhBVeJwfdX/3K0KpcDaPBQ62UfSFXsxvVFIeG7rPTZo1HZ+33M",
	"K+lb1/rRG8QBTDYbQ6W6vWVDW2hGFwK9e7U7b9HziRYiHYnxqxLEkKUEqlEzz6U0OFfXeLjyuB009Ful",
	"szFUenwvOiyF8lK0sNbCNqNeu7lN9tefkzQRG33DGmr4ksOkuGMV7bYb2dV8hWySWcEFvJwqE2Ylma6u",
	"LcBRSq8IizAnKCVCEManSBXg5NABUqHwiDJvggSAOidRwRKx+SjZXbOUEGvQxQhmhP1s4iL+v/8603pu",
	"BhCBr+Wo0AuGTPIFrTnhamvxBK+Tf1sw+ft6PVOR6QocE5UK7X2KxYKyTIkZAZ49L+XpevL+dOJEp0+e",
	"zI5nx8r1nuR4nUxeTJ7BT5KExQr2caTtmfAPb00jEMEQhaFblldqMNzO1N1ZmTdO48mLyS9EnJhRgVtw",
	"RgTc3FrcMMsmR2mSJaK1Do/TcC3VE/qZ5CGNOWXi75vQlu+Y1B6UD6apPP/i6+Tp8XHbOWDbHUl5825h",
	"tw/UU2QZZhsDSgc0Kjfo7xP7k7wTrSn3YOGluUDmkgtV+ybk31Pugl5n3Pm7vi9EKpYIrv7rdZpE0PHo",
	"H1xdrdRh1hsjrobXnFED0JN+AGHb34WM2Z7+6AXNt2lJrUdf9d/mSfxNQSslvkd9VVdRPTvYwatAU03M",
	"RPrP07hJus3biG6MTl9BJonJC2CskmHLRU7ce7GKbinhXSZMxVHkD1r3UOMPHgEJruKA5Cp81R6rUPBS",
	"n1cE/ExEtOoGosPzhwPB423JFQASAM01FtHK8waxVtVkygE8rCy7HgRIr1nGbI00BfUtZcyRPqh5l7D5",
	"AKocOHfZ8l+ql4oKwLlBTqgQemlm/S7wrnd7GnM/6odIPIULW6UX4H+yheyTZzZ3Y7C4m89UZaI9GSAU",
	"bylGR1a4tBq3gwpl4eRRocwbfFTCcoAqdRLHXhbtxqWrWt2z587seRLHljcF7eZMEMqmqFzlnrJmJFKO",
	"D76AYXNKm3J0GREsifjsj/yP4vj4GUH/67//j//9P/8bemXHQSSP1zTJhWlim57JC7z5Wjp/lEuYofcp",
	"kZdMTghKhHn0I5AAAD1G5+/ffTxD5T6OGFlTJvi5rgtrZzr/5bWv3dFX9Zd5kcTfztUTe1PaWCgNvXcl",
	"JrF9AHML5XAd0tLx9wpobjcNMSyDerzO40Htz4x9bkint4qAtpRrdpgPgMgaQ/xCREmqLh/Y32qMcKRK",
	"i6n30IA7o2UDXUqNLpyUjgzC0y4Tkch/XRJ4PzRPLarQ+Brnsz/ys1q5Q6iMSqJCMg/mmzxaMZrTgqeb",
	"GTpz0h2p1qbsJFZJv33O70zCmCgfgD9yPZV+y9cVlBnhRSp8LKB2bEH22lR724uSWp3lg5riacfFeD/T",
	"qnmeKrNSo3R8He2zlou3l0ZmQ+jw6Ksu3apv5FpIt8soi53eo1NTgaq35Dk67cSBJyf5sh52R7yNmCvv",
	"oFthTR8rg6WH6gd+VRhxouUIyMVewaH7Xofg0FNtKTi0hN6z4FCzXLvgMNOGkp8CZaDgMI0HkGBFswmS",
	"HBY9vZJDk8FvraKjnDpQdvz16TMSPXv6159+XDx5Gv24OH6++PHiydMf4r+RxV9/fPLTE/zsbxGJfvrp",
	"mBwvfnweP//hp6fHP0bPnzz767PFE3x8U0JnHKx7hE4/xt1yO91PDKZlyBPDy7I4z9Z3TDOE547p1v7R",
	"+7LNq9s6+lrmYvjWukcNOdfxs3VL+s8wc1+ZjslP4U6iiDAKj1Z4TAuq8XNuqruOB3QTwj3G0y5Igun0",
	"IGA5/uFSdUv3MLnZYkwETpSvwg7XeI2Ml12YbOWVI8iNEqKC6LIu2s/H5rlXVckZLz/RhT6R6uV7m8ac",
	"BoG8UqsJIJPo4MmkkvBmSyu7Savl1QsAYw49aOB2UUOSRzRL8uXcJgdrJYwPZYK7SmmSMharZrCp+AUu",
	"muES6C9/effrm///L38JpJVTvda3ZR6z74FqAGhvLd49dPM06HWGrAWJ33rpx6C2VnPGISUL8y5i6qeh",
	"jySPtbCwOe/gkabjYPGRwhASMOkJD58U6umotyWGTiFST6k4hAAucZrExkfK/w5QuXUi06EkgDD8/6eZ",
	"6LbragNYs4YOs8VujQ1wQTMweB991X/r14nhvVS39mvFekz9Z6Ampxq3Q9ouLxTSNBtVK1bz+7Ri/cWB",
	"sQZAF4yPTLhi/yWrjKzTfZTn6UAkvDXz3QFkqNvgmc3F47sO6i1k5bZb0QOvWvMlo8U65M6rX8FU+xbg",
	"Q5Nf1Ig7v6nqcTy7XJoZyr2pxekugf5plS0Zr2aNPSC/lqO1sc19Kb7uTLu/Zeq9w267YNekDsnCzr/D",
	"nNmAUx0Az1qcSSrgdP8RJkGrSGxn3er6Axl4ydb79HMbBxUVn58gJubogqQ0X0KopynIA0RM4jZk1fm7",
	"iqkhHgY3hLGDch2xiEryfirp8CCpuI0E4bkh4Q4O0fvy9ovt5s/oSCK5jqEhAmEIu4fYqVsR28MIEWbx",
	"fxSEbQZwzYH7zYdwbhOLQ/WSTt68FsVja+/5yPb3X5dNlvYmgFwCP1LGlTmEOHeTO2+ERPN65h71GosZ",
	"QQ50wJsOvWwDuBxaf3Siv3fSbd1hPOSjZ3vAq5txgaV+10PUIGa1g4EqWo9yxq1P3RC53yfxw+9RLN5r",
	"uEE3SU57XsraIOgI1cMB39bMrWwCnWDsCzPoEHzwVHYIwNybO+vuykb5IhksgF1xctRI0tWrfJTNtSOO",
	"wUaSI0bkV4KUaTOlyyTCKaIMSrzn5IpwoR7NdHH3jErJHV/iPFIFqASRcJ+CI6uc73dOMItW9jGlrCoV",
	"k8uZG6l4ZGtRV/f0+Mm/qDEeV35+1OWJC+LZ+P3EPf64jIiC5ZLSS4dcdA5BqNrAfG4HVDYwun6ckkuS",
	"VqOFL2icEA6u4Y5Hr86ZUnroVtOxzXT2tZl/Pi4Ijlv8dRuc97KWfS3AtHZtbNivBLqw3KvmupuK6UC4",
	"Xc9sJsIbwtK6IFF/sBDCuniRfXwaqDf8u57puxDZFRione8uvrWyYqCjKzk174oG0r2RJfKqoZEKWnDQ",
	"teP7ROjIqHSjSgLw2M6/OdXJ+7uPYmiGcBzrULBhOuuvVNxOPA99Nqxc3tWuPII119ut40N1CLzCy0EQ",
	"zQdz1a2F9Z4tDXLfu1ob9Bh1RpOo6ECnZq7tNVuTKVNbGfpU24xyAXX/cpFuTI2we033Nmi62trTpdl+",
	"J5plm0bp/O7hnCNFU0df/ym33u5P8VGRL/i3VUqHoA8t0RQqJJUukKACpyjDJtFDDE7ekAlPxchWGVPO",
	"q32ZFPtdbFRSHx1Gtvm+CV4hYtBlTuMOMKxrgqpizqXfojse0u3f2zHh6fHKf2jBqIHnFUSC/uuzkyS/",
	"kOfWvz49Fnj5r89OBF7On/3wfKuL4Q1yooLTB4j8qXOlhuH2fPm1kq0syP3f9Uu+MR7JcAIcsbkeG4fd",
	"8d83wcbFktI7NDEX9qHqWH45rh+X46LoNdz6PBjrlBUQ7NDtz67NuOWg7j9uO8z3FgVRxc04Vt5AjAbI",
	"iiPsZuYuvB6qkG2bMptJu58SCtFBBzYX+HdPDxYS+6ALhEs470IgxtMz5OakWhpHTmctw54E+iR4jaCs",
	"7+OdEupGi9B761HlLfD9PqFdTkTW59Zaj/qClg4dFfszdxh/6m1NHT5/bOtY0euS3c3IZaBbNxurdk0m",
	"HsqWA0LZDowpbexHH1PGBgSNCLQgO6OKOMQcSjas041x84NLrhNt1ii+MJRtDwFV4zOtU6R/f+GHCnOt",
	"QYg9PEsuw45e1U7X44giqAxkH+Wv6Rh+fXmrJf+tMxBoePXJEHLZONaHK3ELCqWoWFDmyDI2B56DVbkQ",
	"lafOjqOCnLuFjn0obaOYn+2q7qDk6a4rWc/Wzn0Fe3RWdouFEvoSH5XaAo0E5hn+cqo+Pj/erSbleE/b",
	"Jf4WDubb7RGhIWRqtCRf7qixHAg97iWybDByOrwPnNqzdHvx0aOz3AuPbuGB49iA/zDlhvajGEaXIYeh",
	"Uzy0W8I4RZxVuo+6OmWfcgYKmlNbkvTOiRmztT4h41Rl3QGVthRtn05Dc4LM6zt0aho7husvb2D2Oy9+",
	"JLzaKiPln6G4pFVWQoXLkz7hYicdX7CUWbndEj0KlVudd9sQV8/p9j2RFvkiCMtxOi9Y2kZkpg367cMb",
	"ro+3GVIXba6BnixQTiJ5I2ebGXqdQHkmQ0cSQc3ZbPGesk7aRQFeYuiCAgS3I+ZpINPALm50pd/2f26b",
	"WpM7yHk3k073mW3TCV/zI8SgJEz39o8hVlRP+qVQ8fzBmE1rpHCxsWmQsLWkgsPReq1/V1WEdzat3nq6",
	"2HNuJsDAfhI0WeQGpmjqkTGsUtzZ7wrxMaf0T6Iew7n6O65fUlRJwDWjl0lMYqgVp0vd+2os86ktx8zL",
	"unEXRFdrjoEqSZxAoY8Vo8VyBeOfvD9Vc5V3bV2MuUmzanZPKebq5P0TYkbMMAtdur9aIl8/Rrj1mR8S",
	"U5m+UbBb5amQB6HPbafPn6Qsxv3dOxKUoNiLJwFzIL3LKa76DrusyT5j3NXOVH3774pQznSNjGYC1jO8",
	"rN7bJuNfqXTh0l0vVIEE0HMM36O/Bf04jicj6/vdiAdB0Zr6obuYznjJIPZbfkc7sqJFkUIR2GyNBVQG",
	"VnV1/Ckwzp1MsT1hDLc6W4W7p6Ov7j+Nc7KjXHXju/Q8dRYwQw8bSHvUoj04O3T+3u+L6m6sXQxUtxYo",
	"BhZpfCPqQrl9b0ZuB8DjpON2UdZDMjG9ylOK46OvWAgcrSAPozaHtHuzv9K9IEjE9kOLJCXey7tpf2Lb",
	"vknyz4HlLMvxW0unNZYeShBJOn/+PPpb9OSHn0arGGoXU3+MtUArWzhFE+yPFjXgrXL0Ff4MzjtTSZXe",
	"5higHGHgv2FIUKO2wd+sMBDqGV/eRNh4h7vRFm/qnQnODeo0GkAD77javo4T0Y86EKtqGn29HgN35RJv",
	"K/YkdPbhKgZQ70RjgAsYVzdxyG8qcJJKJUY5hKlnS+MRpm/n5lmzmjdOWUFVqwFm0t7woQyDOaM7iojR",
	"QhAdQqQ30hZDVLW2wBSNWEM7uFMl9SoRK5TkcXKZxAVONYQaKps7zgO+h1CkNje5vvp/Oqbxtgaetnuz",
	"NRzYdFOXvI++wp8h0WvaI+6e8LYjPPhvmMyGhbbKbIOw0HJ3l2J0LQeW4Al4U7+3EVxZsXLArVN52aqu",
	"aElyCdtSoprUm3u6VZ7qcnXw2EdMUddWPOsNDpUw1y0w9DJ9EsPuwGJQ/1K1G3WjzbjS56Z0oy8H+LWX",
	"4W3W4NW7PW8vCbjXEqJqcH2sNC+G6nNHpaaAuBa1Q7+TPDF7a6La4daWup6hxZdNUcobwHatkLJnP+fd",
	"fKz+CJPY1v+vVWjvu0jpFoQAErubCgZ77AWkRC598Pbg6tb0bjON+0N/tG9ceMkCdyf7Cm2DOXzyAT6M",
	"VMhNQwC27wWdQwtHX+EvYRojNO2iglNVeTyEx9SG2xjMLCo8z8WY/JVoLNXZayhEt6mWmeRDIO0Uzjxo",
	"iPfX8FTM7KnkGS4RbKmuThg7ouCWA3lv8bf9FScF1X4O44gq3F+NysddO2YkszRwn1HshnPn1vhtaOLc",
	"a2K67yRprpa0LYmUes+8JJMqJ4kDSn+eQtNa4cZO4ax6wBqMM9ydF8pqz/ut1KkxkVmYtjj/efBtPddC",
	"EiRHEeFwrai4plQDZduxr55rqsKijMe784RgttrmjVLeWsf2SOJaKCj8tShfoWGmYMjVlCDoEG331uJ6",
	"D6GkAQD3C9VfkpLRBG1htE64NzXgeyZrY7Jx/L56kS1lrw3S62Y0FcRTe5Rc42WSgzZ4sUFJPEMnaUqv",
	"eKnmQtLPJP+MJJjRZYKh+z9n8p8cAc69DNoSYNWjyQi6TqLbqiCpLXlYsh7cphoG3Dtlxxk6XVj8oIQj",
	"qTynlzrZeA4KMk5TEpsorFyQpYL1FEkUSv6RCj5LiOxlsxk4DdXzBr0kjCUxqfrPy+5+Vjco3N+FUs7g",
	"YyYI4eq6Sj4JwRmM7blU1uKlDLYsKx197fWNMpk+AYGt5B/u/5SqmDW/ZBzm7iToetwTqQHGX4hog2F/",
	"jks/xMDt5dbCbF8+g53kr11vBdVpzicj1S8Kp/7d7ChyFFMxQcdURlrg3VtVbjhPu0T6YGPKm+vgt+/E",
	"lAKyq82S4rJkRnrOoNIrzep2J+9PkZB78J5Mb8lWT3JJTHKRiE1dSX1/igBe9omq3If6/dR0NBtSroiC",
	"ZGtJv/MFTU1QYFDkMTI9ke7ZsktofKbb/qwn2QGlOM9JfJLzK8LMaB7ELuxENUMJMktBpndgksKWbftV",
	"to5t70uH807pO9Xe+jeyq54XNRDj1/rUbGGI6SLU0uG39iXYe7sFoxAYGq0S8HtTU5kWvMXi5Ue399cw",
	"naptaSDZOxyLm6AIPAkYX4xZpMgYM5vcCgBr5m/XSBlCHD0VTYP5tVVK7QF/fY7h14K/4xGYWd49hiGr",
	"+0LSAjD/BeXOo2tfF50xzojWW9AYZKWp4VrOiOEqUKnpqeOhTjbcHBgq7d/eJFCrdnHn5VKoDgjlQNwj",
	"fP+KoMpfrSbVF4BlcknyVknWqiaOjvU1ZiQX34GU69CET/hLiZpbqBC7dHrdIm8XWXetMu5eunmlm3sx",
	"aSOc7QXbNUu0e1nWK8uGSLERxVeX4DLz9VCgT2ZtYWwKsjKNZV/yWpYaK9oH6wVZlfZrT/oIua1qU94O",
	"wqtDaxvS85yT29qNwoxCdSG45c00WMANkGzhD5VbxO4PRNZAq06QOLgLkD/eiXGkxjAYEcMsNkGmmkNF",
	"xTUZZELF61g2GL/1ZXvxWs3C0eu10Zp9o+Th25x9Y5zMGA5rtrv1siIN0ZagWUhQ4AcYb3stSfX3aEdy",
	"Bc42VDtnD0df5R/91CHPWdmyffXyP2FUIVu2EoVeTqiYKNIxKQKg1SSHDiDyVbIQR1/hjyAeg5ZeKH6U",
	"X+A/YWCEpq1wNCsKBCRfjXpzhtk9kFS/l6CEPbTBcpCnfN0nvg3QSgtyYT3IV/c6gX6XHOLr+GklhHC3",
	"eF1n1rhSBfHVrcX1HhziYYEPnKpIfnC3F2iter9rCCMJGU5SEkGiZtvElAkwHl0EZzYzNNfJmb0Ykhfp",
	"e3a8Ptf5Clb75XGAlqPazbwedXrA7UlcD+Chbzt0MFFbE08fKe7bkqMOxwbCFTVbc81uyU98R7AGQADW",
	"aypNn/dyG0BlNzX6LVVs9nWRbMWx+hzrTcLMozgwd+LUJEDvOVrxMuiyonNab31oye4efhZqWOslKf8M",
	"4GWBl35OtsvcFx+f4WVbkusdTa4CRvZwbjXFtQaRwfDRV4GXwVZTL9zUVzkuJPEOil57ZasAqo3rmb3M",
	"qxYY6g2Nl/s0hHphOe25A3uhpnkiGGQC0qBfM4SOtyE7eWdrgVPfkeDnS9npVsJqXwdBi5CAZ0PUJyq2",
	"CmQJkxFH8FrISB6Sake1VB4GNmallxVemhkOmCV6jywLnaFHV/mW33mC3VpIXvOpGsYwu5ytFhlB3LNL",
	"CJjAy6VJ0KoE5X3o1w0n1ClZbXAuHVf/2SvbfScxYJo72qLAXJYkODv6Kv+rCqkNfJTBLbkNJTkQnMn/",
	"n8bmZSYoB2a74FVrDCWBJBv/DGt9IoKFdzxxVKzwocbZWoLiNhhnO3oHdRpAfYbPskNtc4qOMsfvpPMZ",
	"xzTu3llp4Bsli6qzwlBKInjUC4JegO+WYD75YR1wX2iFqLo0HApM93aRKGE/Tqm9Hox1cMc2aTqtvB3C",
	"NUMSSd5+7unP2Wn34EnbWUvv2IoaVTxrvmS0WIdpprI9Uu11acwkX5oitJqgnbeeYOSpkX9RC7lLGKxs",
	"rAuNS7N3pygdQFv3DfRGreDIVnoNwQzcIg8SNXvL1epsfXdRasyyFYR34TuAdcOZdlupaua5bYgPuOBg",
	"Fu/1YtPfmFMm/r4JbfmOQZzR7tKm57woUVojvbA8z5pMobjy1uLk+5QkfiES4ldv+3dJFNPKi9geabK9",
	"harqW2MX01eiK6NcIEYikot0o71iY1Ox697GddM2Li/nDrN23bbz4C4YvCyztZq8Aq9lvnIl3YVqPmhS",
	"liuVyoSpY+Iac6D2jM2PGqpklMVB7oze31F3xZGQ9QIsocgbPwHUmJe57YPdD+ZWF5bIym7n+hIZbIXG",
	"FlXtkPD4vWfmqpFaeC6CUBGzTbzvHoXKXsOELTC3iBe+bayxnSxhTsYAx/a7jdjYr1/de5Zcbh+Lt99Q",
	"51YyCgjKa2PL7d4thzDaoEfMQzisOx8zYQMhD5o1PAT4u5cVr1Vjy1ZDMWLdzO8MStod9W0cQ7vHfhda",
	"Bjgv99mv/LjQjsJ3BhOt3mpm/dt7Wm9rIby9IL5LzuEOftsdZgLdOIJdOHZ132gl1folurKJ0u0nyFWj",
	"ffXKyyeENs9urYOPnLzFJSMMhmWh4C2KHOueKCOCyT9LEXH9dY85etwsdM2IKnSN5AxPfywtq7Uaybrd",
	"0Vf1l3nRUSTZoZ0TC7vb4iXWb9lMVJkiHmIFFXgZ2tKNZ+xvbiH/UWAmBvV4nceD2p8lGfmT5mRQp7eK",
	"oLc0/tphPpCW4tNAC9ihHsOpJUX5uXUX95s+STjU5eY2uzz2udoEutlUQD/AvWaYa00vYrbx2bjV2Alx",
	"o7lOF5p2bfb2o+Dg3GXCXWU87LeVi0wggx3SMX7vDuOR6WO7woSKhe9LIuzP7SXM5cWVCuQLKO7Vusnd",
	"lxeD7xypzua2q6MbzYlw7ReY5u1Fb857EakR4msNhztOh2qbWu41TSzq827JMxTQO2hUNyhJ1MDeT6E+",
	"zwzvsWUcMCrKYtj5NdDj4jarhj2eFh4vi/4yvyXHq+KxAwT8EMh2Rd8egniHvfrYSlUpbueqbfVAwEZr",
	"Dd86I12/l0wf2+3mUTEisTx/Hv0tevLDTzfmFnN7XGJ6OfpgkHbvA2Ppapj/S5fQ2Iffy0AxsXdfl335",
	"uVwb7Y/j5DJQEHy3Kfy9JBPo0+Ky2rCcgZ1KWJV/hjlM3Gbltt1RAla+a1rDIYptOFDPDt5uceNZFwG7",
	"3Wn6asy0ledLHyMNccW4zWzU5eUyjodLL/vcPlDeMW+WHk8Wl1UGpAqnOUEmFK2RNtyPeJ0X0UH9kCzF",
	"hyw8t0oZroBpXIn2kkC8xbmlK5+1H+8d9rU6u9/j/LryUre5LsleJCpYIjYA95UQ68mL3z9JSHDCLg0+",
	"CpZOXkxM5CheJ08roaPwAvXlMV4njxOJaPg2kT+RL+uUMsIekxxfpBIvC5xyIj+tGf2yKX9X+PrymONs",
	"nRJe/fDt/wQAAP//Tk5FhDk5AgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

